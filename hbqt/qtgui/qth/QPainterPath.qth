/*
 * $Id: QPainterPath.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Inherit     =
Type        = Core
New         =
Destructor  =
</CLASS>

<CODE>
#include <QtGui/QPainterPath>


/* QPainterPath ()
 * QPainterPath ( const QPointF & startPoint )
 * QPainterPath ( const QPainterPath & path )
 * ~QPainterPath ()
 */
HB_FUNC( QT_QPAINTERPATH )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QPOINTF" ) )
   {
      __HB_RETPTRGC__( new QPainterPath( *hbqt_par_QPointF( 1 ) ) );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QPAINTERPATH" ) )
   {
      __HB_RETPTRGC__( new QPainterPath( *hbqt_par_QPainterPath( 1 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QPainterPath() );
   }      
}
</CODE>

<ENUMS>
enum ElementType { MoveToElement, LineToElement, CurveToElement, CurveToDataElement }
</ENUMS>

<PROTOS>

void addEllipse ( const QRectF & boundingRectangle )
void addEllipse ( qreal x, qreal y, qreal width, qreal height )
void addEllipse ( const QPointF & center, qreal rx, qreal ry )
void addPath ( const QPainterPath & path )
void addPolygon ( const QPolygonF & polygon )
void addRect ( const QRectF & rectangle )
void addRect ( qreal x, qreal y, qreal width, qreal height )
void addRegion ( const QRegion & region )
void addRoundedRect ( const QRectF & rect, qreal xRadius, qreal yRadius, Qt::SizeMode mode = Qt::AbsoluteSize )
void addRoundedRect ( qreal x, qreal y, qreal w, qreal h, qreal xRadius, qreal yRadius, Qt::SizeMode mode = Qt::AbsoluteSize )
void addText ( const QPointF & point, const QFont & font, const QString & text )
void addText ( qreal x, qreal y, const QFont & font, const QString & text )
qreal angleAtPercent ( qreal t ) const
void arcMoveTo ( const QRectF & rectangle, qreal angle )
void arcMoveTo ( qreal x, qreal y, qreal width, qreal height, qreal angle )
void arcTo ( const QRectF & rectangle, qreal startAngle, qreal sweepLength )
void arcTo ( qreal x, qreal y, qreal width, qreal height, qreal startAngle, qreal sweepLength )
QRectF boundingRect () const
void closeSubpath ()
void connectPath ( const QPainterPath & path )

bool contains ( const QPointF & point ) const
bool contains ( const QRectF & rectangle ) const
bool contains ( const QPainterPath & p ) const

QRectF controlPointRect () const
void cubicTo ( const QPointF & c1, const QPointF & c2, const QPointF & endPoint )
void cubicTo ( qreal c1X, qreal c1Y, qreal c2X, qreal c2Y, qreal endPointX, qreal endPointY )
QPointF currentPosition () const
// const QPainterPath::Element & elementAt ( int index ) const
int elementCount () const
Qt::FillRule fillRule () const
QPainterPath intersected ( const QPainterPath & p ) const

bool intersects ( const QRectF & rectangle ) const
bool intersects ( const QPainterPath & p ) const

bool isEmpty () const
qreal length () const
void lineTo ( const QPointF & endPoint )
void lineTo ( qreal x, qreal y )
void moveTo ( const QPointF & point )
void moveTo ( qreal x, qreal y )
qreal percentAtLength ( qreal len ) const
QPointF pointAtPercent ( qreal t ) const
void quadTo ( const QPointF & c, const QPointF & endPoint )
void quadTo ( qreal cx, qreal cy, qreal endPointX, qreal endPointY )
void setElementPositionAt ( int index, qreal x, qreal y )
void setFillRule ( Qt::FillRule fillRule )
QPainterPath simplified () const
qreal slopeAtPercent ( qreal t ) const
QPainterPath subtracted ( const QPainterPath & p ) const

QPolygonF toFillPolygon ( const QTransform & matrix ) const
QPolygonF toFillPolygon ( const QMatrix & matrix = QMatrix() ) const

QList<QPolygonF> toFillPolygons ( const QTransform & matrix ) const
QList<QPolygonF> toFillPolygons ( const QMatrix & matrix = QMatrix() ) const

QPainterPath toReversed () const

QList<QPolygonF> toSubpathPolygons ( const QTransform & matrix ) const
QList<QPolygonF> toSubpathPolygons ( const QMatrix & matrix = QMatrix() ) const

QPainterPath united ( const QPainterPath & p ) const
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
