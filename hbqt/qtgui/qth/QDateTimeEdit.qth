/*
 * $Id: QDateTimeEdit.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
Inherit     = QAbstractSpinBox
New         = pParent
</CLASS>

<CODE>
#include <QtGui/QDateTimeEdit>


/*
 * QDateTimeEdit ( QWidget * parent = 0 )
 * QDateTimeEdit ( const QDateTime & datetime, QWidget * parent = 0 )
 * QDateTimeEdit ( const QDate & date, QWidget * parent = 0 )
 * QDateTimeEdit ( const QTime & time, QWidget * parent = 0 )
 */
HB_FUNC( QT_QDATETIMEEDIT )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QWIDGET" ) )
   {
      __HB_RETPTRGC__( new QDateTimeEdit( hbqt_par_QWidget( 1 ) ) );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QDATE" ) )
   {
      __HB_RETPTRGC__( new QDateTimeEdit( *hbqt_par_QDate( 1 ) ) );
   }
   else if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QDATE" ) && hbqt_par_isDerivedFrom( 2, "QWIDGET" ) )
   {
      __HB_RETPTRGC__( new QDateTimeEdit( *hbqt_par_QDate( 1 ), hbqt_par_QWidget( 2 ) ) );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QTIME" ) )
   {
      __HB_RETPTRGC__( new QDateTimeEdit( *hbqt_par_QTime( 1 ) ) );
   }
   else if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QTIME" ) && hbqt_par_isDerivedFrom( 2, "QWIDGET" ) )
   {
      __HB_RETPTRGC__( new QDateTimeEdit( *hbqt_par_QTime( 1 ), hbqt_par_QWidget( 2 ) ) );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QDATETIME" ) )
   {
      __HB_RETPTRGC__( new QDateTimeEdit( *hbqt_par_QDateTime( 1 ) ) );
   }
   else if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QDATETIME" ) && hbqt_par_isDerivedFrom( 2, "QWIDGET" ) )
   {
      __HB_RETPTRGC__( new QDateTimeEdit( *hbqt_par_QDateTime( 1 ), hbqt_par_QWidget( 2 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QDateTimeEdit() );
   }      
}
</CODE>

<ENUMS>
enum Section { NoSection, AmPmSection, MSecSection, SecondSection, ..., YearSection }
flags Sections
</ENUMS>

<PROTOS>
bool calendarPopup () const
QCalendarWidget * calendarWidget () const
void clearMaximumDate ()
void clearMaximumDateTime ()
void clearMaximumTime ()
void clearMinimumDate ()
void clearMinimumDateTime ()
void clearMinimumTime ()
Section currentSection () const
int currentSectionIndex () const
QDate date () const
QDateTime dateTime () const
QString displayFormat () const
Sections displayedSections () const
QDate maximumDate () const
QDateTime maximumDateTime () const
QTime maximumTime () const
QDate minimumDate () const
QDateTime minimumDateTime () const
QTime minimumTime () const
Section sectionAt ( int index ) const
int sectionCount () const
QString sectionText ( Section section ) const
void setCalendarPopup ( bool enable )
void setCalendarWidget ( QCalendarWidget * calendarWidget )
void setCurrentSection ( Section section )
void setCurrentSectionIndex ( int index )
void setDateRange ( const QDate & min, const QDate & max )
void setDateTimeRange ( const QDateTime & min, const QDateTime & max )
void setDisplayFormat ( const QString & format )
void setMaximumDate ( const QDate & max )
void setMaximumDateTime ( const QDateTime & dt )
void setMaximumTime ( const QTime & max )
void setMinimumDate ( const QDate & min )
void setMinimumDateTime ( const QDateTime & dt )
void setMinimumTime ( const QTime & min )
void setSelectedSection ( Section section )
void setTimeRange ( const QTime & min, const QTime & max )
void setTimeSpec ( Qt::TimeSpec spec )
QTime time () const
Qt::TimeSpec timeSpec () const
</PROTOS>

<SLOTS>
void setDate ( const QDate & date )
void setDateTime ( const QDateTime & dateTime )
void setTime ( const QTime & time )
</SLOTS>

<SIGNALS>
void dateChanged ( const QDate & date )
void dateTimeChanged ( const QDateTime & datetime )
void timeChanged ( const QTime & time )
</SIGNALS>
