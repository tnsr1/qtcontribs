/*
 * $Id: QPaintEngine.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Inherit     =
Type        =
New         =
Constructor = no
</CLASS>

<SUBCLASS>
</SUBCLASS>

<DOC>
</DOC>

<CODE>
#include <QtGui/QPaintEngine>


/*
 * QPaintEngine ( PaintEngineFeatures caps = 0 )
 * virtual ~QPaintEngine ()
 */
HB_FUNC( QT_QPAINTENGINE )
{

}
</CODE>

<ENUMS>
enum DirtyFlag { DirtyPen, DirtyBrush, DirtyBrushOrigin, DirtyFont, ..., AllDirty }
flags DirtyFlags
enum PaintEngineFeature { AlphaBlend, Antialiasing, BlendModes, BrushStroke, ..., AllFeatures }
flags PaintEngineFeatures
enum PolygonDrawMode { OddEvenMode, WindingMode, ConvexMode, PolylineMode }
enum Type { X11, Windows, MacPrinter, CoreGraphics, ..., MaxUser }
</ENUMS>

<PROTOS>
virtual bool begin ( QPaintDevice * pdev ) = 0
virtual void drawEllipse ( const QRectF & rect )
virtual void drawEllipse ( const QRect & rect )
virtual void drawImage ( const QRectF & rectangle, const QImage & image, const QRectF & sr, Qt::ImageConversionFlags flags = Qt::AutoColor )
virtual void drawLines ( const QLineF * lines, int lineCount )
virtual void drawLines ( const QLine * lines, int lineCount )
virtual void drawPath ( const QPainterPath & path )
virtual void drawPixmap ( const QRectF & r, const QPixmap & pm, const QRectF & sr ) = 0
virtual void drawPoints ( const QPointF * points, int pointCount )
virtual void drawPoints ( const QPoint * points, int pointCount )
virtual void drawPolygon ( const QPointF * points, int pointCount, PolygonDrawMode mode )
virtual void drawPolygon ( const QPoint * points, int pointCount, PolygonDrawMode mode )
virtual void drawRects ( const QRectF * rects, int rectCount )
virtual void drawRects ( const QRect * rects, int rectCount )
virtual void drawTextItem ( const QPointF & p, const QTextItem & textItem )
virtual void drawTiledPixmap ( const QRectF & rect, const QPixmap & pixmap, const QPointF & p )
virtual bool end () = 0
bool hasFeature ( PaintEngineFeatures feature ) const
bool isActive () const
QPaintDevice * paintDevice () const
QPainter * painter () const
void setActive ( bool state )
virtual Type type () const = 0
// virtual void updateState ( const QPaintEngineState & state ) = 0
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
