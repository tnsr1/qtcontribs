/*
 * $Id: QSplitter.qth 369 2014-10-19 20:35:44Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
Inherit     = QFrame
New         = pParent
</CLASS>

<CODE>
#include <QtGui/QSplitter>


/*
 * QSplitter ( QWidget * parent = 0 )
 * QSplitter ( Qt::Orientation orientation, QWidget * parent = 0 )
 * ~QSplitter ()
 */
HB_FUNC( QT_QSPLITTER )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QWIDGET" ) )
   {
      __HB_RETPTRGC__( new QSplitter( hbqt_par_QWidget( 1 ) ) );
   }
   else if( hb_pcount() == 1 && HB_ISNUM( 1 ) )
   {
      __HB_RETPTRGC__( new QSplitter( ( Qt::Orientation ) hb_parni( 1 ) ) );
   }
   else if( hb_pcount() == 2 && HB_ISNUM( 1 ) && hbqt_par_isDerivedFrom( 2, "QWIDGET" ) )
   {
      __HB_RETPTRGC__( new QSplitter( ( Qt::Orientation ) hb_parni( 1 ), hbqt_par_QWidget( 2 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QSplitter() );
   }
}
</CODE>

<PROTOS>
void addWidget ( QWidget * widget )
bool childrenCollapsible () const
int count () const
void getRange ( int index, int * min, int * max ) const
QSplitterHandle * handle ( int index ) const
int handleWidth () const
int indexOf ( QWidget * widget ) const
void insertWidget ( int index, QWidget * widget )
bool isCollapsible ( int index ) const
bool opaqueResize () const
Qt::Orientation orientation () const
void refresh ()
bool restoreState ( const QByteArray & state )
QByteArray saveState () const
void setChildrenCollapsible ( bool )
void setCollapsible ( int index, bool collapse )
void setHandleWidth ( int )
void setOpaqueResize ( bool opaque = true )
void setOrientation ( Qt::Orientation )
void setSizes ( const QList<int> & list )
void setStretchFactor ( int index, int stretch )
QList<int> sizes () const
QWidget * widget ( int index ) const

# Harbour Extension - We cannot build QList< T > from PRG code
#
void hbSetSizes( PHB_ITEM sizes ){
   QSplitter * p = ( QSplitter * ) hbqt_par_ptr( 0 );
   if( p )
   {
      PHB_ITEM pSizes = hb_param( 1, HB_IT_ARRAY );
      if( pSizes )
      {
         int iLen = ( int ) hb_arrayLen( pSizes );
         QList<int> qList;
         int i;
         for( i = 0; i < iLen; i++ )
         {
            qList.append( hb_arrayGetNI( pSizes, i + 1 ) );
         }
         p->setSizes( qList );
      }
   }
}
</PROTOS>

<SIGNALS>
void splitterMoved ( int pos, int index )
</SIGNALS>

