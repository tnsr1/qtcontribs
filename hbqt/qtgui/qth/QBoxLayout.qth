/*
 * $Id: QBoxLayout.qth 434 2016-11-09 02:32:49Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
Inherit     = QLayout
New         = nDirection, pParent
</CLASS>

<CODE>
#include <QtGui/QBoxLayout>


/*
 * QBoxLayout ( Direction dir, QWidget * parent = 0 )
 * ~QBoxLayout ()
 */
HB_FUNC( QT_QBOXLAYOUT )
{
   if( hb_pcount() == 1 && HB_ISNUM( 1 ) )
   {
      __HB_RETPTRGC__( new QBoxLayout( ( QBoxLayout::Direction ) hb_parni( 1 ) ) );
   }
   else if( hb_pcount() == 2 && HB_ISNUM( 1 ) && hbqt_par_isDerivedFrom( 2, "QWIDGET" ) )
   {
      __HB_RETPTRGC__( new QBoxLayout( ( QBoxLayout::Direction ) hb_parni( 1 ), hbqt_par_QWidget( 2 ) ) );
   }
   else
   {
      hb_errRT_BASE( EG_ARG, 9999, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
   }      
}
</CODE>

<ENUMS>
enum Direction { LeftToRight, RightToLeft, TopToBottom, BottomToTop }
</ENUMS>

<PROTOS>
void addLayout ( QLayout * layout, int stretch = 0 )   [*D=1*]
void addSpacerItem ( QSpacerItem * spacerItem )        [*D=1*]
void addSpacing ( int size )
void addStretch ( int stretch = 0 )
void addStrut ( int size )
void addWidget ( QWidget * widget, int stretch = 0, Qt::Alignment alignment = 0 )    [*D=1*]
Direction direction () const
void insertLayout ( int index, QLayout * layout, int stretch = 0 )
void insertSpacerItem ( int index, QSpacerItem * spacerItem )                        [*D=2*]
void insertSpacing ( int index, int size )
void insertStretch ( int index, int stretch = 0 )
void insertWidget ( int index, QWidget * widget, int stretch = 0, Qt::Alignment alignment = 0 )
virtual void invalidate ()
void setDirection ( Direction direction )
void setSpacing ( int spacing )
void setStretch ( int index, int stretch )
bool setStretchFactor ( QWidget * widget, int stretch )
bool setStretchFactor ( QLayout * layout, int stretch )
int spacing () const
int stretch ( int index ) const
</PROTOS>
