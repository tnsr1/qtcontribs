/*
 * $Id: QGraphicsView.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = 
Inherit     = QAbstractScrollArea
Type        = 
New         = 
</CLASS>

<CODE>
#include <QtGui/QGraphicsView>


/*
 * QGraphicsView ( QWidget * parent = 0 )
 * QGraphicsView ( QGraphicsScene * scene, QWidget * parent = 0 )
 * ~QGraphicsView ()
 */
HB_FUNC( QT_QGRAPHICSVIEW )
{
   if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QGRAPHICSSCENE" ) && hbqt_par_isDerivedFrom( 2, "QWIDGET" ) )
   {
      __HB_RETPTRGC__( new QGraphicsView( hbqt_par_QGraphicsScene( 1 ), hbqt_par_QWidget( 2 ) ) );
   }   
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QGRAPHICSSCENE" ) )
   {
      __HB_RETPTRGC__( new QGraphicsView( hbqt_par_QGraphicsScene( 1 ), 0 ) );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QWIDGET" ) )
   {   
      __HB_RETPTRGC__( new QGraphicsView( hbqt_par_QWidget( 1 ) ) ); 
   }
   else
   {
      __HB_RETPTRGC__( new QGraphicsView() );
   }
}
</CODE>

<ENUMS>
flags CacheMode
enum CacheModeFlag { CacheNone, CacheBackground }
enum DragMode { NoDrag, ScrollHandDrag, RubberBandDrag }
flags OptimizationFlags
enum OptimizationFlag { DontClipPainter, DontSavePainterState, DontAdjustForAntialiasing }
enum ViewportAnchor { NoAnchor, AnchorViewCenter, AnchorUnderMouse }
enum ViewportUpdateMode { FullViewportUpdate, MinimalViewportUpdate, SmartViewportUpdate, BoundingRectViewportUpdate, NoViewportUpdate }
</ENUMS>

<PROTOS>
Qt::Alignment alignment () const
QBrush backgroundBrush () const
CacheMode cacheMode () const
void centerOn ( const QPointF & pos )
void centerOn ( qreal x, qreal y )
void centerOn ( const QGraphicsItem * item )
DragMode dragMode () const
void ensureVisible ( const QRectF & rect, int xmargin = 50, int ymargin = 50 )
void ensureVisible ( qreal x, qreal y, qreal w, qreal h, int xmargin = 50, int ymargin = 50 )
void ensureVisible ( const QGraphicsItem * item, int xmargin = 50, int ymargin = 50 )
void fitInView ( const QRectF & rect, Qt::AspectRatioMode aspectRatioMode = Qt::IgnoreAspectRatio )
void fitInView ( qreal x, qreal y, qreal w, qreal h, Qt::AspectRatioMode aspectRatioMode = Qt::IgnoreAspectRatio )
void fitInView ( const QGraphicsItem * item, Qt::AspectRatioMode aspectRatioMode = Qt::IgnoreAspectRatio )
QBrush foregroundBrush () const
bool isInteractive () const
QGraphicsItem * itemAt ( const QPoint & pos ) const
QGraphicsItem * itemAt ( int x, int y ) const
QList<QGraphicsItem *> items () const
QList<QGraphicsItem *> items ( const QPoint & pos ) const
QList<QGraphicsItem *> items ( int x, int y ) const
QList<QGraphicsItem *> items ( int x, int y, int w, int h, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape ) const
QList<QGraphicsItem *> items ( const QRect & rect, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape ) const
QList<QGraphicsItem *> items ( const QPolygon & polygon, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape ) const
QList<QGraphicsItem *> items ( const QPainterPath & path, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape ) const
QPoint mapFromScene ( const QPointF & point ) const
QPolygon mapFromScene ( const QRectF & rect ) const
QPolygon mapFromScene ( const QPolygonF & polygon ) const
QPainterPath mapFromScene ( const QPainterPath & path ) const
QPoint mapFromScene ( qreal x, qreal y ) const
QPolygon mapFromScene ( qreal x, qreal y, qreal w, qreal h ) const
QPointF mapToScene ( const QPoint & point ) const
QPolygonF mapToScene ( const QRect & rect ) const
QPolygonF mapToScene ( const QPolygon & polygon ) const
QPainterPath mapToScene ( const QPainterPath & path ) const
QPointF mapToScene ( int x, int y ) const
QPolygonF mapToScene ( int x, int y, int w, int h ) const
QMatrix matrix () const
OptimizationFlags optimizationFlags () const
void render ( QPainter * painter, const QRectF & target = QRectF(), const QRect & source = QRect(), Qt::AspectRatioMode aspectRatioMode = Qt::KeepAspectRatio )
QPainter::RenderHints renderHints () const
void resetCachedContent ()
void resetMatrix ()
void resetTransform ()
ViewportAnchor resizeAnchor () const
void rotate ( qreal angle )
Qt::ItemSelectionMode rubberBandSelectionMode () const
void scale ( qreal sx, qreal sy )
QGraphicsScene * scene () const
QRectF sceneRect () const
void setAlignment ( Qt::Alignment alignment )
void setBackgroundBrush ( const QBrush & brush )
void setCacheMode ( CacheMode mode )
void setDragMode ( DragMode mode )
void setForegroundBrush ( const QBrush & brush )
void setInteractive ( bool allowed )
void setMatrix ( const QMatrix & matrix, bool combine = false )
void setOptimizationFlag ( OptimizationFlag flag, bool enabled = true )
void setOptimizationFlags ( OptimizationFlags flags )
void setRenderHint ( QPainter::RenderHint hint, bool enabled = true )
void setRenderHints ( QPainter::RenderHints hints )
void setResizeAnchor ( ViewportAnchor anchor )
void setRubberBandSelectionMode ( Qt::ItemSelectionMode mode )
void setScene ( QGraphicsScene * scene )
void setSceneRect ( const QRectF & rect )
void setSceneRect ( qreal x, qreal y, qreal w, qreal h )
void setTransform ( const QTransform & matrix, bool combine = false )
void setTransformationAnchor ( ViewportAnchor anchor )
void setViewportUpdateMode ( ViewportUpdateMode mode )
void shear ( qreal sh, qreal sv )
QTransform transform () const
ViewportAnchor transformationAnchor () const
void translate ( qreal dx, qreal dy )
QTransform viewportTransform () const
ViewportUpdateMode viewportUpdateMode () const
</PROTOS>

<SLOTS>
void invalidateScene ( const QRectF & rect = QRectF(), QGraphicsScene::SceneLayers layers = QGraphicsScene::AllLayers )
void updateScene ( const QList<QRectF> & rects )
void updateSceneRect ( const QRectF & rect )
</SLOTS>

<SIGNALS>
</SIGNALS>

<VARIABLES>
</VARIABLES>
