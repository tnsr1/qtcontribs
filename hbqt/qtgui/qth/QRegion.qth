/*
 * $Id: QRegion.qth 160 2013-02-04 23:59:32Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Type        = PlainObject
New         = nX, nY, nWidth, nHeight, nType
</CLASS>


<CODE>
#include <QtGui/QRegion>


/*
 * QRegion ()
 * QRegion ( int x, int y, int w, int h, RegionType t = Rectangle )
 * QRegion ( const QPolygon & a, Qt::FillRule fillRule = Qt::OddEvenFill )
 * QRegion ( const QRegion & r )
 * QRegion ( const QBitmap & bm )
 * QRegion ( const QRect & r, RegionType t = Rectangle )
 * ~QRegion ()
 */
HB_FUNC( QT_QREGION )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QREGION" ) )
   {
      __HB_RETPTRGC__( new QRegion( *hbqt_par_QRegion( 1 ) ) );      
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QPOLYGON" ) )
   {   
      __HB_RETPTRGC__( new QRegion( *hbqt_par_QPolygon( 1 ) ) );
   }   
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QBITMAP" ) )
   {   
      __HB_RETPTRGC__( new QRegion( *hbqt_par_QBitmap( 1 ) ) );
   }   
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QRECT" ) )
   {   
      __HB_RETPTRGC__( new QRegion( *hbqt_par_QRect( 1 ) ) );
   }   
   else if( hb_pcount() >= 4 && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) && HB_ISNUM( 3 ) && HB_ISNUM( 4 ) )
   {
      __HB_RETPTRGC__( new QRegion( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ), HB_ISNUM( 5 ) ? ( QRegion::RegionType ) hb_parni( 5 ) : QRegion::Rectangle ) );
   }
   else if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QPOLYGON" ) && HB_ISNUM( 2 ) )
   {
      __HB_RETPTRGC__( new QRegion( *hbqt_par_QPolygon( 1 ), ( Qt::FillRule ) hb_parni( 2 ) ) );
   }   
   else if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QRECT" ) && HB_ISNUM( 2 ) )
   {   
      __HB_RETPTRGC__( new QRegion( *hbqt_par_QRect( 1 ), ( QRegion::RegionType ) hb_parni( 2 ) ) ); 
   }
   else
   {
      __HB_RETPTRGC__( new QRegion() );
   }
}
</CODE>

<ENUMS>
enum RegionType { Rectangle, Ellipse }
</ENUMS>

<PROTOS>
QRect boundingRect () const
bool contains ( const QPoint & p ) const
bool contains ( const QRect & r ) const
#
# non-portable
// Handle handle () const
#
QRegion intersected ( const QRegion & r ) const
QRegion intersected ( const QRect & rect ) const
bool intersects ( const QRegion & region ) const
bool intersects ( const QRect & rect ) const
bool isEmpty () const
int numRects () const                                                          [*V=-0x040900*]
QVector<QRect> rects () const
void setRects ( const QRect * rects, int number )
QRegion subtracted ( const QRegion & r ) const
void translate ( int dx, int dy )
void translate ( const QPoint & point )
QRegion translated ( int dx, int dy ) const
QRegion translated ( const QPoint & p ) const
QRegion united ( const QRegion & r ) const
QRegion united ( const QRect & rect ) const
QRegion xored ( const QRegion & r ) const
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
