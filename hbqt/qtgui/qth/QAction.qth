/*
 * $Id: QAction.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>

Inherit     = QObject
New         = pParent
Calls    = QT_QAction

</CLASS>


<CODE>
#include <QtGui/QAction>


/*
 * QAction ( QObject * parent )
 * QAction ( const QString & text, QObject * parent )
 * QAction ( const QIcon & icon, const QString & text, QObject * parent )
 * ~QAction ()
 */
HB_FUNC( QT_QACTION )
{
   if( hb_pcount() == 3 && hbqt_par_isDerivedFrom( 1, "QICON" ) && HB_ISCHAR( 2 ) && hbqt_par_isDerivedFrom( 3, "QOBJECT" ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QAction( *hbqt_par_QIcon( 1 ), hb_parstr_utf8( 2, &pText01, NULL ), hbqt_par_QObject( 3 ) ) );
      hb_strfree( pText01 ); 
   }
   else if( hb_pcount() == 2 && HB_ISCHAR( 1 ) && hbqt_par_isDerivedFrom( 2, "QOBJECT" ) )
   {   
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QAction( hb_parstr_utf8( 1, &pText01, NULL ), hbqt_par_QObject( 2 ) ) );
      hb_strfree( pText01 ); 
   }   
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QOBJECT" ) )
   {
      __HB_RETPTRGC__( new QAction( hbqt_par_QObject( 1 ) ) );
   }   
   else 
   {   
      hb_errRT_BASE( EG_ARG, 9999, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
   }   
}
</CODE>

<ENUMS>
enum ActionEvent { Trigger, Hover }
enum MenuRole { NoRole, TextHeuristicRole, ApplicationSpecificRole, AboutQtRole, ..., QuitRole }
</ENUMS>

<PROTOS>
QActionGroup * actionGroup () const
void activate ( ActionEvent event )
//QList<QGraphicsWidget *> associatedGraphicsWidgets () const
QList<QWidget *> associatedWidgets () const
bool autoRepeat () const
QVariant data () const
QFont font () const
QIcon icon () const
QString iconText () const
bool isCheckable () const
bool isChecked () const
bool isEnabled () const
bool isIconVisibleInMenu () const
bool isSeparator () const
bool isVisible () const
QMenu * menu () const
MenuRole menuRole () const
QWidget * parentWidget () const
void setActionGroup ( QActionGroup * group )
void setAutoRepeat ( bool )
void setCheckable ( bool )
void setData ( const QVariant & userData )
void setFont ( const QFont & font )
void setIcon ( const QIcon & icon )
void setIconText ( const QString & text )
void setIconVisibleInMenu ( bool visible )
void setMenu ( QMenu * menu )
void setMenuRole ( MenuRole menuRole )
void setSeparator ( bool b )
void setShortcut ( const QKeySequence & shortcut )
void setShortcutContext ( Qt::ShortcutContext context )
void setShortcuts ( const QList<QKeySequence> & shortcuts )
void setShortcuts ( QKeySequence::StandardKey key )
void setStatusTip ( const QString & statusTip )
void setText ( const QString & text )
void setToolTip ( const QString & tip )
void setWhatsThis ( const QString & what )
QKeySequence shortcut () const
Qt::ShortcutContext shortcutContext () const
QList<QKeySequence> shortcuts () const
bool showStatusText ( QWidget * widget = 0 )
QString statusTip () const
QString text () const
QString toolTip () const
QString whatsThis () const
</PROTOS>

<SLOTS>
void hover ()
void setChecked ( bool )
void setDisabled ( bool b )
void setEnabled ( bool )
void setVisible ( bool )
void toggle ()
void trigger ()
</SLOTS>

<SIGNALS>
void changed ()
void hovered ()
void toggled ( bool checked )
void triggered ( bool checked = false )
</SIGNALS>
