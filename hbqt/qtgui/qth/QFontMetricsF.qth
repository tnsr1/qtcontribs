/*
 * $Id: QFontMetricsF.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Inherit     = 
Type        = PlainObject
New         = 
</CLASS>


<CODE>
#include <QtGui/QFontMetricsF>


/*
 * QFontMetricsF ( const QFont & font )
 * QFontMetricsF ( const QFont & font, QPaintDevice * paintdevice )
 * QFontMetricsF ( const QFontMetrics & fontMetrics )
 * QFontMetricsF ( const QFontMetricsF & fm )
 * ~QFontMetricsF ()
 */
HB_FUNC( QT_QFONTMETRICSF )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QFONTMETRICS" ) )
   {
      __HB_RETPTRGC__( new QFontMetricsF( *hbqt_par_QFontMetrics( 1 ) ) );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QFONTMETRICSF" ) )
   {
      __HB_RETPTRGC__( new QFontMetricsF( *hbqt_par_QFontMetricsF( 1 ) ) );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QFONT" ) )
   {
      __HB_RETPTRGC__( new QFontMetricsF( *hbqt_par_QFont( 1 ) ) );
   }
   else if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QFONT" ) && hbqt_par_isDerivedFrom( 1, "QPAINTDEVICE" ) )
   {
      __HB_RETPTRGC__( new QFontMetricsF( *hbqt_par_QFont( 1 ), hbqt_par_QPaintDevice( 2 ) ) );
   }
   else
   {
      hb_errRT_BASE( EG_ARG, 9999, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
   }      
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
qreal ascent () const
qreal averageCharWidth () const
QRectF boundingRect ( const QString & text ) const
QRectF boundingRect ( QChar ch ) const
QRectF boundingRect ( const QRectF & rect, int flags, const QString & text, int tabStops = 0, int * tabArray = 0 ) const
qreal descent () const
QString elidedText ( const QString & text, Qt::TextElideMode mode, qreal width, int flags = 0 ) const
qreal height () const
bool inFont ( QChar ch ) const
qreal leading () const
qreal leftBearing ( QChar ch ) const
qreal lineSpacing () const
qreal lineWidth () const
qreal maxWidth () const
qreal minLeftBearing () const
qreal minRightBearing () const
qreal overlinePos () const
qreal rightBearing ( QChar ch ) const
QSizeF size ( int flags, const QString & text, int tabStops = 0, int * tabArray = 0 ) const
qreal strikeOutPos () const
QRectF tightBoundingRect ( const QString & text ) const
qreal underlinePos () const
qreal width ( const QString & text ) const
qreal width ( QChar ch ) const
qreal xHeight () const
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>

<VARIABLES>
</VARIABLES>
