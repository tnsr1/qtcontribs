/*
 * $Id: QPalette.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Inherit     = 
Type        = PlainObject
New         = 
</CLASS>


<CODE>
#include <QtGui/QPalette>


/*
 * QPalette ()
 * QPalette ( const QColor & button )
 * QPalette ( Qt::GlobalColor button )
 * QPalette ( const QColor & button, const QColor & window )
 * QPalette ( const QBrush & windowText, const QBrush & button, const QBrush & light, const QBrush & dark, const QBrush & mid, const QBrush & text, const QBrush & bright_text, const QBrush & base, const QBrush & window )
 * QPalette ( const QPalette & p )
 * ~QPalette ()
 */
HB_FUNC( QT_QPALETTE )
{
   if( hb_pcount() == 1 && HB_ISNUM( 1 ) )
   {
      __HB_RETPTRGC__( new QPalette( ( Qt::GlobalColor ) hb_parni( 1 ) ) );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QPALETTE" ) )
   {
      __HB_RETPTRGC__( new QPalette( *hbqt_par_QPalette( 1 ) ) );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QCOLOR" ) )
   {
      __HB_RETPTRGC__( new QPalette( *hbqt_par_QColor( 1 ) ) );
   }
   else if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QCOLOR" ) && hbqt_par_isDerivedFrom( 2, "QCOLOR" ) )
   {
      __HB_RETPTRGC__( new QPalette( *hbqt_par_QColor( 1 ), *hbqt_par_QColor( 2 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QPalette() );
   }
}
</CODE>

<ENUMS>
enum ColorGroup { Disabled, Active, Inactive, Normal }
enum ColorRole { Window, Background, WindowText, Foreground, ..., NoRole }
</ENUMS>

<PROTOS>
const QBrush & alternateBase () const
const QBrush & base () const
const QBrush & brightText () const
const QBrush & brush ( ColorGroup group, ColorRole role ) const
const QBrush & brush ( ColorRole role ) const
const QBrush & button () const
const QBrush & buttonText () const
qint64 cacheKey () const
const QColor & color ( ColorGroup group, ColorRole role ) const
const QColor & color ( ColorRole role ) const
ColorGroup currentColorGroup () const
const QBrush & dark () const
const QBrush & highlight () const
const QBrush & highlightedText () const
bool isBrushSet ( ColorGroup cg, ColorRole cr ) const
bool isCopyOf ( const QPalette & p ) const
bool isEqual ( ColorGroup cg1, ColorGroup cg2 ) const
const QBrush & light () const
const QBrush & link () const
const QBrush & linkVisited () const
const QBrush & mid () const
const QBrush & midlight () const

QPalette resolve ( const QPalette & other ) const

void setBrush ( ColorRole role, const QBrush & brush )
void setBrush ( ColorGroup group, ColorRole role, const QBrush & brush )
void setColor ( ColorRole role, const QColor & color )
void setColor ( ColorGroup group, ColorRole role, const QColor & color )

void setColorGroup ( ColorGroup cg, const QBrush & windowText, const QBrush & button, const QBrush & light, const QBrush & dark, const QBrush & mid, const QBrush & text, const QBrush & bright_text, const QBrush & base, const QBrush & window )
void setCurrentColorGroup ( ColorGroup cg )

const QBrush & shadow () const
const QBrush & text () const
const QBrush & toolTipBase () const
const QBrush & toolTipText () const
const QBrush & window () const
const QBrush & windowText () const
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
