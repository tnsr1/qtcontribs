/*
 * $Id: QMatrix.qth 160 2013-02-04 23:59:32Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Inherit     = 
Type        = Core
New         =
Destructor  = 
</CLASS>

<CODE>
#include <QtGui/QMatrix>
#include <QtGui/QPainterPath>


/* QMatrix ()
 * QMatrix ( qreal m11, qreal m12, qreal m21, qreal m22, qreal dx, qreal dy )
 * QMatrix ( const QMatrix & matrix )
 */
HB_FUNC( QT_QMATRIX )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QMATRIX" ) )
   {
      __HB_RETPTRGC__( new QMatrix( *hbqt_par_QMatrix( 1 ) ) );
   }
   else if( hb_pcount() == 6 && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) && HB_ISNUM( 3 ) && HB_ISNUM( 4 ) && HB_ISNUM( 5 ) && HB_ISNUM( 6 ) )
   {
      __HB_RETPTRGC__( new QMatrix( hb_parnd( 1 ), hb_parnd( 2 ), hb_parnd( 3 ), hb_parnd( 4 ), hb_parnd( 5 ), hb_parnd( 6 ) ) );
   }   
   else
   {
      __HB_RETPTRGC__( new QMatrix() );
   }      
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
qreal m11 () const
qreal m12 () const
qreal m21 () const
qreal m22 () const
qreal det () const                                                             [*V=-0x040900*]
qreal dx () const
qreal dy () const
QMatrix inverted ( bool * invertible = 0 ) const
bool isIdentity () const
bool isInvertible () const

void map ( qreal x, qreal y, qreal * tx, qreal * ty ) const
//void map ( int x, int y, int * tx, int * ty ) const
QPointF map ( const QPointF & point ) const
QPoint map ( const QPoint & point ) const
QLineF map ( const QLineF & line ) const
QLine map ( const QLine & line ) const
QPolygonF map ( const QPolygonF & polygon ) const
QPolygon map ( const QPolygon & polygon ) const
QRegion map ( const QRegion & region ) const

QPainterPath map ( const QPainterPath & path ) const
QRectF mapRect ( const QRectF & rectangle ) const
QRect mapRect ( const QRect & rectangle ) const
QPolygon mapToPolygon ( const QRect & rectangle ) const
void reset ()
QMatrix & rotate ( qreal degrees )
QMatrix & scale ( qreal sx, qreal sy )
void setMatrix ( qreal m11, qreal m12, qreal m21, qreal m22, qreal dx, qreal dy )
QMatrix & shear ( qreal sh, qreal sv )
QMatrix & translate ( qreal dx, qreal dy )
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
