/*
 * $Id: QTreeWidget.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
Inherit     = QTreeView
New         = pParent
</CLASS>

<CODE>
#include <QtGui/QTreeWidget>


/*
 * QTreeWidget ( QWidget * parent = 0 )
 * ~QTreeWidget ()
 */
HB_FUNC( QT_QTREEWIDGET )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QWIDGET" ) )
   {
      __HB_RETPTRGC__( new QTreeWidget( hbqt_par_QWidget( 1 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QTreeWidget() );
   }      
}
</CODE>

<PROTOS>
void addTopLevelItem ( QTreeWidgetItem * item )                               [*D=1*]
void addTopLevelItems ( const QList<QTreeWidgetItem *> & items )              [*D=1*]
void closePersistentEditor ( QTreeWidgetItem * item, int column = 0 )
int columnCount () const
int currentColumn () const
QTreeWidgetItem * currentItem () const
void editItem ( QTreeWidgetItem * item, int column = 0 )
QList<QTreeWidgetItem *> findItems ( const QString & text, Qt::MatchFlags flags, int column = 0 ) const
QTreeWidgetItem * headerItem () const
int indexOfTopLevelItem ( QTreeWidgetItem * item ) const
void insertTopLevelItem ( int index, QTreeWidgetItem * item )                 [*D=2*]
void insertTopLevelItems ( int index, const QList<QTreeWidgetItem *> & items )
QTreeWidgetItem * invisibleRootItem () const
bool isFirstItemColumnSpanned ( const QTreeWidgetItem * item ) const
QTreeWidgetItem * itemAbove ( const QTreeWidgetItem * item ) const
QTreeWidgetItem * itemAt ( const QPoint & p ) const
QTreeWidgetItem * itemAt ( int x, int y ) const
QTreeWidgetItem * itemBelow ( const QTreeWidgetItem * item ) const
QWidget * itemWidget ( QTreeWidgetItem * item, int column ) const
void openPersistentEditor ( QTreeWidgetItem * item, int column = 0 )
void removeItemWidget ( QTreeWidgetItem * item, int column )
QList<QTreeWidgetItem *> selectedItems () const
void setColumnCount ( int columns )
void setCurrentItem ( QTreeWidgetItem * item )                                [*D=1*]
void setCurrentItem ( QTreeWidgetItem * item, int column )                    [*D=1*]
void setCurrentItem ( QTreeWidgetItem * item, int column, QItemSelectionModel::SelectionFlags command )   [*D=1*]
void setFirstItemColumnSpanned ( const QTreeWidgetItem * item, bool span )
void setHeaderItem ( QTreeWidgetItem * item )                                 [*D=1*]
void setHeaderLabel ( const QString & label )
void setHeaderLabels ( const QStringList & labels )
void setItemWidget ( QTreeWidgetItem * item, int column, QWidget * widget )
int sortColumn () const
void sortItems ( int column, Qt::SortOrder order )
QTreeWidgetItem * takeTopLevelItem ( int index )                              [*A=1*]
QTreeWidgetItem * topLevelItem ( int index ) const
int topLevelItemCount () const
QRect visualItemRect ( const QTreeWidgetItem * item ) const
</PROTOS>

<SLOTS>
void clear ()
void collapseItem ( const QTreeWidgetItem * item )
void expandItem ( const QTreeWidgetItem * item )
void scrollToItem ( const QTreeWidgetItem * item, QAbstractItemView::ScrollHint hint = EnsureVisible )
</SLOTS>

<SIGNALS>
void currentItemChanged ( QTreeWidgetItem * current, QTreeWidgetItem * previous )
void itemActivated ( QTreeWidgetItem * item, int column )
void itemChanged ( QTreeWidgetItem * item, int column )
void itemClicked ( QTreeWidgetItem * item, int column )
void itemCollapsed ( QTreeWidgetItem * item )
void itemDoubleClicked ( QTreeWidgetItem * item, int column )
void itemEntered ( QTreeWidgetItem * item, int column )
void itemExpanded ( QTreeWidgetItem * item )
void itemPressed ( QTreeWidgetItem * item, int column )
void itemSelectionChanged ()
</SIGNALS>
