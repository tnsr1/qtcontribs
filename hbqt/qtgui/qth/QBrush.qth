/*
 * $Id: QBrush.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Inherit     =
Type        = PlainObject
New         =
</CLASS>


<CODE>
#include <QtGui/QBrush>

/*
 * QBrush ()
 * QBrush ( Qt::BrushStyle style )
 * QBrush ( const QColor & color, Qt::BrushStyle style = Qt::SolidPattern )
 * QBrush ( Qt::GlobalColor color, Qt::BrushStyle style = Qt::SolidPattern )
 * QBrush ( const QColor & color, const QPixmap & pixmap )
 * QBrush ( Qt::GlobalColor color, const QPixmap & pixmap )
 * QBrush ( const QPixmap & pixmap )
 * QBrush ( const QImage & image )
 * QBrush ( const QBrush & other )
 * QBrush ( const QGradient & gradient )
 * ~QBrush ()
 */
HB_FUNC( QT_QBRUSH )
{
   if( hb_pcount() == 1 && HB_ISOBJECT( 1 ) )
   {
      if( hbqt_par_isDerivedFrom( 1, "QBRUSH" ) )
      {
         __HB_RETPTRGC__( new QBrush( *hbqt_par_QBrush( 1 ) ) );
      }
      else if( hbqt_par_isDerivedFrom( 1, "QPIXMAP" ) )
      {
         __HB_RETPTRGC__( new QBrush( *hbqt_par_QPixmap( 1 ) ) );
      }
      else if( hbqt_par_isDerivedFrom( 1, "QIMAGE" ) )
      {
         __HB_RETPTRGC__( new QBrush( *hbqt_par_QImage( 1 ) ) );
      }
      else if( hbqt_par_isDerivedFrom( 1, "QGRADIENT" ) )
      {
         __HB_RETPTRGC__( new QBrush( *hbqt_par_QGradient( 1 ) ) );
      }
      else if( hbqt_par_isDerivedFrom( 1, "QCOLOR" ) )
      {
         __HB_RETPTRGC__( new QBrush( *hbqt_par_QColor( 1 ), Qt::SolidPattern ) );
      }
      else
      {
         __HB_RETPTRGC__( new QBrush() );
      }
   }
   else if( hb_pcount() == 1 && HB_ISNUM( 1 ) )
   {
      __HB_RETPTRGC__( new QBrush( ( Qt::GlobalColor ) hb_parni( 1 ), Qt::SolidPattern ) );
   }
   else if( hb_pcount() == 2 && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) )
   {
      __HB_RETPTRGC__( new QBrush( ( Qt::GlobalColor ) hb_parni( 1 ), ( Qt::BrushStyle ) hb_parni( 2 ) ) );
   }
   else if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QCOLOR" ) && HB_ISNUM( 2 ) )
   {
      __HB_RETPTRGC__( new QBrush( *hbqt_par_QColor( 1 ), ( Qt::BrushStyle ) hb_parni( 2 ) ) );
   }
   else if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QCOLOR" ) && hbqt_par_isDerivedFrom( 2, "QPIXMAP" ) )
   {
      __HB_RETPTRGC__( new QBrush( *hbqt_par_QColor( 1 ), *hbqt_par_QPixmap( 2 ) ) );
   }
   else if( hb_pcount() == 2 && HB_ISNUM( 1 ) && hbqt_par_isDerivedFrom( 2, "QPIXMAP" ) )
   {
      __HB_RETPTRGC__( new QBrush( ( Qt::GlobalColor ) hb_parni( 1 ), *hbqt_par_QPixmap( 2 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QBrush() );
   }
}
</CODE>

<PROTOS>
const QColor & color () const
const QGradient * gradient () const
bool isOpaque () const
const QMatrix & matrix () const
void setColor ( const QColor & color )
void setColor ( Qt::GlobalColor color )
void setMatrix ( const QMatrix & matrix )
void setStyle ( Qt::BrushStyle style )
void setTexture ( const QPixmap & pixmap )
void setTextureImage ( const QImage & image )
void setTransform ( const QTransform & matrix )
Qt::BrushStyle style () const
QPixmap texture () const
QImage textureImage () const
QTransform transform () const
</PROTOS>
