/*
 * $Id: QSurfaceFormat.qth 231 2013-06-06 20:18:28Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2013 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     =
Inherit     =
Type        =
New         =
Version     = 0x050000
</CLASS>

<CODE>
#include <QtGui/QSurfaceFormat>


/*
 * QSurfaceFormat()
 * QSurfaceFormat(FormatOptions options)
 * QSurfaceFormat(const QSurfaceFormat & other)
 * ~QSurfaceFormat()
 */
HB_FUNC( QT_QSURFACEFORMAT )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QSURFACEFORMAT" ) )
   {
      __HB_RETPTRGC__( new QSurfaceFormat( *hbqt_par_QSurfaceFormat( 1 ) ) );
   }
   else if( hb_pcount() == 1 && HB_ISNUM( 1 ) )
   {
      __HB_RETPTRGC__( new QSurfaceFormat( ( QSurfaceFormat::FormatOptions ) hb_parni( 1 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QSurfaceFormat() );
   }
}
</CODE>

<ENUMS>
enum   FormatOption { StereoBuffers, DebugContext, DeprecatedFunctions }
flags  FormatOptions
enum   OpenGLContextProfile { NoProfile, CoreProfile, CompatibilityProfile }
enum   RenderableType { DefaultRenderableType, OpenGL, OpenGLES, OpenVG }
enum   SwapBehavior { DefaultSwapBehavior, SingleBuffer, DoubleBuffer, TripleBuffer }
</ENUMS>

<PROTOS>
int    alphaBufferSize() const
int    blueBufferSize() const
int    depthBufferSize() const
int    greenBufferSize() const
bool   hasAlpha() const
int    majorVersion() const
int    minorVersion() const
OpenGLContextProfile   profile() const
int    redBufferSize() const
RenderableType   renderableType() const
int    samples() const
void   setAlphaBufferSize(int size)
void   setBlueBufferSize(int size)
void   setDepthBufferSize(int size)
void   setGreenBufferSize(int size)
void   setMajorVersion(int major)
void   setMinorVersion(int minor)
void   setOption(QSurfaceFormat::FormatOptions opt)
void   setProfile(QSurfaceFormat::OpenGLContextProfile profile)
void   setRedBufferSize(int size)
void   setRenderableType(QSurfaceFormat::RenderableType type)
void   setSamples(int numSamples)
void   setStencilBufferSize(int size)
void   setStereo(bool enable)
void   setSwapBehavior(QSurfaceFormat::SwapBehavior behavior)
void   setVersion(int major, int minor)           [*V=0x051000*]
int    stencilBufferSize() const
bool   stereo() const
SwapBehavior   swapBehavior() const
bool   testOption(QSurfaceFormat::FormatOptions opt) const
//QPair<int, int>   version() const
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>

<VARIABLES>
</VARIABLES>

