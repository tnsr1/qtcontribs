/*
 * $Id: QColor.qth 431 2016-10-29 02:28:13Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Inherit     =
Type        = PlainObject
New         =
</CLASS>


<CODE>
#include <QtGui/QColor>

/*
QColor ()
QColor ( int r, int g, int b, int a = 255 )
QColor ( QRgb color )
QColor ( Qt::GlobalColor color )
QColor ( const QString & name )
QColor ( const char * name )
QColor ( const QColor & color )
~QColor ()
 */
HB_FUNC( QT_QCOLOR )
{
   if( hb_pcount() >= 1 )
   {
      if( hb_pcount() == 1 && HB_ISNUM( 1 ) && hb_parni( 1 ) < 25 )
      {
         __HB_RETPTRGC__( new QColor( ( Qt::GlobalColor ) hb_parni( 1 ) ) );
      }
      else if( hb_pcount() == 1 && HB_ISNUM( 1 ) )
      {
         __HB_RETPTRGC__( new QColor( ( QRgb ) hb_parni( 1 ) ) );
      }
      else if( hb_pcount() == 1 && HB_ISCHAR( 1 ) )
      {
         void * pText01 = NULL;
         __HB_RETPTRGC__( new QColor( hb_parstr_utf8( 1, &pText01, NULL ) ) );
         hb_strfree( pText01 );
      }
      else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QCOLOR" ) )
      {
         __HB_RETPTRGC__( new QColor( *hbqt_par_QColor( 1 ) ) );
      }
      else if( hb_pcount() == 3 && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) && HB_ISNUM( 3 ) )
      {
         __HB_RETPTRGC__( new QColor( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), ( int ) 255 ) );
      }
      else if( hb_pcount() == 4 && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) && HB_ISNUM( 3 ) && HB_ISNUM( 4 ) )
      {
         __HB_RETPTRGC__( new QColor( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ) ) );
      }
      else hb_errRT_BASE( EG_ARG, 9999, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
   }
   else
   {
      __HB_RETPTRGC__( new QColor() );
   }
}
</CODE>

<ENUMS>
enum Spec { Rgb, Hsv, Cmyk, Invalid }
enum NameFormat { HexRgb, HexArgb }
</ENUMS>

<PROTOS>
int alpha () const
qreal alphaF () const
int black () const
qreal blackF () const
int blue () const
qreal blueF () const
QColor convertTo ( Spec colorSpec ) const
int cyan () const
qreal cyanF () const
QColor darker ( int factor = 200 ) const
void getCmyk ( int * c, int * m, int * y, int * k, int * a = 0 )
void getCmykF ( qreal * c, qreal * m, qreal * y, qreal * k, qreal * a = 0 )
void getHsv ( int * h, int * s, int * v, int * a = 0 ) const
void getHsvF ( qreal * h, qreal * s, qreal * v, qreal * a = 0 ) const
void getRgb ( int * r, int * g, int * b, int * a = 0 ) const
void getRgbF ( qreal * r, qreal * g, qreal * b, qreal * a = 0 ) const
int green () const
qreal greenF () const
int hue () const
qreal hueF () const
bool isValid () const
QColor lighter ( int factor = 150 ) const
int magenta () const
qreal magentaF () const
QString name () const
int red () const
qreal redF () const
QRgb rgb () const
QRgb rgba () const
int saturation () const
qreal saturationF () const
void setAlpha ( int alpha )
void setAlphaF ( qreal alpha )
void setBlue ( int blue )
void setBlueF ( qreal blue )
void setCmyk ( int c, int m, int y, int k, int a = 255 )
void setCmykF ( qreal c, qreal m, qreal y, qreal k, qreal a = 1.0 )
void setGreen ( int green )
void setGreenF ( qreal green )
void setHsv ( int h, int s, int v, int a = 255 )
void setHsvF ( qreal h, qreal s, qreal v, qreal a = 1.0 )
void setNamedColor ( const QString & name )
void setRed ( int red )
void setRedF ( qreal red )
void setRgb ( QRgb rgb )
void setRgb ( int r, int g, int b, int a = 255 )
void setRgba ( QRgb rgba )
void setRgbF ( qreal r, qreal g, qreal b, qreal a = 1.0 )
Spec spec () const
QColor toCmyk () const
QColor toHsv () const
QColor toRgb () const
int value () const
qreal valueF () const
int yellow () const
qreal yellowF () const
//bool allowX11ColorNames ()
QStringList colorNames ()
QColor fromCmyk ( int c, int m, int y, int k, int a = 255 )
QColor fromCmykF ( qreal c, qreal m, qreal y, qreal k, qreal a = 1.0 )
QColor fromHsv ( int h, int s, int v, int a = 255 )
QColor fromHsvF ( qreal h, qreal s, qreal v, qreal a = 1.0 )

QColor fromRgb ( QRgb rgb )
QColor fromRgb ( int r, int g, int b, int a = 255 )

QColor fromRgbF ( qreal r, qreal g, qreal b, qreal a = 1.0 )
QColor fromRgba ( QRgb rgba )
//void setAllowX11ColorNames ( bool enabled )


void     getHsl(int *h, int *s, int *l, int *a = 0) const                   [*V=0x040600*]
void     getHslF(qreal *h, qreal *s, qreal *l, qreal *a = 0) const          [*V=0x040600*]
int     hslHue() const                                                      [*V=0x040600*]
qreal     hslHueF() const                                                   [*V=0x040600*]
int     hslSaturation() const                                               [*V=0x040600*]
qreal     hslSaturationF() const                                            [*V=0x040600*]
int     hsvHue() const                                                      [*V=0x040600*]
qreal     hsvHueF() const                                                   [*V=0x040600*]
int     hsvSaturation() const                                               [*V=0x040600*]
qreal     hsvSaturationF() const                                            [*V=0x040600*]
int     lightness() const                                                   [*V=0x040600*]
qreal     lightnessF() const                                                [*V=0x040600*]
QString     name(NameFormat format) const                                   [*V=0x050200*]
//QRgba64     rgba64() const                                                [*V=0x050600*]
void     setHsl(int h, int s, int l, int a = 255)                           [*V=0x040600*]
void     setHslF(qreal h, qreal s, qreal l, qreal a = 1.0)                  [*V=0x040600*]
//void     setRgba64(QRgba64 rgba)                                          [*V=0x040600*]
QColor     toHsl() const                                                    [*V=0x040600*]
QColor     fromHsl(int h, int s, int l, int a = 255)                        [*V=0x040600*]
QColor     fromHslF(qreal h, qreal s, qreal l, qreal a = 1.0)               [*V=0x040600*]
//QColor     fromRgba64(ushort r, ushort g, ushort b, ushort a = USHRT_MAX) [*V=0x050600*]
//QColor     fromRgba64(QRgba64 rgba64)                                     [*V=0x050600*]
bool     isValidColor(const QString &name)                                  [*V=0x040700*]

</PROTOS>
