/*
 * $Id: QImage.qth 451 2017-03-06 06:00:07Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Inherit     = QPaintDevice
Type        = PlainObject
New         =
</CLASS>

<CODE>
#include <QtCore/QStringList>
#include <QtGui/QImage>


/*
 * QImage ()
 * QImage ( const QSize & size, Format format )
 * QImage ( int width, int height, Format format )
 * QImage ( uchar * data, int width, int height, Format format )
 * QImage ( const uchar * data, int width, int height, Format format )
 * QImage ( uchar * data, int width, int height, int bytesPerLine, Format format )
 * QImage ( const uchar * data, int width, int height, int bytesPerLine, Format format )
 * QImage ( const char * const[] xpm )
 * QImage ( const QString & fileName, const char * format = 0 )
 * QImage ( const char * fileName, const char * format = 0 )
 * QImage ( const QImage & image )
 * ~QImage ()
 */
HB_FUNC( QT_QIMAGE )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QIMAGE" ) )
   {
      __HB_RETPTRGC__( new QImage( *hbqt_par_QImage( 1 ) ) );
   }
   else if( hb_pcount() == 1 && HB_ISCHAR( 1 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QImage( hb_parstr_utf8( 1, &pText01, NULL ), ( const char * ) 0 ) );
      hb_strfree( pText01 );
   }
   else if( hb_pcount() == 2 && HB_ISCHAR( 1 ) && HB_ISCHAR( 2 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QImage( hb_parstr_utf8( 1, &pText01, NULL ), ( const char * ) hb_parcx( 2 ) ) );
      hb_strfree( pText01 );
   }
   else if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QSIZE" ) && HB_ISNUM( 2 ) )
   {
      __HB_RETPTRGC__( new QImage( *hbqt_par_QSize( 1 ), ( QImage::Format ) hb_parni( 2 ) ) );
   }
   else if( hb_pcount() == 3 && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) && HB_ISNUM( 3 ) )
   {
      __HB_RETPTRGC__( new QImage( hb_parni( 1 ), hb_parni( 2 ), ( QImage::Format ) hb_parni( 3 ) ) );
   }
   else if( hb_pcount() == 4 && HB_ISCHAR( 1 ) && HB_ISNUM( 2 ) && HB_ISNUM( 3 ) && HB_ISNUM( 4 ) )
   {
      __HB_RETPTRGC__( new QImage( ( const uchar * ) hb_parc( 1 ), hb_parni( 2 ), hb_parni( 3 ), ( QImage::Format ) hb_parni( 4 ) ) );
   }
   else if( hb_pcount() == 5 && HB_ISCHAR( 1 ) && HB_ISNUM( 2 ) && HB_ISNUM( 3 ) && HB_ISNUM( 4 ) && HB_ISNUM( 5 ) )
   {
      __HB_RETPTRGC__( new QImage( ( const uchar * ) hb_parc( 1 ), hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ), ( QImage::Format ) hb_parni( 5 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QImage() );
   }
}
</CODE>

<ENUMS>
enum Format { Format_Invalid, Format_Mono, Format_MonoLSB, Format_Indexed8, ..., Format_ARGB4444_Premultiplied }
enum InvertMode { InvertRgb, InvertRgba }
</ENUMS>

<PROTOS>
bool allGray () const
QImage alphaChannel () const
//uchar * bits ()
const uchar * bits () const
int bytesPerLine () const
qint64 cacheKey () const
QRgb color ( int i ) const
QVector<QRgb> colorTable () const
QImage convertToFormat ( Format format, Qt::ImageConversionFlags flags = Qt::AutoColor ) const
QImage convertToFormat ( Format format, const QVector<QRgb> & colorTable, Qt::ImageConversionFlags flags = Qt::AutoColor ) const
QImage copy ( const QRect & rectangle = QRect() ) const
QImage copy ( int x, int y, int width, int height ) const
QImage createAlphaMask ( Qt::ImageConversionFlags flags = Qt::AutoColor ) const
QImage createHeuristicMask ( bool clipTight = true ) const
QImage createMaskFromColor ( QRgb color, Qt::MaskMode mode = Qt::MaskInColor ) const
int depth () const
int dotsPerMeterX () const
int dotsPerMeterY () const
void fill ( uint pixelValue )
void fill(const QColor &color)                                         [*V=0x40800*]
//void fill(Qt::GlobalColor color)                                       [*V=0x40800*]
Format format () const
bool hasAlphaChannel () const
int height () const
void invertPixels ( InvertMode mode = InvertRgb )
bool isGrayscale () const
bool isNull () const
bool load ( const QString & fileName, const char * format = 0 )
bool load ( QIODevice * device, const char * format )
// bool loadFromData ( const uchar * data, int len, const char * format = 0 )
bool loadFromData ( const QByteArray & data, const char * format = 0 )
QImage mirrored ( bool horizontal = false, bool vertical = true ) const
int numBytes () const                                                          [*V=-0x040900*]
int numColors () const                                                         [*V=-0x040900*]
QPoint offset () const
QRgb pixel ( const QPoint & position ) const
QRgb pixel ( int x, int y ) const
int pixelIndex ( const QPoint & position ) const
int pixelIndex ( int x, int y ) const
QRect rect () const
QImage rgbSwapped () const
bool save ( const QString & fileName, const char * format = 0, int quality = -1 ) const
bool save ( QIODevice * device, const char * format = 0, int quality = -1 ) const
QImage scaled ( const QSize & size, Qt::AspectRatioMode aspectRatioMode = Qt::IgnoreAspectRatio, Qt::TransformationMode transformMode = Qt::FastTransformation ) const
QImage scaled ( int width, int height, Qt::AspectRatioMode aspectRatioMode = Qt::IgnoreAspectRatio, Qt::TransformationMode transformMode = Qt::FastTransformation ) const
QImage scaledToHeight ( int height, Qt::TransformationMode mode = Qt::FastTransformation ) const
QImage scaledToWidth ( int width, Qt::TransformationMode mode = Qt::FastTransformation ) const
//uchar * scanLine ( int i )
const uchar * scanLine ( int i ) const
void setColor ( int index, QRgb colorValue )
void setColorTable ( const QVector<QRgb> colors )
void setDotsPerMeterX ( int x )
void setDotsPerMeterY ( int y )
void setNumColors ( int numColors )                                            [*V=-0x040900*]
void setOffset ( const QPoint & offset )
void setPixel ( const QPoint & position, uint index_or_rgb )
void setPixel ( int x, int y, uint index_or_rgb )
void setText ( const QString & key, const QString & text )
QSize size () const
QString text ( const QString & key = QString() ) const
QStringList textKeys () const

QImage transformed ( const QMatrix & matrix, Qt::TransformationMode mode = Qt::FastTransformation ) const
QImage transformed ( const QTransform & matrix, Qt::TransformationMode mode = Qt::FastTransformation ) const

bool valid ( const QPoint & pos ) const
bool valid ( int x, int y ) const
int width () const

// Static members
QImage fromData ( const uchar * data, int size, const char * format = 0 )
QImage fromData ( const QByteArray & data, const char * format = 0 )
QMatrix trueMatrix ( const QMatrix & matrix, int width, int height )
QTransform trueMatrix ( const QTransform & matrix, int width, int height )
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
