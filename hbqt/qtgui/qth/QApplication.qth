/*
 * $Id: QApplication.qth 424 2016-03-05 11:15:10Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */
<CLASS>
Inherit     = GetEnv("HB_QT_MAJOR_VER")>="5"::QGuiApplication,GetEnv("HB_QT_MAJOR_VER")=="4"::QCoreApplication
New         =
Constructor = no
</CLASS>


<CODE>
#include "hbapi.h"

#include <QtGui/QFont>
#include <QtGui/QFontMetrics>
#include <QtGui/QImage>
#include <QtGui/QPalette>
#include <QtGui/QApplication>
#include <QtCore/QLocale>
#include <QtGui/QIcon>

HB_EXTERN_BEGIN
extern HB_EXPORT QApplication * __hbqtgui_app( void );
HB_EXTERN_END

/*
 * QApplication ( int & argc, char ** argv )
 * QApplication ( int & argc, char ** argv, bool GUIenabled )
 * QApplication ( int & argc, char ** argv, Type type )
 * QApplication ( Display * display, Qt::HANDLE visual = 0, Qt::HANDLE colormap = 0 )
 * QApplication ( Display * display, int & argc, char ** argv, Qt::HANDLE visual = 0, Qt::HANDLE colormap = 0 )
 * virtual ~QApplication ()
*/

HB_FUNC( QT_QAPPLICATION )
{
   hb_itemReturnRelease( hbqt_bindGetHbObject( NULL, ( void * ) __hbqtgui_app(), "HB_QAPPLICATION", NULL, HBQT_BIT_QOBJECT ) );
}
</CODE>

<ENUMS>
enum ColorSpec { NormalColor, CustomColor, ManyColor }
enum Type { Tty, GuiClient, GuiServer }
</ENUMS>

<PROTOS>
virtual void commitData ( QSessionManager & manager )                          [*V=-0x040900*]
#
# Disabled because OS2 does not like it
//QInputContext * inputContext () const
#
bool isSessionRestored () const
#
# not-found
// virtual bool macEventFilter ( EventHandlerCallRef, EventRef )
// virtual bool qwsEventFilter ( QWSEvent * )
// int qwsProcessEvent ( QWSEvent * )
// void qwsSetCustomColors ( QRgb * colortable, int start, int numColors )
#
virtual void saveState ( QSessionManager & manager )                           [*V=-0x040900*]
QString sessionId () const
QString sessionKey () const
#
//void setInputContext ( QInputContext * inputContext )
#
QString styleSheet () const

QWidget * activeModalWidget ()
QWidget * activePopupWidget ()
QWidget * activeWindow ()
void alert ( QWidget * widget, int msec = 0 )
QList<QWidget*> allWidgets ()
void beep ()
void changeOverrideCursor ( const QCursor & cursor )
QClipboard * clipboard ()
int colorSpec ()
int cursorFlashTime ()
QDesktopWidget * desktop ()
bool desktopSettingsAware ()
int doubleClickInterval ()
int exec ()
QWidget * focusWidget ()
QFont font ()
QFont font ( const QWidget * widget )
QFont font ( const char * className )
QFontMetrics fontMetrics ()
QSize globalStrut ()
bool isEffectEnabled ( Qt::UIEffect effect )
bool isLeftToRight ()
bool isRightToLeft ()
Qt::LayoutDirection keyboardInputDirection ()                                  [*V=-0x040900*]
int keyboardInputInterval ()
QLocale keyboardInputLocale ()                                                 [*V=-0x040900*]
Qt::KeyboardModifiers keyboardModifiers ()
//bool keypadNavigationEnabled ()
Qt::LayoutDirection layoutDirection ()
Qt::MouseButtons mouseButtons ()
QCursor * overrideCursor ()
QPalette palette ()
QPalette palette ( const QWidget * widget )
QPalette palette ( const char * className )
bool quitOnLastWindowClosed ()
//QDecoration & qwsDecoration ()
//void qwsSetDecoration ( QDecoration * )
//QDecoration * qwsSetDecoration ( const QString & decoration )
void restoreOverrideCursor ()
void setActiveWindow ( QWidget * active )
void setColorSpec ( int spec )
void setCursorFlashTime ( int )
void setDesktopSettingsAware ( bool on )
void setDoubleClickInterval ( int )
void setEffectEnabled ( Qt::UIEffect effect, bool enable = true )
void setFont ( const QFont & font, const char * className = 0 )
void setGlobalStrut ( const QSize & )
void setGraphicsSystem ( const QString & system )                              [*V=-0x040900*]
void setKeyboardInputInterval ( int )
//void setKeypadNavigationEnabled ( bool enable )
void setLayoutDirection ( Qt::LayoutDirection direction )
void setOverrideCursor ( const QCursor & cursor )
void setPalette ( const QPalette & palette, const char * className = 0 )
void setQuitOnLastWindowClosed ( bool quit )
void setStartDragDistance ( int l )
void setStartDragTime ( int ms )
void setStyle ( QStyle * style )
QStyle * setStyle ( const QString & style )
void setWheelScrollLines ( int )
void setWindowIcon ( const QIcon & icon )
int startDragDistance ()
int startDragTime ()
QStyle * style ()
void syncX ()                                                                  [*V=-0x040900*]
QWidget * topLevelAt ( const QPoint & point )
QWidget * topLevelAt ( int x, int y )
QList<QWidget*> topLevelWidgets ()
Type type ()                                                                   [*V=-0x040900*]
int wheelScrollLines ()
QWidget * widgetAt ( const QPoint & point )
QWidget * widgetAt ( int x, int y )
QIcon windowIcon ()
</PROTOS>

<SLOTS>
void aboutQt ()
//int autoMaximizeThreshold () const
bool autoSipEnabled () const
void closeAllWindows ()
//void setAutoMaximizeThreshold ( const int threshold )
//void setAutoSipEnabled ( const bool enabled )
void setStyleSheet ( const QString & sheet )
</SLOTS>

<SIGNALS>
void commitDataRequest ( QSessionManager & manager )
void focusChanged ( QWidget * old, QWidget * now )
void fontDatabaseChanged ()
void lastWindowClosed ()
void saveStateRequest ( QSessionManager & manager )
</SIGNALS>

/*
   //hbqt_par_QApplication( 1 )->commitData( ( ( QSessionManager ) hbqt_par_QSessionManager( 2 ) ) );
   //C:\harbour\contrib\hbqt\gensource\hbqt_qapplication.cpp:189: error: invalid use of undefined type `struct QSessionManager'

   //hbqt_par_QApplication( 1 )->commitData( ( ( QSessionManager& ) hbqt_par_QSessionManager( 2 ) ) );
   //error: invalid use of undefined type `struct QSessionManager'

   //hbqt_par_QApplication( 1 )->commitData( ( ( QSessionManager* ) hbqt_par_QSessionManager( 2 ) ) );
   //error: no matching function for call to `QApplication::commitData(QSessionManager*)'
   //note: candidates are: virtual void QApplication::commitData(QSessionManager&)

   hbqt_par_QApplication( 1 )->commitData( *hbqt_par_QSessionManager( 2 ) );
*/
