/*
 * $Id: QStandardItemModel.qth 325 2014-07-31 16:03:03Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
Inherit     = QAbstractItemModeL
Type        = Core
New         = 
</CLASS>

<CODE>
#include <QtGui/QStandardItemModel>


/*
 * QStandardItemModel ( QObject * parent = 0 )
 * QStandardItemModel ( int rows, int columns, QObject * parent = 0 )
 * ~QStandardItemModel ()
 */
HB_FUNC( QT_QSTANDARDITEMMODEL )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QOBJECT" ) )
   {
      __HB_RETPTRGC__( new QStandardItemModel( hbqt_par_QObject( 1 ) ) );
   }
   else if( hb_pcount() == 2 && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) )
   {
      __HB_RETPTRGC__( new QStandardItemModel( hb_parni( 1 ), hb_parni( 2 ) ) );
   }
   else if( hb_pcount() == 3 && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) && hbqt_par_isDerivedFrom( 3, "QOBJECT" ) )
   {
      __HB_RETPTRGC__( new QStandardItemModel( hb_parni( 1 ), hb_parni( 2 ), hbqt_par_QObject( 3 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QStandardItemModel() );
   }      
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
void appendColumn ( const QList<QStandardItem *> & items )                    [*X=1*]
void appendRow ( const QList<QStandardItem *> & items )                       [*X=1*]
void appendRow ( QStandardItem * item )                                       [*D=1*]
void clear ()
QList<QStandardItem *> findItems ( const QString & text, Qt::MatchFlags flags = Qt::MatchExactly, int column = 0 ) const
QStandardItem * horizontalHeaderItem ( int column ) const
QModelIndex indexFromItem ( const QStandardItem * item ) const
void insertColumn ( int column, const QList<QStandardItem *> & items )        [*X=2*]
bool insertColumn ( int column, const QModelIndex & parent = QModelIndex() )  [*X=2*]
void insertRow ( int row, const QList<QStandardItem *> & items )              [*X=2*]
bool insertRow ( int row, const QModelIndex & parent = QModelIndex() )        [*X=2*]
void insertRow ( int row, QStandardItem * item )                              [*X=2*]
QStandardItem * invisibleRootItem () const
QStandardItem * item ( int row, int column = 0 ) const
QStandardItem * itemFromIndex ( const QModelIndex & index ) const
// const QStandardItem * itemPrototype () const
void setColumnCount ( int columns )
void setHorizontalHeaderItem ( int column, QStandardItem * item )             [*D=2*]
void setHorizontalHeaderLabels ( const QStringList & labels )                 
void setItem ( int row, int column, QStandardItem * item )                    [*D=3*]
void setItem ( int row, QStandardItem * item )                                [*D=2*]
void setItemPrototype ( const QStandardItem * item )                          [*D=1*]
void setRowCount ( int rows )
void setSortRole ( int role )
void setVerticalHeaderItem ( int row, QStandardItem * item )                  [*D=2*]
void setVerticalHeaderLabels ( const QStringList & labels )   
int sortRole () const
QList<QStandardItem *> takeColumn ( int column )                              [*A=1*]
QStandardItem * takeHorizontalHeaderItem ( int column )                       [*A=1*]
QStandardItem * takeItem ( int row, int column = 0 )                          [*A=1*]
QList<QStandardItem *> takeRow ( int row )                                    [*A=1*]
QStandardItem * takeVerticalHeaderItem ( int row )                            [*A=1*]
QStandardItem * verticalHeaderItem ( int row ) const                          [*A=1*]
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
void itemChanged ( QStandardItem * item )
</SIGNALS>
