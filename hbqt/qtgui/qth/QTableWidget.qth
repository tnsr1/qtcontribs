/*
 * $Id: QTableWidget.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
Inherit     = QTableView
New         = pParent
</CLASS>

<CODE>
#include <QtGui/QTableWidget>


/*
 * QTableWidget ( QWidget * parent = 0 )
 * QTableWidget ( int rows, int columns, QWidget * parent = 0 )
 * ~QTableWidget ()
 */
HB_FUNC( QT_QTABLEWIDGET )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QWIDGET" ) )
   {
      __HB_RETPTRGC__( new QTableWidget( hbqt_par_QWidget( 1 ) ) );
   }
   else if( hb_pcount() == 2 && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) )
   {
      __HB_RETPTRGC__( new QTableWidget( hb_parni( 1 ), hb_parni( 2 ) ) );
   }
   else if( hb_pcount() == 3 && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) && hbqt_par_isDerivedFrom( 3, "QWIDGET" ) )
   {
      __HB_RETPTRGC__( new QTableWidget( hb_parni( 1 ), hb_parni( 2 ), hbqt_par_QWidget( 3 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QTableWidget() );
   }      
}
</CODE>

<PROTOS>
QWidget * cellWidget ( int row, int column ) const
void closePersistentEditor ( QTableWidgetItem * item )
int column ( const QTableWidgetItem * item ) const
int columnCount () const
int currentColumn () const
QTableWidgetItem * currentItem () const
int currentRow () const
void editItem ( QTableWidgetItem * item )
QList<QTableWidgetItem *> findItems ( const QString & text, Qt::MatchFlags flags ) const
QTableWidgetItem * horizontalHeaderItem ( int column ) const
QTableWidgetItem * item ( int row, int column ) const
QTableWidgetItem * itemAt ( const QPoint & point ) const
QTableWidgetItem * itemAt ( int ax, int ay ) const
const QTableWidgetItem * itemPrototype () const
void openPersistentEditor ( QTableWidgetItem * item )
void removeCellWidget ( int row, int column )
int row ( const QTableWidgetItem * item ) const
int rowCount () const
QList<QTableWidgetItem *> selectedItems ()
QList<QTableWidgetSelectionRange> selectedRanges () const
void setCellWidget ( int row, int column, QWidget * widget )           [*D=3*]
void setColumnCount ( int columns )
void setCurrentCell ( int row, int column )
void setCurrentCell ( int row, int column, QItemSelectionModel::SelectionFlags command )
void setCurrentItem ( QTableWidgetItem * item )                        [*D=1*]
void setCurrentItem ( QTableWidgetItem * item, QItemSelectionModel::SelectionFlags command )   [*D=1*]
void setHorizontalHeaderItem ( int column, QTableWidgetItem * item )   [*D=2*]
void setHorizontalHeaderLabels ( const QStringList & labels )
void setItem ( int row, int column, QTableWidgetItem * item )          [*D=3*]
void setItemPrototype ( const QTableWidgetItem * item )
void setRangeSelected ( const QTableWidgetSelectionRange & range, bool select )
void setRowCount ( int rows )
void setVerticalHeaderItem ( int row, QTableWidgetItem * item )        [*D=2*]
void setVerticalHeaderLabels ( const QStringList & labels )
void sortItems ( int column, Qt::SortOrder order = Qt::AscendingOrder )
QTableWidgetItem * takeHorizontalHeaderItem ( int column )             [*A=1*]
QTableWidgetItem * takeItem ( int row, int column )                    [*A=1*]
QTableWidgetItem * takeVerticalHeaderItem ( int row )                  [*A=1*]
QTableWidgetItem * verticalHeaderItem ( int row ) const
int visualColumn ( int logicalColumn ) const
QRect visualItemRect ( const QTableWidgetItem * item ) const
int visualRow ( int logicalRow ) const
</PROTOS>

<SLOTS>
void clear ()
void clearContents ()
void insertColumn ( int column )
void insertRow ( int row )
void removeColumn ( int column )
void removeRow ( int row )
void scrollToItem ( const QTableWidgetItem * item, QAbstractItemView::ScrollHint hint = EnsureVisible )
</SLOTS>

<SIGNALS>
void cellActivated ( int row, int column )
void cellChanged ( int row, int column )
void cellClicked ( int row, int column )
void cellDoubleClicked ( int row, int column )
void cellEntered ( int row, int column )
void cellPressed ( int row, int column )
void currentCellChanged ( int currentRow, int currentColumn, int previousRow, int previousColumn )
void currentItemChanged ( QTableWidgetItem * current, QTableWidgetItem * previous )
void itemActivated ( QTableWidgetItem * item )
void itemChanged ( QTableWidgetItem * item )
void itemClicked ( QTableWidgetItem * item )
void itemDoubleClicked ( QTableWidgetItem * item )
void itemEntered ( QTableWidgetItem * item )
void itemPressed ( QTableWidgetItem * item )
void itemSelectionChanged ()
</SIGNALS>
