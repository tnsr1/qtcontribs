/*
 * $Id: QLineEdit.qth 390 2015-01-13 16:54:02Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
Inherit     = QWidget
New         = pParent
</CLASS>

<CODE>
#include <QtGui/QLineEdit>
#include <QtGui/QValidator>


/*
 * QLineEdit ( QWidget * parent = 0 )
 * QLineEdit ( const QString & contents, QWidget * parent = 0 )
 * ~QLineEdit ()
 */
HB_FUNC( QT_QLINEEDIT )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QWIDGET" ) )
   {
      __HB_RETPTRGC__( new QLineEdit( hbqt_par_QWidget( 1 ) ) );
   }
   else if( hb_pcount() == 1 && HB_ISCHAR( 1 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QLineEdit( hb_parstr_utf8( 1, &pText01, NULL ) ) );
      hb_strfree( pText01 );
   }   
   else if( hb_pcount() == 2 && HB_ISCHAR( 1 ) && hbqt_par_isDerivedFrom( 2, "QWIDGET" ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QLineEdit( hb_parstr_utf8( 1, &pText01, NULL ), hbqt_par_QWidget( 2 ) ) );
      hb_strfree( pText01 );
   }   
   else
   {
      __HB_RETPTRGC__( new QLineEdit() );
   }      
}
</CODE>

<ENUMS>
enum EchoMode { Normal, NoEcho, Password, PasswordEchoOnEdit }
enum ActionPosition { LeadingPosition, TrailingPosition } 
</ENUMS>

<PROTOS>
Qt::Alignment alignment () const
void backspace ()
QCompleter * completer () const
QMenu * createStandardContextMenu ()
void cursorBackward ( bool mark, int steps = 1 )
void cursorForward ( bool mark, int steps = 1 )
int cursorPosition () const
int cursorPositionAt ( const QPoint & pos )
void cursorWordBackward ( bool mark )
void cursorWordForward ( bool mark )
void del ()
void deselect ()
QString displayText () const
bool dragEnabled () const
EchoMode echoMode () const
void end ( bool mark )
void getTextMargins ( int * left, int * top, int * right, int * bottom ) const
bool hasAcceptableInput () const
bool hasFrame () const
bool hasSelectedText () const
void home ( bool mark )
QString inputMask () const
void insert ( const QString & newText )
bool isModified () const
bool isReadOnly () const
bool isRedoAvailable () const
bool isUndoAvailable () const
int maxLength () const
virtual QSize minimumSizeHint () const
QString selectedText () const
int selectionStart () const
void setAlignment ( Qt::Alignment flag )
void setCompleter ( QCompleter * c )
void setCursorPosition ( int )
void setDragEnabled ( bool b )
void setEchoMode ( EchoMode )
void setFrame ( bool )
void setInputMask ( const QString & inputMask )
void setMaxLength ( int )
void setModified ( bool )
void setReadOnly ( bool )
void setSelection ( int start, int length )
void setTextMargins ( int left, int top, int right, int bottom )
void setValidator ( const QValidator * v )                         [*D=1*]
virtual QSize sizeHint () const
QString text () const
virtual const QValidator * validator () const

QString placeholderText() const                                    [*V=0x040700*]
void setPlaceholderText ( const QString & )                        [*V=0x040700*]

bool isClearButtonEnabled() const                                  [*V=0x050200*]
void setClearButtonEnabled(bool enable)                            [*V=0x050200*]

Qt::CursorMoveStyle cursorMoveStyle() const                        [*V=0x040800*]
void setCursorMoveStyle(Qt::CursorMoveStyle style)                 [*V=0x040800*]

void addAction(QAction * action, ActionPosition position)        [*V=0x050200*]
QAction * addAction(const QIcon & icon, ActionPosition position) [*V=0x050200*]

</PROTOS>

<SLOTS>
void clear ()
void copy () const
void cut ()
void paste ()
void redo ()
void selectAll ()
void setText ( const QString & )
void undo ()
</SLOTS>

<SIGNALS>
void cursorPositionChanged ( int old, int new )
void editingFinished ()
void returnPressed ()
void selectionChanged ()
void textChanged ( const QString & text )
void textEdited ( const QString & text )
</SIGNALS>
