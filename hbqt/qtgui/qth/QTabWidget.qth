/*
 * $Id: QTabWidget.qth 424 2016-03-05 11:15:10Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
Inherit     = QWidget
New         = pParent
</CLASS>

<CODE>
#include <QtGui/QTabWidget>


/*
 * QTabWidget ( QWidget * parent = 0 )
 * ~QTabWidget ()
 */
HB_FUNC( QT_QTABWIDGET )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QWIDGET" ) )
   {
      __HB_RETPTRGC__( new QTabWidget( hbqt_par_QWidget( 1 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QTabWidget() );
   }      
}
</CODE>

<ENUMS>
enum TabPosition { North, South, West, East }
enum TabShape { Rounded, Triangular }
</ENUMS>

<PROTOS>
int addTab ( QWidget * page, const QString & label )                       [*X=1*]
int addTab ( QWidget * page, const QIcon & icon, const QString & label )   [*X=1*]
void clear ()
QWidget * cornerWidget ( Qt::Corner corner = Qt::TopRightCorner ) const
int count () const
int currentIndex () const
QWidget * currentWidget () const
bool documentMode () const
Qt::TextElideMode elideMode () const
QSize iconSize () const
int indexOf ( QWidget * w ) const
int insertTab ( int index, QWidget * page, const QString & label )
int insertTab ( int index, QWidget * page, const QIcon & icon, const QString & label )
bool isMovable () const
bool isTabEnabled ( int index ) const
void removeTab ( int index )
void setCornerWidget ( QWidget * widget, Qt::Corner corner = Qt::TopRightCorner ) [*D=1*]
void setDocumentMode ( bool set )
void setElideMode ( Qt::TextElideMode )
void setIconSize ( const QSize & size )
void setMovable ( bool movable )
void setTabEnabled ( int index, bool enable )
void setTabIcon ( int index, const QIcon & icon )
void setTabPosition ( TabPosition )
void setTabShape ( TabShape s )
void setTabText ( int index, const QString & label )
void setTabToolTip ( int index, const QString & tip )
void setTabWhatsThis ( int index, const QString & text )
void setTabsClosable ( bool closeable )
void setUsesScrollButtons ( bool useButtons )
QTabBar * tabBar() const                                             [*V=0x050200*]
QIcon tabIcon ( int index ) const
TabPosition tabPosition () const
TabShape tabShape () const
QString tabText ( int index ) const
QString tabToolTip ( int index ) const
QString tabWhatsThis ( int index ) const
bool tabsClosable () const
bool usesScrollButtons () const
QWidget * widget ( int index ) const
</PROTOS>

<SLOTS>
void setCurrentIndex ( int index )
void setCurrentWidget ( QWidget * widget )
</SLOTS>

<SIGNALS>
void currentChanged ( int index )
void tabCloseRequested ( int index )
</SIGNALS>
