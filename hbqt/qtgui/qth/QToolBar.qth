/*
 * $Id: QToolBar.qth 434 2016-11-09 02:32:49Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
Inherit     = QWidget
New         = pParent
</CLASS>

<CODE>
#include <QtGui/QToolBar>
#include <QtGui/QIcon>
#include <QtGui/QAction>

/* QToolBar ( const QString & title, QWidget * parent = 0 )
 * QToolBar ( QWidget * parent = 0 )
 * ~QToolBar ()
 */
HB_FUNC( QT_QTOOLBAR )
{
   if( hb_pcount() == 2 && HB_ISCHAR( 1 ) && hbqt_par_isDerivedFrom( 2, "QWIDGET" ) ) 
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QToolBar( hb_parstr_utf8( 1, &pText01, NULL ), hbqt_par_QWidget( 2 ) ) );
      hb_strfree( pText01 );
   }  
   else if( hb_pcount() == 1 && HB_ISCHAR( 1 ) ) 
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QToolBar( hb_parstr_utf8( 1, &pText01, NULL ) ) );
      hb_strfree( pText01 );
   }  
   else if( hb_pcount() >= 1 && hbqt_par_isDerivedFrom( 1, "QWIDGET" ) ) 
   {
      __HB_RETPTRGC__( new QToolBar( hbqt_par_QWidget( 1 ) ) );
   }      
   else
   {   
      __HB_RETPTRGC__( new QToolBar() );
   }   
}
</CODE>

<PROTOS>
QAction * actionAt ( const QPoint & p ) const
QAction * actionAt ( int x, int y ) const
void addAction ( QAction * action )                                   
QAction * addAction ( const QString & text )                          [*R=1*]
QAction * addAction ( const QIcon & icon, const QString & text )      [*R=1*]
QAction * addAction ( const QString & text, const QObject * receiver, const char * member )                       [*R=1*]
QAction * addAction ( const QIcon & icon, const QString & text, const QObject * receiver, const char * member )   [*X=3;R=1*]
QAction * addSeparator ()                                             [*R=1*]
QAction * addWidget ( QWidget * widget )                              [*X=1;R=1;D=1*]
Qt::ToolBarAreas allowedAreas () const
void clear ()
QSize iconSize () const
QAction * insertSeparator ( QAction * before )
QAction * insertWidget ( QAction * before, QWidget * widget )
bool isAreaAllowed ( Qt::ToolBarArea area ) const
bool isFloatable () const
bool isFloating () const
bool isMovable () const
Qt::Orientation orientation () const
void setAllowedAreas ( Qt::ToolBarAreas areas )
void setFloatable ( bool floatable )
void setMovable ( bool movable )
void setOrientation ( Qt::Orientation orientation )
QAction * toggleViewAction () const
Qt::ToolButtonStyle toolButtonStyle () const
QWidget * widgetForAction ( QAction * action ) const
</PROTOS>

<SLOTS>
void setIconSize ( const QSize & iconSize )
void setToolButtonStyle ( Qt::ToolButtonStyle toolButtonStyle )
</SLOTS>

<SIGNALS>
void actionTriggered ( QAction * action )
void allowedAreasChanged ( Qt::ToolBarAreas allowedAreas )
void iconSizeChanged ( const QSize & iconSize )
void movableChanged ( bool movable )
void orientationChanged ( Qt::Orientation orientation )
void toolButtonStyleChanged ( Qt::ToolButtonStyle toolButtonStyle )
</SIGNALS>
