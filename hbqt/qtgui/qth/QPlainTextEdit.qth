/*
 * $Id: QPlainTextEdit.qth 473 2019-04-23 07:40:05Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = 
Inherit     = QAbstractScrollArea
Type        = 
New         =
</CLASS>

<DOC>
</DOC>

<CODE>
#include <QtGui/QPlainTextEdit>
#if QT_VERSION >= 0x050000
#include <QtPrintSupport/QPrinter>
#endif

/*
 * QPlainTextEdit ( QWidget * parent = 0 )
 * QPlainTextEdit ( const QString & text, QWidget * parent = 0 )
 * virtual ~QPlainTextEdit ()
 */
HB_FUNC( QT_QPLAINTEXTEDIT )
{
   if( hb_pcount() == 1 && HB_ISCHAR( 1 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QPlainTextEdit( hb_parstr_utf8( 1, &pText01, NULL ), 0 ) );
      hb_strfree( pText01 );
   }
   else if( hb_pcount() == 2 && HB_ISCHAR( 1 ) && hbqt_par_isDerivedFrom( 2, "QWIDGET" ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QPlainTextEdit( hb_parstr_utf8( 1, &pText01, NULL ),  hbqt_par_QWidget( 2 ) ) );
      hb_strfree( pText01 );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QWIDGET" ) )
   {
      __HB_RETPTRGC__( new QPlainTextEdit( hbqt_par_QWidget( 1 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QPlainTextEdit() );
   }
}
</CODE>

<ENUMS>
enum LineWrapMode { NoWrap, WidgetWidth }
</ENUMS>

<PROTOS>
bool backgroundVisible () const
int blockCount () const
bool canPaste () const
bool centerOnScroll () const
QMenu * createStandardContextMenu ()
QMenu * createStandardContextMenu(const QPoint &position)   [*V=0x050500*]
QTextCharFormat currentCharFormat () const
QTextCursor cursorForPosition ( const QPoint & pos ) const
QRect cursorRect ( const QTextCursor & cursor ) const
QRect cursorRect () const
int cursorWidth () const
QTextDocument * document () const
QString documentTitle () const
void ensureCursorVisible ()
QList<QTextEdit::ExtraSelection> extraSelections () const
bool find ( const QString & exp, QTextDocument::FindFlags options = 0 )
bool find ( const QRegExp &exp, QTextDocument::FindFlags options = 0 ) [*V=0x050300*]
bool isReadOnly () const
bool isUndoRedoEnabled () const
LineWrapMode lineWrapMode () const
virtual QVariant loadResource ( int type, const QUrl & name )
int maximumBlockCount () const
void mergeCurrentCharFormat ( const QTextCharFormat & modifier )
void moveCursor ( QTextCursor::MoveOperation operation, QTextCursor::MoveMode mode = QTextCursor::MoveAnchor )
bool overwriteMode () const
QString placeholderText() const                     [*V=0x050300*]
void print ( QPrinter * printer ) const             [*F=#ifndef HB_BUILD_IOS*]
void setBackgroundVisible ( bool visible )
void setCenterOnScroll ( bool enabled )
void setCurrentCharFormat ( const QTextCharFormat & format )
void setCursorWidth ( int width )
void setDocument ( QTextDocument * document )
void setDocumentTitle ( const QString & title )
void setExtraSelections ( const QList<QTextEdit::ExtraSelection> & selections )
void setLineWrapMode ( LineWrapMode mode )
void setMaximumBlockCount ( int maximum )
void setOverwriteMode ( bool overwrite )
void setPlaceholderText ( const QString &placeholderText)   [*V=0x050300*]
void setReadOnly ( bool ro )
void setTabChangesFocus ( bool b )
void setTabStopDistance(qreal distance)                     [*V=0x051000*]
void setTabStopWidth ( int width )
void setTextCursor ( const QTextCursor & cursor )
void setTextInteractionFlags ( Qt::TextInteractionFlags flags )
void setUndoRedoEnabled ( bool enable )
void setWordWrapMode ( QTextOption::WrapMode policy )
bool tabChangesFocus () const
qreal tabStopDistance() const                               [*V=0x051000*]
int tabStopWidth () const
QTextCursor textCursor () const
Qt::TextInteractionFlags textInteractionFlags () const
QString toPlainText () const
QTextOption::WrapMode wordWrapMode () const

QString   anchorAt ( const QPoint & pos ) const             [*V=0x040700*]
</PROTOS>

<SLOTS>
void appendHtml ( const QString & html )
void appendPlainText ( const QString & text )
void centerCursor ()
void clear ()
void copy ()
void cut ()
void insertPlainText ( const QString & text )
void paste ()
void redo ()
void selectAll ()
void setPlainText ( const QString & text )
void undo ()
</SLOTS>

<SIGNALS>
void blockCountChanged ( int newBlockCount )
void copyAvailable ( bool yes )
void cursorPositionChanged ()
void modificationChanged ( bool changed )
void redoAvailable ( bool available )
void selectionChanged ()
void textChanged ()
void undoAvailable ( bool available )
void updateRequest ( const QRect & rect, int dy )
</SIGNALS>
