/*
 * $Id: QImageWriter.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Inherit     = 
Type        = Core
New         = 
</CLASS>

<CODE>
#include <QtGui/QImageWriter>


/*
 * QImageWriter ()
 * QImageWriter ( QIODevice * device, const QByteArray & format )
 * QImageWriter ( const QString & fileName, const QByteArray & format = QByteArray() )
 * ~QImageWriter ()
 */
HB_FUNC( QT_QIMAGEWRITER )
{
   __HB_RETPTRGC__( new QImageWriter() );
}
</CODE>

<ENUMS>
enum ImageWriterError { DeviceError, UnsupportedFormatError, UnknownError }
</ENUMS>

<PROTOS>
bool canWrite () const
int compression () const
QIODevice * device () const
ImageWriterError error () const
QString errorString () const
QString fileName () const
QByteArray format () const
float gamma () const
int quality () const
void setCompression ( int compression )
void setDevice ( QIODevice * device )
void setFileName ( const QString & fileName )
void setFormat ( const QByteArray & format )
void setGamma ( float gamma )
void setQuality ( int quality )
void setText ( const QString & key, const QString & text )
bool supportsOption ( QImageIOHandler::ImageOption option ) const
bool write ( const QImage & image )

QList<QByteArray> supportedImageFormats ()
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
