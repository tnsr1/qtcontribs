/*
 * $Id: QPageLayout.qth 387 2014-12-05 19:47:32Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2014 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Inherit     =
Type        = PlainObject
New         =
Version     = 0x050300
</CLASS>

<CODE>
#include <QtGui/QPageLayout>
#include <QtCore/QRect>
#include <QtCore/QRectF>
#include <QtCore/QMargins>
#include <QtCore/QMarginsF>

/*
 * QPageLayout()
 * QPageLayout(const QPageSize & pageSize, Orientation orientation, const QMarginsF & margins, Unit units = Point, const QMarginsF & minMargins = QMarginsF( 0, 0, 0, 0 ))
 * QPageLayout(const QPageLayout & other)
 * ~QPageLayout()
 */
HB_FUNC( QT_QPAGELAYOUT )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QPageLayout" ) )
   {
      __HB_RETPTRGC__( new QPageLayout( *hbqt_par_QPageLayout( 1 ) ) );
   }
   else if( hb_pcount() == 5 && hbqt_par_isDerivedFrom( 1, "QPageSize" ) && HB_ISNUM( 2 ) && hbqt_par_isDerivedFrom( 3, "QMarginsF" ) && HB_ISNUM( 4 ) && hbqt_par_isDerivedFrom( 5, "QMarginsF" ) )
   {
      __HB_RETPTRGC__( new QPageLayout( *hbqt_par_QPageSize( 1 ), ( QPageLayout::Orientation ) hb_parni( 2 ), *hbqt_par_QMarginsF( 3 ), ( QPageLayout::Unit ) hb_parni( 4 ), *hbqt_par_QMarginsF( 5 ) ) );
   }
   else if( hb_pcount() == 4 && hbqt_par_isDerivedFrom( 1, "QPageSize" ) && HB_ISNUM( 2 ) && hbqt_par_isDerivedFrom( 3, "QMarginsF" ) && HB_ISNUM( 4 ) )
   {
      __HB_RETPTRGC__( new QPageLayout( *hbqt_par_QPageSize( 1 ), ( QPageLayout::Orientation ) hb_parni( 2 ), *hbqt_par_QMarginsF( 3 ), ( QPageLayout::Unit ) hb_parni( 4 ) ) );
   }
   else if( hb_pcount() == 3 && hbqt_par_isDerivedFrom( 1, "QPageSize" ) && HB_ISNUM( 2 ) && hbqt_par_isDerivedFrom( 3, "QMarginsF" ) )
   {
      __HB_RETPTRGC__( new QPageLayout( *hbqt_par_QPageSize( 1 ), ( QPageLayout::Orientation ) hb_parni( 2 ), *hbqt_par_QMarginsF( 3 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QPageLayout() );
   }
}
</CODE>

<ENUMS>
enum   Mode { StandardMode, FullPageMode }
enum   Orientation { Portrait, Landscape }
enum   Unit { Millimeter, Point, Inch, Pica, Didot, Cicero }
</ENUMS>

<PROTOS>
QRectF      fullRect() const
QRectF      fullRect(QPageLayout::Unit units) const
QRect       fullRectPixels(int resolution) const
QRect       fullRectPoints() const
bool        isEquivalentTo(const QPageLayout & other) const
bool        isValid() const
QMarginsF   margins() const
QMarginsF   margins(QPageLayout::Unit units) const
QMargins    marginsPixels(int resolution) const
QMargins    marginsPoints() const
QMarginsF   maximumMargins() const
QMarginsF   minimumMargins() const
QPageLayout::Mode        mode() const
QPageLayout::Orientation orientation() const
QPageSize   pageSize() const
QRectF      paintRect() const
QRectF      paintRect(QPageLayout::Unit units) const
QRect       paintRectPixels(int resolution) const
QRect       paintRectPoints() const
bool        setBottomMargin(qreal bottomMargin)
bool        setLeftMargin(qreal leftMargin)
bool        setMargins(const QMarginsF & margins)
void        setMinimumMargins(const QMarginsF & minMargins)
void        setMode(QPageLayout::Mode mode)
void        setOrientation(QPageLayout::Orientation orientation)
void        setPageSize(const QPageSize & pageSize){
#if QT_VERSION >= 0x050300
   QPageLayout * p = ( QPageLayout * ) hbqt_par_ptr( 0 );
   if( p )
   {
      switch( hb_pcount() )
      {
         case 2:
         {
            if( hbqt_par_isDerivedFrom( 1, "QPAGESIZE" ) && hbqt_par_isDerivedFrom( 2, "QMARGINSF" ) )
            {
               p->setPageSize( *hbqt_par_QPageSize( 1 ), *hbqt_par_QMarginsF( 2 ) );
               return;
            }
            break;
         }
         case 1:
         {
            if( hbqt_par_isDerivedFrom( 1, "QPAGESIZE" ) && hbqt_par_isDerivedFrom( 2, "QMARGINSF" ) )
            {
               p->setPageSize( *hbqt_par_QPageSize( 1 ) );
               return;
            }
            break;
         }
      }
      hb_errRT_BASE( EG_ARG, 9999, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
   }
#endif
}
bool        setRightMargin(qreal rightMargin)
bool        setTopMargin(qreal topMargin)
void        setUnits(QPageLayout::Unit units)
void        swap(QPageLayout & other)
Unit        units() const
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>

<VARIABLES>
</VARIABLES>
