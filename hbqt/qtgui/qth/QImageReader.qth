/*
 * $Id: QImageReader.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Inherit     =
Type        = Core
New         =
</CLASS>

<CODE>
#include <QtGui/QColor>
#include <QtGui/QImageReader>


/*
 * QImageReader ()
 * QImageReader ( QIODevice * device, const QByteArray & format = QByteArray() )
 * QImageReader ( const QString & fileName, const QByteArray & format = QByteArray() )
 * ~QImageReader ()
 */
HB_FUNC( QT_QIMAGEREADER )
{
   __HB_RETPTRGC__( new QImageReader() );
}
</CODE>

<ENUMS>
enum ImageReaderError { FileNotFoundError, DeviceError, UnsupportedFormatError, InvalidDataError, UnknownError }
</ENUMS>

<PROTOS>
bool autoDetectImageFormat () const
QColor backgroundColor () const
bool canRead () const
QRect clipRect () const
int currentImageNumber () const
QRect currentImageRect () const
QIODevice * device () const
ImageReaderError error () const
QString errorString () const
QString fileName () const
QByteArray format () const
int imageCount () const
QImage::Format imageFormat () const
bool jumpToImage ( int imageNumber )
bool jumpToNextImage ()
int loopCount () const
int nextImageDelay () const
int quality () const
QImage read ()
bool read ( QImage * image )
QRect scaledClipRect () const
QSize scaledSize () const
void setAutoDetectImageFormat ( bool enabled )
void setBackgroundColor ( const QColor & color )
void setClipRect ( const QRect & rect )
void setDevice ( QIODevice * device )
void setFileName ( const QString & fileName )
void setFormat ( const QByteArray & format )
void setQuality ( int quality )
void setScaledClipRect ( const QRect & rect )
void setScaledSize ( const QSize & size )
QSize size () const
bool supportsAnimation () const
bool supportsOption ( QImageIOHandler::ImageOption option ) const
QString text ( const QString & key ) const
QStringList textKeys () const

QByteArray imageFormat ( const QString & fileName )
QByteArray imageFormat ( QIODevice * device )
QList<QByteArray> supportedImageFormats ()
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
