/*
 * $Id: QClipboard.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
Inherit     = QObject
Type        = Core
New         =
Destructor  = no
Detached = yes
</CLASS>

<CODE>
#include <QtGui/QPalette>
#include <QtGui/QClipboard>
#include <QtGui/QApplication>
#include <QtCore/QMimeData>

HB_EXTERN_BEGIN
extern HB_EXPORT QApplication * __hbqtgui_app( void );
HB_EXTERN_END

/*
 * QApplication::clipboard()
 *
 */
HB_FUNC( QT_QCLIPBOARD )
{
   hb_itemReturnRelease( hbqt_bindGetHbObject( NULL, ( void* ) __hbqtgui_app()->clipboard(), "HB_QCLIPBOARD", NULL, HBQT_BIT_QOBJECT ) );
}
</CODE>

<ENUMS>
enum Mode { Clipboard, Selection, FindBuffer }
</ENUMS>

<PROTOS>
void clear ( Mode mode = Clipboard )
QImage image ( Mode mode = Clipboard ) const
const QMimeData * mimeData ( Mode mode = Clipboard ) const{
   QClipboard * p = ( QClipboard * ) hbqt_par_ptr( 0 );
   if( p )
   {
      hb_itemReturnRelease( hbqt_bindGetHbObject( NULL, ( void* ) p->mimeData( ( QClipboard::Mode ) hb_parni( 1 ) ), "HB_QMIMEDATA", NULL, HBQT_BIT_NONE ) );
   }
}
bool ownsClipboard () const
bool ownsFindBuffer () const
bool ownsSelection () const
QPixmap pixmap ( Mode mode = Clipboard ) const
void setImage ( const QImage & image, Mode mode = Clipboard )
void setMimeData ( QMimeData * src, Mode mode = Clipboard )
void setPixmap ( const QPixmap & pixmap, Mode mode = Clipboard )
void setText ( const QString & text, Mode mode = Clipboard )
bool supportsFindBuffer () const
bool supportsSelection () const
QString text ( Mode mode = Clipboard ) const
#
//QString text ( const QString & subtype, Mode mode = Clipboard ) const
#
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
void changed ( QClipboard::Mode mode )
void dataChanged ()
void findBufferChanged ()
void selectionChanged ()
</SIGNALS>
