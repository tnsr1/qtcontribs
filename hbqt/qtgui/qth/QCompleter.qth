/*
 * $Id: QCompleter.qth 471 2019-04-04 23:42:20Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
Inherit     = QObject
Type        = Core
New         = 
</CLASS>

<CODE>
#include <QtGui/QCompleter>
#include <QtCore/QStringList>

/* QCompleter ( QObject * parent = 0 )
 * QCompleter ( QAbstractItemModel * model, QObject * parent = 0 )
 * QCompleter ( const QStringList & list, QObject * parent = 0 )
 * ~QCompleter ()
 */
HB_FUNC( QT_QCOMPLETER )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QOBJECT" ) )
   {
      __HB_RETPTRGC__( new QCompleter( hbqt_par_QObject( 1 ) ) );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QABSTRACTITEMMODEL" ) )
   {
      __HB_RETPTRGC__( new QCompleter( hbqt_par_QAbstractItemModel( 1 ) ) );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QSTRINGLIST" ) )
   {
      __HB_RETPTRGC__( new QCompleter( *hbqt_par_QStringList( 1 ) ) );
   }
   else if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QABSTRACTITEMMODEL" ) && hbqt_par_isDerivedFrom( 2, "QOBJECT" ) )
   {
      __HB_RETPTRGC__( new QCompleter( hbqt_par_QAbstractItemModel( 1 ), hbqt_par_QObject( 2 ) ) );
   }
   else if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QSTRINGLIST" ) && hbqt_par_isDerivedFrom( 2, "QOBJECT" ) )
   {
      __HB_RETPTRGC__( new QCompleter( *hbqt_par_QStringList( 1 ), hbqt_par_QObject( 2 ) ) );
   }
   else
   {   
      __HB_RETPTRGC__( new QCompleter() );
   }   
}
</CODE>

<ENUMS>
enum CompletionMode { PopupCompletion, InlineCompletion, UnfilteredPopupCompletion }
enum ModelSorting { UnsortedModel, CaseSensitivelySortedModel, CaseInsensitivelySortedModel }
</ENUMS>

<PROTOS>
Qt::CaseSensitivity caseSensitivity () const
int completionColumn () const
int completionCount () const
CompletionMode completionMode () const
QAbstractItemModel * completionModel () const
QString completionPrefix () const
int completionRole () const
QString currentCompletion () const
QModelIndex currentIndex () const
int currentRow () const
Qt::MatchFlags filterMode() const                      [*V=0x050200*]
int maxVisibleItems() const                            [*V=0x040600*]
QAbstractItemModel * model () const
ModelSorting modelSorting () const
virtual QString pathFromIndex ( const QModelIndex & index ) const
QAbstractItemView * popup () const
void setCaseSensitivity ( Qt::CaseSensitivity caseSensitivity )
void setCompletionColumn ( int column )
void setCompletionMode ( CompletionMode mode )
void setCompletionRole ( int role )
bool setCurrentRow ( int row )
void setFilterMode(Qt::MatchFlags filterMode)          [*V=0x050200*]
void setMaxVisibleItems(int maxItems)                  [*V=0x040600*]
void setModel ( QAbstractItemModel * model )
void setModelSorting ( ModelSorting sorting )
void setPopup ( QAbstractItemView * popup )
void setWidget ( QWidget * widget )
virtual QStringList splitPath ( const QString & path ) const
QWidget * widget () const
bool wrapAround () const
</PROTOS>

<SLOTS>
void complete ( const QRect & rect = QRect() )
void setCompletionPrefix ( const QString & prefix )
void setWrapAround ( bool wrap )
</SLOTS>

<SIGNALS>
void activated ( const QString & text )
void activated ( const QModelIndex & index )
void highlighted ( const QString & text )
void highlighted ( const QModelIndex & index )
</SIGNALS>
