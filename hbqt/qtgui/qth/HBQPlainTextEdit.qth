/*
 * $Id: HBQPlainTextEdit.qth 349 2014-09-05 00:03:18Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     =
Inherit     = QPlainTextEdit
Type        =
New         =
</CLASS>

<DOC>
</DOC>

<CODE>
#include <QtGui/QPlainTextEdit>

#include "hbqt_hbqplaintextedit.h"
#include "hbqt_hbqsyntaxhighlighter.h"


/*
 * HBQPlainTextEdit ( QWidget * parent = 0 )
 * HBQPlainTextEdit ( const QString & text, QWidget * parent = 0 )
 * virtual ~HBQPlainTextEdit ()
 */
HB_FUNC( QT_HBQPLAINTEXTEDIT )
{
   if( hb_pcount() == 1 && HB_ISCHAR( 1 ) )
   {
      __HB_RETPTRGC__( new HBQPlainTextEdit() );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QWIDGET" ) )
   {
      __HB_RETPTRGC__( new HBQPlainTextEdit( hbqt_par_QWidget( 1 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new HBQPlainTextEdit() );
   }
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
   int            hbGetIndex( const QTextCursor & crQTextCursor)
   int            hbGetLine( const QTextCursor & crQTextCursor)
   int            hbLineNumberAreaWidth()
   int            hbGetSpaces()
   void           hbSetSpaces(int newSpaces)
   void           hbBookmarks(int block)
   void           hbNextBookmark(int block)
   void           hbPrevBookmark(int block)
   void           hbGotoBookmark(int block)
   void           hbNumberBlockVisible(bool b)
   bool           hbNumberBlockVisible()
   void           hbHighlightCurrentLine(bool b)
   bool           hbHighlightCurrentLine()
   void           hbSetEventBlock( PHB_ITEM block )
   void           hbSetHighLighter( HBQSyntaxHighlighter * hilighter )
   void           hbHighlightPage()
   QString        hbGetBreakPoints()
   void           hbSetBreakPoint(int block)
   void           hbSetDebuggedLine(int block)
</PROTOS>

<SLOTS>
   void           hbUpdateLineNumberAreaWidth( int newBlockCount )
   void           hbCaseUpper()
   void           hbCaseLower()
   void           hbEscapeQuotes()
   void           hbEscapeDQuotes()
   void           hbUnescapeQuotes()
   void           hbUnescapeDQuotes()
   void           hbConvertQuotes()
   void           hbConvertDQuotes()
   void           hbBlockComment()
   void           hbStreamComment()
   void           hbDuplicateLine()
   void           hbReplaceSelection( const QString & txt )
   void           hbBlockIndent( int steps )
   void           hbDeleteLine()
   void           hbMoveLine( int iDirection )
   QString        hbGetSelectedText()
   QString        hbTextUnderCursor( bool bCodeComplete )
   void           hbShowPrototype( const QString & tip, int rows, int cols )
   void           hbSetCompleter( QCompleter * completer )
   void           hbSetFldsCompleter( QCompleter * completer )
   void           hbSetCurrentLineColor( const QColor & color )
   void           hbSetLineAreaBkColor( const QColor & color )
   void           hbRefresh()
   void           hbSetSelectionMode( int mode, bool on )
   void           hbSetSelectionInfo( PHB_ITEM selectionInfo )
   void           hbSetSelectionColor( const QColor & color )
   void           hbSetMatchBraces( bool all )
   void           hbGetViewportInfo()
   void           hbApplyKey( int key, Qt::KeyboardModifiers modifiers = 0, const QString & txt = "" )
   void           hbHighlightArea( int top, int left, int bottom, int right, int mode )
   void           hbTogglePersistentSelection()
   void           hbHorzRulerVisible( bool visible )
   void           hbSelectAll()
   void           hbSetFieldsListActive( bool active )
   void           hbToggleCodeCompetion()
   void           hbToggleCompetionTips()

</SLOTS>

<SIGNALS>
   void           hbBreakPointSet( int line )
</SIGNALS>
