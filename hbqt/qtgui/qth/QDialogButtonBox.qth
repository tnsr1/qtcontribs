/*
 * $Id: QDialogButtonBox.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = 
Inherit     = QWidget
Type        = 
New         = 
</CLASS>

<CODE>
#include <QtGui/QDialogButtonBox>


/*
 * QDialogButtonBox ( QWidget * parent = 0 )
 * QDialogButtonBox ( Qt::Orientation orientation, QWidget * parent = 0 )
 * QDialogButtonBox ( StandardButtons buttons, Qt::Orientation orientation = Qt::Horizontal, QWidget * parent = 0 )
 * ~QDialogButtonBox ()
 */
HB_FUNC( QT_QDIALOGBUTTONBOX )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QWIDGET" ) )
   {
      __HB_RETPTRGC__( new QDialogButtonBox( hbqt_par_QWidget( 1 ) ) );
   }
   else if( hb_pcount() == 3 && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) && hbqt_par_isDerivedFrom( 3, "QWIDGET" ) )
   {
      __HB_RETPTRGC__( new QDialogButtonBox( ( QDialogButtonBox::StandardButtons ) hb_parni( 1 ), ( Qt::Orientation ) hb_parni( 2 ), hbqt_par_QWidget( 3 ) ) );
   }
   else if( hb_pcount() == 2 && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) )
   {
      __HB_RETPTRGC__( new QDialogButtonBox( ( QDialogButtonBox::StandardButtons ) hb_parni( 1 ), ( Qt::Orientation ) hb_parni( 2 ), 0 ) );
   }
   else if( hb_pcount() == 1 && HB_ISNUM( 1 ) && hbqt_par_isDerivedFrom( 2, "QWIDGET" ) )
   {
      __HB_RETPTRGC__( new QDialogButtonBox( ( Qt::Orientation ) hb_parni( 1 ), hbqt_par_QWidget( 2 ) ) );
   }
   else if( hb_pcount() == 1 && HB_ISNUM( 1 ) )
   {
      __HB_RETPTRGC__( new QDialogButtonBox( ( Qt::Orientation ) hb_parni( 1 ), 0 ) );
   }
   else
   {
      __HB_RETPTRGC__( new QDialogButtonBox() );
   }
}
</CODE>

<ENUMS>
enum ButtonLayout { WinLayout, MacLayout, KdeLayout, GnomeLayout }
enum ButtonRole { InvalidRole, AcceptRole, RejectRole, DestructiveRole, ..., ResetRole }
enum StandardButton { Ok, Open, Save, Cancel, ..., NoButton }
flags StandardButtons
</ENUMS>

<PROTOS>
void addButton ( QAbstractButton * button, ButtonRole role )
QPushButton * addButton ( const QString & text, ButtonRole role )
QPushButton * addButton ( StandardButton button )
QPushButton * button ( StandardButton which ) const
ButtonRole buttonRole ( QAbstractButton * button ) const
QList<QAbstractButton *> buttons () const
bool centerButtons () const
void clear ()
Qt::Orientation orientation () const
void removeButton ( QAbstractButton * button )
void setCenterButtons ( bool center )
void setOrientation ( Qt::Orientation orientation )
void setStandardButtons ( StandardButtons buttons )
StandardButton standardButton ( QAbstractButton * button ) const
StandardButtons standardButtons () const
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
void accepted ()
void clicked ( QAbstractButton * button )
void helpRequested ()
void rejected ()
</SIGNALS>

<VARIABLES>
</VARIABLES>



