/*
 * $Id: QDirModel.qth 435 2016-11-16 16:36:11Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2016 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
Inherit     = QAbstractItemModel
Type        = Core
New         =
VersionUpto = 0x040900
</CLASS>

<CODE>
#include <QtGui/QDirModel>

/*
 * QDirModel ( const QStringList & nameFilters, QDir::Filters filters, QDir::SortFlags sort, QObject * parent = 0 )
 * QDirModel ( QObject * parent = 0 )
 * ~QDirModel ()
 */
HB_FUNC( QT_QDIRMODEL )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QOBJECT" ) )
   {
      __HB_RETPTRGC__( new QDirModel( hbqt_par_QObject( 1 ) ) );
   }
   else if( hb_pcount() == 4 && hbqt_par_isDerivedFrom( 1, "QSTRINGLIST" ) && HB_ISNUM( 2 ) && HB_ISNUM( 3 ) && hbqt_par_isDerivedFrom( 4, "QOBJECT" ) )
   {
      __HB_RETPTRGC__( new QDirModel( *hbqt_par_QStringList( 1 ), ( QDir::Filters ) hb_parni( 2 ), ( QDir::SortFlags ) hb_parni( 3 ), hbqt_par_QObject( 4 ) ) );
   }
   else if( hb_pcount() == 3 && hbqt_par_isDerivedFrom( 1, "QSTRINGLIST" ) && HB_ISNUM( 2 ) && HB_ISNUM( 3 ) )
   {
      __HB_RETPTRGC__( new QDirModel( *hbqt_par_QStringList( 1 ), ( QDir::Filters ) hb_parni( 2 ), ( QDir::SortFlags ) hb_parni( 3 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QDirModel() );
   }
}
</CODE>

<ENUMS>
enum Roles { FileIconRole, FilePathRole, FileNameRole }
</ENUMS>

<PROTOS>
virtual int columnCount ( const QModelIndex & parent = QModelIndex() ) const
virtual QVariant data ( const QModelIndex & index, int role = Qt::DisplayRole ) const
virtual bool dropMimeData ( const QMimeData * data, Qt::DropAction action, int row, int column, const QModelIndex & parent )
QIcon fileIcon ( const QModelIndex & index ) const
QFileInfo fileInfo ( const QModelIndex & index ) const
QString fileName ( const QModelIndex & index ) const
QString filePath ( const QModelIndex & index ) const
QDir::Filters filter () const
virtual Qt::ItemFlags flags ( const QModelIndex & index ) const
virtual bool hasChildren ( const QModelIndex & parent = QModelIndex() ) const
virtual QVariant headerData ( int section, Qt::Orientation orientation, int role = Qt::DisplayRole ) const
QFileIconProvider * iconProvider () const
virtual QModelIndex index ( int row, int column, const QModelIndex & parent = QModelIndex() ) const
QModelIndex index ( const QString & path, int column = 0 ) const
bool isDir ( const QModelIndex & index ) const
bool isReadOnly () const
bool lazyChildCount () const
virtual QMimeData * mimeData ( const QModelIndexList & indexes ) const{
   QDirModel * p = ( QDirModel * ) hbqt_par_ptr( 0 );
   if( p )
   {
      hb_itemReturnRelease( hbqt_bindGetHbObject( NULL, ( void* ) p->mimeData( *hbqt_par_QModelIndexList( 1 ) ), "HB_QMIMEDATA", NULL, HBQT_BIT_NONE ) );
   }
}
virtual QStringList mimeTypes () const
QModelIndex mkdir ( const QModelIndex & parent, const QString & name )
QStringList nameFilters () const
virtual QModelIndex parent ( const QModelIndex & child ) const
bool remove ( const QModelIndex & index )
bool resolveSymlinks () const
bool rmdir ( const QModelIndex & index )
virtual int rowCount ( const QModelIndex & parent = QModelIndex() ) const
virtual bool setData ( const QModelIndex & index, const QVariant & value, int role = Qt::EditRole )
void setFilter ( QDir::Filters filters )
void setIconProvider ( QFileIconProvider * provider )
void setLazyChildCount ( bool enable )
void setNameFilters ( const QStringList & filters )
void setReadOnly ( bool enable )
void setResolveSymlinks ( bool enable )
void setSorting ( QDir::SortFlags sort )
virtual void sort ( int column, Qt::SortOrder order = Qt::AscendingOrder )
QDir::SortFlags sorting () const
virtual Qt::DropActions supportedDropActions () const
</PROTOS>

<SLOTS>
void refresh ( const QModelIndex & parent = QModelIndex() )
</SLOTS>

<SIGNALS>
</SIGNALS>

<VARIABLES>
</VARIABLES>
