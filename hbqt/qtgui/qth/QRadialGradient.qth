/*
 * $Id: QRadialGradient.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Inherit     = QGradient
Type        = PlainObject
New         = 
</CLASS>


<CODE>
#include <QtGui/QRadialGradient>


/*
 * QRadialGradient ()
 * QRadialGradient ( const QPointF & center, qreal radius, const QPointF & focalPoint )
 * QRadialGradient ( qreal cx, qreal cy, qreal radius, qreal fx, qreal fy )
 * QRadialGradient ( const QPointF & center, qreal radius )
 * QRadialGradient ( qreal cx, qreal cy, qreal radius )
 */
HB_FUNC( QT_QRADIALGRADIENT )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QRADIALGRADIENT" ) )
   {
      __HB_RETPTRGC__( new QRadialGradient( *hbqt_par_QRadialGradient( 1 ) ) );  
   }
   else if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QPOINTF" ) && HB_ISNUM( 2 ) )
   {
      __HB_RETPTRGC__( new QRadialGradient( *hbqt_par_QPointF( 1 ), hb_parnd( 2 ) ) );  
   }
   else if( hb_pcount() == 3 && hbqt_par_isDerivedFrom( 1, "QPOINTF" ) && HB_ISNUM( 2 ) && hbqt_par_isDerivedFrom( 3, "QPOINTF" ) )
   {
      __HB_RETPTRGC__( new QRadialGradient( *hbqt_par_QPointF( 1 ), hb_parnd( 2 ), *hbqt_par_QPointF( 3 ) ) );  
   }
   else if( hb_pcount() == 5 && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) && HB_ISNUM( 3 ) && HB_ISNUM( 4 ) && HB_ISNUM( 5 ) )
   {
      __HB_RETPTRGC__( new QRadialGradient( hb_parnd( 1 ), hb_parnd( 2 ), hb_parnd( 3 ), hb_parnd( 4 ), hb_parnd( 5 ) ) );  
   }
   else
   {
      __HB_RETPTRGC__( new QRadialGradient() );
   }
}
</CODE>

<ENUMS>
enum CoordinateMode { LogicalMode, StretchToDeviceMode, ObjectBoundingMode }
enum Spread { PadSpread, RepeatSpread, ReflectSpread }
enum Type { LinearGradient, RadialGradient, ConicalGradient, NoGradient }
</ENUMS>

<PROTOS>
QPointF center () const
QPointF focalPoint () const
qreal radius () const
void setCenter ( const QPointF & center )
void setCenter ( qreal x, qreal y )
void setFocalPoint ( const QPointF & focalPoint )
void setFocalPoint ( qreal x, qreal y )
void setRadius ( qreal radius )
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
