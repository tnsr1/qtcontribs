/*
 * $Id: QTableWidgetItem.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
New         = iType
</CLASS>

<CODE>
#include <QtGui/QTableWidgetItem>


/*
 * QTableWidgetItem ( int type = Type )
 * QTableWidgetItem ( const QString & text, int type = Type )
 * QTableWidgetItem ( const QIcon & icon, const QString & text, int type = Type )
 * QTableWidgetItem ( const QTableWidgetItem & other )
 * virtual ~QTableWidgetItem ()
 */
HB_FUNC( QT_QTABLEWIDGETITEM )
{
   if( hb_pcount() == 2 && HB_ISCHAR( 1 ) && HB_ISNUM( 2 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QTableWidgetItem( hb_parstr_utf8( 1, &pText01, NULL ), hb_parni( 2 ) ) );
      hb_strfree( pText01 );
   }
   else if( hb_pcount() == 1 && HB_ISCHAR( 1 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QTableWidgetItem( hb_parstr_utf8( 1, &pText01, NULL ) ) );
      hb_strfree( pText01 );
   }
   else if( hb_pcount() == 1 && HB_ISNUM( 1 ) )
   {
      __HB_RETPTRGC__( new QTableWidgetItem( hb_parni( 1 ) ) );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QTABLEWIDGETITEM" ) )
   {
      __HB_RETPTRGC__( new QTableWidgetItem( *hbqt_par_QTableWidgetItem( 1 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QTableWidgetItem() );
   }
}
</CODE>

<ENUMS>
enum ItemType { Type, UserType }
</ENUMS>

<PROTOS>
QBrush background () const
Qt::CheckState checkState () const
virtual QTableWidgetItem * clone () const
int column () const
virtual QVariant data ( int role ) const
Qt::ItemFlags flags () const
QFont font () const
QBrush foreground () const
QIcon icon () const
bool isSelected () const
virtual void read ( QDataStream & in )
int row () const
void setBackground ( const QBrush & brush )
void setCheckState ( Qt::CheckState state )
virtual void setData ( int role, const QVariant & value )
void setFlags ( Qt::ItemFlags flags )
void setFont ( const QFont & font )
void setForeground ( const QBrush & brush )
void setIcon ( const QIcon & icon )
void setSelected ( bool select )
void setSizeHint ( const QSize & size )
void setStatusTip ( const QString & statusTip )
void setText ( const QString & text )
void setTextAlignment ( int alignment )
void setToolTip ( const QString & toolTip )
void setWhatsThis ( const QString & whatsThis )
QSize sizeHint () const
QString statusTip () const
QTableWidget * tableWidget () const
QString text () const
int textAlignment () const
QString toolTip () const
int type () const
QString whatsThis () const
virtual void write ( QDataStream & out ) const
</PROTOS>
