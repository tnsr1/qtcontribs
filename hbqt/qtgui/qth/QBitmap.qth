/*
 * $Id: QBitmap.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Inherit     = QPixmap
Type        = PlainObject
New         = 
</CLASS>

<CODE>
#include <QtGui/QBitmap>


/*
 * QBitmap ()
 * QBitmap ( const QPixmap & pixmap )
 * QBitmap ( int width, int height )
 * QBitmap ( const QSize & size )
 * QBitmap ( const QString & fileName, const char * format = 0 )
 * ~QBitmap ()
 */
HB_FUNC( QT_QBITMAP )
{
   if( hb_pcount() == 1 && HB_ISOBJECT( 1 ) )
   {
      if( hbqt_par_isDerivedFrom( 1, "QBITMAP" ) )
         __HB_RETPTRGC__( new QBitmap( *hbqt_par_QBitmap( 1 ) ) );
      else if( hbqt_par_isDerivedFrom( 1, "QPIXMAP" ) )
         __HB_RETPTRGC__( new QBitmap( *hbqt_par_QPixmap( 1 ) ) );
      else if( hbqt_par_isDerivedFrom( 1, "QSIZE" ) )
         __HB_RETPTRGC__( new QBitmap( *hbqt_par_QSize( 1 ) ) );
      else
         __HB_RETPTRGC__( new QBitmap() );   
   }
   else if( hb_pcount() == 1 && HB_ISCHAR( 1 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QBitmap( hb_parstr_utf8( 1, &pText01, NULL ), ( const char * ) 0 ) );
      hb_strfree( pText01 );
   }
   else if( hb_pcount() == 2 && HB_ISCHAR( 1 ) && HB_ISCHAR( 2 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QBitmap( hb_parstr_utf8( 1, &pText01, NULL ), hb_parc( 2 ) ) );
      hb_strfree( pText01 );
   }
   else if( hb_pcount() == 2 && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) )
   {
      __HB_RETPTRGC__( new QBitmap( hb_parni( 1 ), hb_parni( 2 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QBitmap() );
   }
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
void clear ()
QBitmap transformed ( const QTransform & matrix ) const
QBitmap transformed ( const QMatrix & matrix ) const

//QBitmap fromData ( const QSize & size, const uchar * bits, QImage::Format monoFormat = QImage::Format_MonoLSB )
QBitmap fromImage ( const QImage & image, Qt::ImageConversionFlags flags = Qt::AutoColor )
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
