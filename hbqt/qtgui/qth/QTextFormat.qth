/*
 * $Id: QTextFormat.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Inherit     = 
Type        = Core
New         = pParent
</CLASS>

<CODE>
#include <QtGui/QTextFormat>


/*
 * QTextFormat ()
 * QTextFormat ( int type )
 * QTextFormat ( const QTextFormat & other )
 * ~QTextFormat ()
 */
HB_FUNC( QT_QTEXTFORMAT )
{
   if( hb_pcount() == 1 && HB_ISNUM( 1 ) )
   {
      __HB_RETPTRGC__( new QTextFormat( hb_parni( 1 ) ) );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QTEXTFORMAT" ) )
   {
      __HB_RETPTRGC__( new QTextFormat( *hbqt_par_QTextFormat( 1 ) ) );
   }
   else   
   {   
      __HB_RETPTRGC__( new QTextFormat() );
   }   
}
</CODE>

<ENUMS>
enum FormatType { InvalidFormat, BlockFormat, CharFormat, ListFormat, ..., UserFormat }
enum ObjectTypes { NoObject, ImageObject, TableObject, TableCellObject, UserObject }
enum PageBreakFlag { PageBreak_Auto, PageBreak_AlwaysBefore, PageBreak_AlwaysAfter }
flags PageBreakFlags
enum Property { ObjectIndex, CssFloat, LayoutDirection, OutlinePen, ..., UserProperty }
</ENUMS>

<PROTOS>
QBrush background () const
bool boolProperty ( int propertyId ) const
QBrush brushProperty ( int propertyId ) const
void clearBackground ()
void clearForeground ()
void clearProperty ( int propertyId )
QColor colorProperty ( int propertyId ) const
qreal doubleProperty ( int propertyId ) const
QBrush foreground () const
bool hasProperty ( int propertyId ) const
int intProperty ( int propertyId ) const
bool isBlockFormat () const
bool isCharFormat () const
bool isFrameFormat () const
bool isImageFormat () const
bool isListFormat () const
bool isTableCellFormat () const
bool isTableFormat () const
bool isValid () const
Qt::LayoutDirection layoutDirection () const
QTextLength lengthProperty ( int propertyId ) const
QVector<QTextLength> lengthVectorProperty ( int propertyId ) const
void merge ( const QTextFormat & other )
int objectIndex () const
int objectType () const
QPen penProperty ( int propertyId ) const
QMap<int, QVariant> properties () const
QVariant property ( int propertyId ) const
int propertyCount () const
void setBackground ( const QBrush & brush )
void setForeground ( const QBrush & brush )
void setLayoutDirection ( Qt::LayoutDirection direction )
void setObjectIndex ( int index )
void setObjectType ( int type )
void setProperty ( int propertyId, const QVariant & value )
void setProperty ( int propertyId, const QVector<QTextLength> & value )
QString stringProperty ( int propertyId ) const
QTextBlockFormat toBlockFormat () const
QTextCharFormat toCharFormat () const
QTextFrameFormat toFrameFormat () const
QTextImageFormat toImageFormat () const
QTextListFormat toListFormat () const
// QTextTableCellFormat toTableCellFormat () const
QTextTableFormat toTableFormat () const
int type () const
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
