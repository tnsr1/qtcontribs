/*
 * $Id: QSpacerItem.qth 330 2014-08-09 01:13:05Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Inherit     = QLayoutItem
Type        = Core
New         =
Destructor  = 
</CLASS>

<CODE>
#include <QtGui/QSpacerItem>


/* QSpacerItem ( int w, int h, QSizePolicy::Policy hPolicy = QSizePolicy::Minimum, QSizePolicy::Policy vPolicy = QSizePolicy::Minimum )
 * ~QSpacerItem ()
 */
HB_FUNC( QT_QSPACERITEM )
{
   if( hb_pcount() >= 2 && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) )
   {
      __HB_RETPTRGC__( new QSpacerItem( hb_parni( 1 ), hb_parni( 2 ), HB_ISNUM( 3 ) ? ( QSizePolicy::Policy ) hb_parni( 3 ) : QSizePolicy::Minimum, HB_ISNUM( 4 ) ? ( QSizePolicy::Policy ) hb_parni( 4 ) : QSizePolicy::Minimum ) );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QSPACERITEM" ) )
   {
      __HB_RETPTRGC__( new QSpacerItem( *hbqt_par_QSpacerItem( 1 ) ) );
   }
   else 
   {   
      hb_errRT_BASE( EG_ARG, 9999, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
   }   
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
void changeSize ( int w, int h, QSizePolicy::Policy hPolicy = QSizePolicy::Minimum, QSizePolicy::Policy vPolicy = QSizePolicy::Minimum )
virtual bool isEmpty () const
virtual QSpacerItem * spacerItem ()

virtual Qt::Orientations expandingDirections() const
virtual QRect geometry() const
virtual bool isEmpty() const
virtual QSize maximumSize() const
virtual QSize minimumSize() const
virtual void setGeometry(const QRect & r)
virtual QSize sizeHint() const
virtual QSpacerItem * spacerItem()
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
