/*
 * $Id: QKeySequence.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Inherit     = 
Type        = Core
New         = 
</CLASS>

<CODE>
#include <QtGui/QKeySequence>


/*
 * QKeySequence ()
 * QKeySequence ( const QString & key )
 * QKeySequence ( int k1, int k2 = 0, int k3 = 0, int k4 = 0 )
 * QKeySequence ( const QKeySequence & keysequence )
 * QKeySequence ( StandardKey key )
 * ~QKeySequence ()
 */
HB_FUNC( QT_QKEYSEQUENCE )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QKEYSEQUENCE" ) )
   {
      __HB_RETPTRGC__( new QKeySequence( *hbqt_par_QKeySequence( 1 ) ) );
   }   
   else if( hb_pcount() == 1 && HB_ISCHAR( 1 ) )
   {   
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QKeySequence( hb_parstr_utf8( 1, &pText01, NULL ) ) );
      hb_strfree( pText01 );
   }   
   else if( hb_pcount() > 1 && HB_ISNUM( 1 ) )
   {   
      __HB_RETPTRGC__( new QKeySequence( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ) ) );
   }   
   else if( hb_pcount() == 1 && HB_ISNUM( 1 ) )
   {   
      __HB_RETPTRGC__( new QKeySequence( ( QKeySequence::StandardKey ) hb_parni( 1 ) ) );
   }   
   else
   {   
      __HB_RETPTRGC__( new QKeySequence() );
   }   
}
</CODE>

<ENUMS>
enum SequenceFormat { NativeText, PortableText }
enum SequenceMatch { NoMatch, PartialMatch, ExactMatch }
enum StandardKey { AddTab, Back, Bold, Close, ..., ZoomOut }
</ENUMS>

<PROTOS>
uint count () const
bool isEmpty () const
SequenceMatch matches ( const QKeySequence & seq ) const
QString toString ( SequenceFormat format = PortableText ) const

QKeySequence fromString ( const QString & str, SequenceFormat format = PortableText )
QList<QKeySequence> keyBindings ( StandardKey key )
QKeySequence mnemonic ( const QString & text )
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>

<VARIABLES>
</VARIABLES>
