/*
 * $Id: QCursor.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Inherit     =
Type        = PlainObject
New         =
</CLASS>

<CODE>
#include <QtGui/QPixmap>
#include <QtGui/QCursor>
#include <QtGui/QBitmap>

/*
 * QCursor ()
 * QCursor ( Qt::CursorShape shape )
 * QCursor ( const QBitmap & bitmap, const QBitmap & mask, int hotX = -1, int hotY = -1 )
 * QCursor ( const QPixmap & pixmap, int hotX = -1, int hotY = -1 )
 * QCursor ( const QCursor & c )
 * QCursor ( HCURSOR cursor )
 * QCursor ( Qt::HANDLE handle )
 * ~QCursor ()
 */
HB_FUNC( QT_QCURSOR )
{
   if( hb_pcount() == 1 && HB_ISNUM( 1 ) )
   {
      __HB_RETPTRGC__( new QCursor( ( Qt::CursorShape ) hb_parni( 1 ) ) );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QCURSOR" ) )
   {
      __HB_RETPTRGC__( new QCursor( *hbqt_par_QCursor( 1 ) ) );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QPIXMAP" ) )
   {
      __HB_RETPTRGC__( new QCursor( *hbqt_par_QPixmap( 1 ), -1, -1 ) );
   }
   else if( hb_pcount() >= 2 && hbqt_par_isDerivedFrom( 1, "QPIXMAP" ) && HB_ISNUM( 2 ) )
   {
      __HB_RETPTRGC__( new QCursor( *hbqt_par_QPixmap( 1 ), hb_parni( 2 ), HB_ISNUM( 3 ) ? hb_parni( 3 ) : -1 ) );
   }
   else if( hb_pcount() >= 2 && hbqt_par_isDerivedFrom( 1, "QBITMAP" ) && hbqt_par_isDerivedFrom( 2, "QBITMAP" ) )
   {
      __HB_RETPTRGC__( new QCursor( *hbqt_par_QBitmap( 1 ), *hbqt_par_QBitmap( 2 ), HB_ISNUM( 3 ) ? hb_parni( 3 ) : -1, HB_ISNUM( 4 ) ? hb_parni( 4 ) : -1 ) );
   }
   else
   {
      __HB_RETPTRGC__( new QCursor() );
   }
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
const QBitmap * bitmap () const
// HCURSOR_or_HANDLE handle () const
QPoint hotSpot () const
const QBitmap * mask () const
QPixmap pixmap () const
void setShape ( Qt::CursorShape shape )
Qt::CursorShape shape () const

QPoint pos ()
void setPos ( int x, int y )
void setPos ( const QPoint & p )
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>

<VARIABLES>
</VARIABLES>
