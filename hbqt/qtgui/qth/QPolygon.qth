/*
 * $Id: QPolygon.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Inherit     = 
Type        = Core
New         =
Destructor  = 
</CLASS>

<CODE>
#include <QtGui/QPolygon>


/* QPolygon ()
 * QPolygon ( int size )
 * QPolygon ( const QPolygon & polygon )
 * QPolygon ( const QVector<QPoint> & points )
 * QPolygon ( const QRect & rectangle, bool closed = false )
 * ~QPolygon ()
 */
HB_FUNC( QT_QPOLYGON )
{
   __HB_RETPTRGC__( new QPolygon() );
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
QRect boundingRect () const
bool containsPoint ( const QPoint & point, Qt::FillRule fillRule ) const
QPolygon intersected ( const QPolygon & r ) const
void point ( int index, int * x, int * y ) const
QPoint point ( int index ) const
// void putPoints ( int index, int nPoints, int firstx, int firsty, ... )
void putPoints ( int index, int nPoints, const QPolygon & fromPolygon, int fromIndex = 0 )
void setPoint ( int index, int x, int y )
void setPoint ( int index, const QPoint & point )
void setPoints ( int nPoints, const int * points )
// void setPoints ( int nPoints, int firstx, int firsty, ... )
QPolygon subtracted ( const QPolygon & r ) const
void translate ( int dx, int dy )
void translate ( const QPoint & offset )
QPolygon united ( const QPolygon & r ) const
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
