/*
 * $Id: QFont.qth 160 2013-02-04 23:59:32Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */
<CLASS>
QObject     = no
New         =
Type        = PlainObject
</CLASS>


<CODE>
#include <QtCore/QStringList>
#include <QtGui/QFont>

/*
 * QFont ()
 * QFont ( const QString & family, int pointSize = -1, int weight = -1, bool italic = false )
 * QFont ( const QFont & font, QPaintDevice * pd )
 * QFont ( const QFont & font )
 * ~QFont ()
 */
HB_FUNC( QT_QFONT )
{
   if(      hb_pcount() == 1 && HB_ISCHAR( 1 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QFont( hb_parstr_utf8( 1, &pText01, NULL ), -1, -1, false ) );
      hb_strfree( pText01 );
   }
   else if( hb_pcount() == 2 && HB_ISCHAR( 1 ) && HB_ISNUM( 2 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QFont( hb_parstr_utf8( 1, &pText01, NULL ), hb_parni( 2 ), -1, false ) );
      hb_strfree( pText01 );
   }
   else if( hb_pcount() == 3 && HB_ISCHAR( 1 ) && HB_ISNUM( 2 )  && HB_ISNUM( 3 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QFont( hb_parstr_utf8( 1, &pText01, NULL ), hb_parni( 2 ), hb_parni( 3 ), false ) );
      hb_strfree( pText01 );
   }
   else if( hb_pcount() == 4 && HB_ISCHAR( 1 ) && HB_ISNUM( 2 )  && HB_ISNUM( 3 ) && HB_ISLOG( 4 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QFont( hb_parstr_utf8( 1, &pText01, NULL ), hb_parni( 2 ), hb_parni( 3 ), hb_parl( 4 ) ) );
      hb_strfree( pText01 );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QFONT" ) )
   {
      __HB_RETPTRGC__( new QFont( *hbqt_par_QFont( 1 ) ) );
   }
   else if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QFONT" ) && hbqt_par_isDerivedFrom( 2, "QPAINTDEVICE" ) )
   {
      __HB_RETPTRGC__( new QFont( *hbqt_par_QFont( 1 ), hbqt_par_QPaintDevice( 2 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QFont() );
   }
}
</CODE>

<ENUMS>
enum Capitalization { MixedCase, AllUppercase, AllLowercase, SmallCaps, Capitalize }
enum SpacingType { PercentageSpacing, AbsoluteSpacing }
enum Stretch { UltraCondensed, ExtraCondensed, Condensed, SemiCondensed, ..., UltraExpanded }
enum Style { StyleNormal, StyleItalic, StyleOblique }
enum StyleHint { AnyStyle, SansSerif, Helvetica, Serif, ..., System }
enum StyleStrategy { PreferDefault, PreferBitmap, PreferDevice, PreferOutline, ..., PreferQuality }
enum Weight { Light, Normal, DemiBold, Bold, Black }
</ENUMS>

<PROTOS>
bool bold () const
Capitalization capitalization () const
QString defaultFamily () const
bool exactMatch () const
QString family () const
bool fixedPitch () const
#
# member not found
#
// FT_Face freetypeFace () const
#
bool fromString ( const QString & descrip )
#
# Not portable
// HFONT handle () const
#
# member not found
// bool isCopyOf ( const QFont & f ) const
bool italic () const
bool kerning () const
QString key () const
QString lastResortFamily () const
QString lastResortFont () const
qreal letterSpacing () const
SpacingType letterSpacingType () const
#
# member not found
// quint32 macFontID () const
bool overline () const
int pixelSize () const
int pointSize () const
qreal pointSizeF () const
bool rawMode () const
QString rawName () const
#
# error: invalid conversion from `QFont*' to `uint'
# initializing argument 1 of `void QFont::resolve(uint)'
// QFont resolve ( const QFont & other ) const
void setBold ( bool enable )
void setCapitalization ( Capitalization caps )
void setFamily ( const QString & family )
void setFixedPitch ( bool enable )
void setItalic ( bool enable )
void setKerning ( bool enable )
void setLetterSpacing ( SpacingType type, qreal spacing )
void setOverline ( bool enable )
void setPixelSize ( int pixelSize )
void setPointSize ( int pointSize )
void setPointSizeF ( qreal pointSize )
void setRawMode ( bool enable )
void setRawName ( const QString & name )
void setStretch ( int factor )
void setStrikeOut ( bool enable )
void setStyle ( Style style )
void setStyleHint ( StyleHint hint, StyleStrategy strategy = PreferDefault )
void setStyleStrategy ( StyleStrategy s )
void setUnderline ( bool enable )
void setWeight ( int weight )
void setWordSpacing ( qreal spacing )
int stretch () const
bool strikeOut () const
Style style () const
StyleHint styleHint () const
StyleStrategy styleStrategy () const
QString toString () const
bool underline () const
int weight () const
qreal wordSpacing () const


void cleanup ()
void initialize ()
void insertSubstitution ( const QString & familyName, const QString & substituteName )
void insertSubstitutions ( const QString & familyName, const QStringList & substituteNames )
void removeSubstitution ( const QString & familyName )                         [*V=-0x040900*]
QString substitute ( const QString & familyName )
QStringList substitutes ( const QString & familyName )
QStringList substitutions ()
</PROTOS>
