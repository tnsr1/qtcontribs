/*
 * $Id: QTabBar.qth 424 2016-03-05 11:15:10Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
Inherit     = QWidget
New         = pParent
Version     = 
</CLASS>

<CODE>
#include <QtCore/QVariant>
#include <QtGui/QTabBar>
#include <QtGui/QIcon>

/*
 * QTabBar ( QWidget * parent = 0 )
 * ~QTabBar ()
 */
HB_FUNC( QT_QTABBAR )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QWIDGET" ) )
   {
      __HB_RETPTRGC__( new QTabBar( hbqt_par_QWidget( 1 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QTabBar() );
   }      
}
</CODE>

<ENUMS>
enum ButtonPosition { LeftSide, RightSide }
enum SelectionBehavior { SelectLeftTab, SelectRightTab, SelectPreviousTab }
enum Shape { RoundedNorth, RoundedSouth, RoundedWest, RoundedEast, ..., TriangularEast }
</ENUMS>

<PROTOS>
int addTab ( const QString & text )
// int addTab ( const QIcon & icon, const QString & text )
int count () const
int currentIndex () const
bool documentMode () const
bool drawBase () const
Qt::TextElideMode elideMode () const
bool expanding () const
QSize iconSize () const
int insertTab ( int index, const QString & text )
// int insertTab ( int index, const QIcon & icon, const QString & text )
bool isMovable () const
bool isTabEnabled ( int index ) const
void moveTab ( int from, int to )
void removeTab ( int index )
SelectionBehavior selectionBehaviorOnRemove () const
void setDocumentMode ( bool set )
void setDrawBase ( bool drawTheBase )
void setElideMode ( Qt::TextElideMode )
void setExpanding ( bool enabled )
void setIconSize ( const QSize & size )
void setMovable ( bool movable )
void setSelectionBehaviorOnRemove ( SelectionBehavior behavior )
void setShape ( Shape shape )
void setTabButton ( int index, ButtonPosition position, QWidget * widget )
void setTabData ( int index, const QVariant & data )
void setTabEnabled ( int index, bool enabled )
// void setTabIcon ( int index, const QIcon & icon )
void setTabText ( int index, const QString & text )
void setTabTextColor ( int index, const QColor & color )
void setTabToolTip ( int index, const QString & tip )
void setTabWhatsThis ( int index, const QString & text )
void setTabsClosable ( bool closable )
void setUsesScrollButtons ( bool useButtons )
Shape shape () const
int tabAt ( const QPoint & position ) const
QWidget * tabButton ( int index, ButtonPosition position ) const
QVariant tabData ( int index ) const
QIcon tabIcon ( int index ) const
QRect tabRect ( int index ) const
QString tabText ( int index ) const
QColor tabTextColor ( int index ) const
QString tabToolTip ( int index ) const
QString tabWhatsThis ( int index ) const
bool tabsClosable () const
bool usesScrollButtons () const
</PROTOS>

<SLOTS>
void setCurrentIndex ( int index )
</SLOTS>

<SIGNALS>
void currentChanged ( int index )
void tabCloseRequested ( int index )
void tabMoved ( int from, int to )
</SIGNALS>
