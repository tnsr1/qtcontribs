/*
 * $Id: QWidget.qth 459 2017-10-12 04:12:04Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2014 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
Inherit     = QObject, QPaintDevice
New         = pParent, nFlags
</CLASS>

<CODE>
#include <QtGui/QWidget>
#include <QtGui/QIcon>
#include <QtCore/QVariant>
#include <QtCore/QLocale>


/*
 * QWidget( QWidget * parent = 0, Qt::WindowFlags f = 0 )
 * ~QWidget ()
 */
HB_FUNC( QT_QWIDGET )
{
   if( hb_pcount() >= 1 && hbqt_par_isDerivedFrom( 1, "QWIDGET" ) )
   {
      __HB_RETPTRGC__( new QWidget( hbqt_par_QWidget( 1 ), ( Qt::WindowFlags ) hb_parni( 2 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QWidget() );
   }
}
</CODE>

<ENUMS>
enum RenderFlag { DrawWindowBackground, DrawChildren, IgnoreMask }
flags RenderFlags
# From QPaintDevice : Parent Class
enum PaintDeviceMetric { PdmWidth, PdmHeight, PdmWidthMM, PdmHeightMM, ..., PdmPhysicalDpiY }
</ENUMS>

<PROTOS>
bool acceptDrops () const
QString accessibleDescription () const           [*F=#ifndef QT_NO_ACCESSIBILITY*]
QString accessibleName () const                  [*F=#ifndef QT_NO_ACCESSIBILITY*]
QList<QAction *> actions () const
void activateWindow ()
void addAction ( QAction * action )
void addActions ( QList<QAction *> actions )
void adjustSize ()
bool autoFillBackground () const
QPalette::ColorRole backgroundRole () const
QSize baseSize () const

QWidget * childAt ( int x, int y ) const
QWidget * childAt ( const QPoint & p ) const

QRect childrenRect () const
QRegion childrenRegion () const
void clearFocus ()
void clearMask ()
QMargins contentsMargins () const                                [*V=0x040600*]
QRect contentsRect () const
Qt::ContextMenuPolicy contextMenuPolicy () const
QCursor cursor () const
#
# non-portable
WId effectiveWinId () const
void ensurePolished () const
Qt::FocusPolicy focusPolicy () const
QWidget * focusProxy () const
QWidget * focusWidget () const
const QFont & font () const
QFontInfo fontInfo () const
QFontMetrics fontMetrics () const
QPalette::ColorRole foregroundRole () const
QRect frameGeometry () const
QSize frameSize () const
const QRect & geometry () const
void getContentsMargins ( int * left, int * top, int * right, int * bottom ) const
# non-portable
// virtual HDC getDC () const
void grabGesture ( Qt::GestureType gesture, Qt::GestureFlags flags = Qt::GestureFlags() )   [*V=0x040600*]
void grabKeyboard ()

void grabMouse ()
void grabMouse ( const QCursor & cursor )

int grabShortcut ( const QKeySequence & key, Qt::ShortcutContext context = Qt::WindowShortcut )
QGraphicsProxyWidget * graphicsProxyWidget () const
//bool hasEditFocus () const
bool hasFocus () const
bool hasMouseTracking () const
int height () const
virtual int heightForWidth ( int w ) const
Qt::InputMethodHints inputMethodHints() const                  [*V=0x040600*]
virtual QVariant inputMethodQuery ( Qt::InputMethodQuery query ) const
void insertAction ( QAction * before, QAction * action )
void insertActions ( QAction * before, QList<QAction *> actions )
bool isActiveWindow () const
bool isAncestorOf ( const QWidget * child ) const
bool isEnabled () const
bool isEnabledTo ( QWidget * ancestor ) const
bool isFullScreen () const
bool isHidden () const
bool isMaximized () const
bool isMinimized () const
bool isModal () const
bool isVisible () const
bool isVisibleTo ( QWidget * ancestor ) const
bool isWindow () const
bool isWindowModified () const
QLayout * layout () const
Qt::LayoutDirection layoutDirection () const
QLocale locale () const
// Qt::HANDLE macCGHandle () const
// Qt::HANDLE macQDHandle () const
QPoint mapFrom ( QWidget * parent, const QPoint & pos ) const
QPoint mapFromGlobal ( const QPoint & pos ) const
QPoint mapFromParent ( const QPoint & pos ) const
QPoint mapTo ( QWidget * parent, const QPoint & pos ) const
QPoint mapToGlobal ( const QPoint & pos ) const
QPoint mapToParent ( const QPoint & pos ) const
QRegion mask () const
int maximumHeight () const
QSize maximumSize () const
int maximumWidth () const
int minimumHeight () const
QSize minimumSize () const
virtual QSize minimumSizeHint () const
int minimumWidth () const

void move ( int x, int y )
void move ( const QPoint & )

QWidget * nativeParentWidget () const
QWidget * nextInFocusChain () const
QRect normalGeometry () const
void overrideWindowFlags ( Qt::WindowFlags flags )
virtual QPaintEngine * paintEngine () const
const QPalette & palette () const
QWidget * parentWidget () const
QPoint pos () const
QWidget * previousInFocusChain() const                     [*V=0x040600*]
QRect rect () const
# non-portable
// virtual void releaseDC ( HDC hdc ) const
void releaseKeyboard ()
void releaseMouse ()
void releaseShortcut ( int id )
void removeAction ( QAction * action )
//void render ( QPaintDevice * target, const QPoint & targetOffset = QPoint(), const QRegion & sourceRegion = QRegion(), RenderFlags renderFlags = RenderFlags( DrawWindowBackground | DrawChildren ) )
void render ( QPaintDevice * target, const QPoint & targetOffset = QPoint(), const QRegion & sourceRegion = QRegion() )
//void render ( QPainter * painter, const QPoint & targetOffset = QPoint(), const QRegion & sourceRegion = QRegion(), RenderFlags renderFlags = RenderFlags( DrawWindowBackground | DrawChildren ) )
void render ( QPainter * painter, const QPoint & targetOffset = QPoint(), const QRegion & sourceRegion = QRegion() )

void repaint ( int x, int y, int w, int h )
void repaint ( const QRect & rect )
void repaint ( const QRegion & rgn )

void resize ( int w, int h )
void resize ( const QSize & )

bool restoreGeometry ( const QByteArray & geometry )
QByteArray saveGeometry () const

void scroll ( int dx, int dy )
void scroll ( int dx, int dy, const QRect & r )

void setAcceptDrops ( bool on )
void setAccessibleDescription ( const QString & description )            [*F=#ifndef QT_NO_ACCESSIBILITY*]
void setAccessibleName ( const QString & name )                          [*F=#ifndef QT_NO_ACCESSIBILITY*]
void setAttribute ( Qt::WidgetAttribute attribute, bool on = true )
void setAutoFillBackground ( bool enabled )
void setBackgroundRole ( QPalette::ColorRole role )

void setBaseSize ( const QSize & )
void setBaseSize ( int basew, int baseh )

void setContentsMargins ( int left, int top, int right, int bottom )
void setContentsMargins ( const QMargins & margins )             [*V=0x040600*]
void setContextMenuPolicy ( Qt::ContextMenuPolicy policy )
void setCursor ( const QCursor & )
//void setEditFocus ( bool enable )
void setFixedHeight ( int h )

void setFixedSize ( const QSize & s )
void setFixedSize ( int w, int h )

void setFixedWidth ( int w )

void setFocus ( Qt::FocusReason reason )

void setFocusPolicy ( Qt::FocusPolicy policy )
void setFocusProxy ( QWidget * w )
void setFont ( const QFont & )
void setForegroundRole ( QPalette::ColorRole role )

void setGeometry ( const QRect & )
void setGeometry ( int x, int y, int w, int h )

void setGraphicsEffect ( QGraphicsEffect * effect )              [*V=0x040600;D=1*]
void setInputMethodHints ( Qt::InputMethodHints hints )          [*V=0x040600*]

// void setInputContext ( QInputContext * context )
void setLayout ( QLayout * layout )                              [*X=1*]
void setLayoutDirection ( Qt::LayoutDirection direction )
void setLocale ( const QLocale & locale )

void setMask ( const QBitmap & bitmap )
void setMask ( const QRegion & region )

void setMaximumHeight ( int maxh )

void setMaximumSize ( const QSize & )
void setMaximumSize ( int maxw, int maxh )

void setMaximumWidth ( int maxw )
void setMinimumHeight ( int minh )

void setMinimumSize ( const QSize & )
void setMinimumSize ( int minw, int minh )

void setMinimumWidth ( int minw )
void setMouseTracking ( bool enable )
void setPalette ( const QPalette & )

//void setParent ( QWidget * parent = 0 )
void setParent ( QWidget * parent = 0, Qt::WindowFlags f = 0 ){
   QWidget * p = ( QWidget * ) hbqt_par_ptr( 0 );
   if( p )
   {
      switch( hb_pcount() )
      {
         case 2:
         {
            if( hbqt_par_isDerivedFrom( 1, "QWIDGET" ) && HB_ISNUM( 2 ) )
            {
               p->setParent( ( HB_ISOBJECT( 1 ) ? hbqt_par_QWidget( 1 ) : 0 ), ( Qt::WindowFlags ) hb_parni( 2 ) );
               return;
            }
            break;
         }
         case 1:
         {
            if( HB_ISOBJECT( 1 ) && hbqt_par_isDerivedFrom( 1, "QWIDGET" ) )
            {
               p->setParent( ( HB_ISOBJECT( 1 ) ? hbqt_par_QWidget( 1 ) : 0 ), ( Qt::WindowFlags ) hb_parni( 2 ) );
               return;
            }
            else if( HB_ISNUM( 1 ) && hb_parni( 1 ) == 0 )
            {
               p->setParent( 0 );
               return;
            }
            break;
         }
         case 0:
         {
            p->setParent( ( HB_ISOBJECT( 1 ) ? hbqt_par_QWidget( 1 ) : 0 ), ( Qt::WindowFlags ) hb_parni( 2 ) );
            return;
         }
      }
      hb_errRT_BASE( EG_ARG, 9999, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
   }
}

void setShortcutAutoRepeat ( int id, bool enable = true )
void setShortcutEnabled ( int id, bool enable = true )

void setSizeIncrement ( const QSize & )
void setSizeIncrement ( int w, int h )

void setSizePolicy ( const QSizePolicy & policy )
void setSizePolicy ( QSizePolicy::Policy horizontal, QSizePolicy::Policy vertical )

void setStatusTip ( const QString & )
void setStyle ( QStyle * style )
void setToolTip ( const QString & )
void setToolTipDuration(int msec)                       [*V=0x050200*]
void setUpdatesEnabled ( bool enable )
void setWhatsThis ( const QString & )
void setWindowFilePath ( const QString & filePath )
void setWindowFlags ( Qt::WindowFlags type )
void setWindowIcon ( const QIcon & icon )
void setWindowIconText ( const QString & )
void setWindowModality ( Qt::WindowModality windowModality )
void setWindowOpacity ( qreal level )
void setWindowRole ( const QString & role )
void setWindowState ( Qt::WindowStates windowState )
//void setWindowSurface ( QWindowSurface * surface )
QSize size () const
virtual QSize sizeHint () const
QSize sizeIncrement () const
QSizePolicy sizePolicy () const
void stackUnder ( QWidget * w )
QString statusTip () const
QStyle * style () const
QString styleSheet () const
bool testAttribute ( Qt::WidgetAttribute attribute ) const
QString toolTip () const
int toolTipDuration() const                                   [*V=0x050200*]
bool underMouse () const
void unsetCursor ()
void unsetLayoutDirection ()
void unsetLocale ()

void update ( int x, int y, int w, int h )
void update ( const QRect & rect )
void update ( const QRegion & rgn )

void updateGeometry ()
bool updatesEnabled () const
QRegion visibleRegion () const
QString whatsThis () const
int width () const
WId winId () const
QWidget * window () const
QString windowFilePath () const
Qt::WindowFlags windowFlags () const
QIcon windowIcon () const
QString windowIconText () const
Qt::WindowModality windowModality () const
qreal windowOpacity () const
QString windowRole () const
Qt::WindowStates windowState () const
//QWindowSurface * windowSurface () const   (preliminary)
QString windowTitle () const
Qt::WindowType windowType () const
int x () const
//Qt::HANDLE x11PictureHandle () const
int y () const

QWidget * find ( WId id )
QWidget * keyboardGrabber ()
QWidget * mouseGrabber ()
void setTabOrder ( QWidget * first, QWidget * second )
</PROTOS>

<SLOTS>
bool close ()
void hide ()
void lower ()
void raise ()
void repaint ()
void setDisabled ( bool disable )
void setEnabled ( bool enable )
void setFocus ()
void setHidden ( bool hidden )
void setStyleSheet ( const QString & styleSheet )
virtual void setVisible ( bool visible )
void setWindowModified ( bool modified )
void setWindowTitle ( const QString & title )
void show ()
void showFullScreen ()
void showMaximized ()
void showMinimized ()
void showNormal ()
void update ()
</SLOTS>

<SIGNALS>
void customContextMenuRequested(const QPoint & pos)
void windowIconChanged(const QIcon & icon)
void windowIconTextChanged(const QString & iconText)
void windowTitleChanged(const QString & title)
</SIGNALS>

