
/* $DOC$
   $TEMPLATE$
      Class
   $NAME$
      QStyle()
   $CATEGORY$
      Harbour Bindings for Qt
   $SUBCATEGORY$
      GUI
   $EXTERNALLINK$
      http://doc.qt.io/qt-4.5/qstyle.html
   $ONELINER$
      Creates a new QStyle object.
   $INHERITS$
      QObject
   $SYNTAX$
      QStyle( ... )

   $ARGUMENTS$

   $RETURNS$
      An instance of the object of type QStyle
   $METHODS$
      :combinedLayoutSpacing( nControls1, nControls2, nOrientation, oQStyleOption, oQWidget )  -> nInt
      :drawComplexControl( nControl, oQStyleOptionComplex, oQPainter, oQWidget )  -> NIL
      :drawControl( nElement, oQStyleOption, oQPainter, oQWidget )  -> NIL
      :drawItemPixmap( oQPainter, oQRect, nAlignment, oQPixmap )  -> NIL
      :drawItemText( oQPainter, oQRect, nAlignment, oQPalette, lEnabled, cText, nTextRole )  -> NIL
      :drawPrimitive( nElement, oQStyleOption, oQPainter, oQWidget )  -> NIL
      :generatedIconPixmap( nIconMode, oQPixmap, oQStyleOption )  -> oQPixmap
      :hitTestComplexControl( nControl, oQStyleOptionComplex, oQPoint, oQWidget )  -> nSubControl
      :itemPixmapRect( oQRect, nAlignment, oQPixmap )     -> oQRect
      :itemTextRect( oQFontMetrics, oQRect, nAlignment, lEnabled, cText )  -> oQRect
      :layoutSpacing( nControl1, nControl2, nOrientation, oQStyleOption, oQWidget )  -> nInt
      :pixelMetric( nMetric, oQStyleOption, oQWidget )    -> nInt
      :polish( oQWidget )                                 -> NIL
      :( oQApplication )                                  -> NIL
      :( oQPalette )                                      -> NIL
      :sizeFromContents( nType, oQStyleOption, oQSize, oQWidget )  -> oQSize
      :standardIcon( nStandardIcon, oQStyleOption, oQWidget )  -> oQIcon
      :standardPalette()                                  -> oQPalette
      :styleHint( nHint, oQStyleOption, oQWidget, oQStyleHintReturn )  -> nInt
      :subControlRect( nControl, oQStyleOptionComplex, nSubControl, oQWidget )  -> oQRect
      :subElementRect( nElement, oQStyleOption, oQWidget )  -> oQRect
      :unpolish( oQWidget )                               -> NIL
      :( oQApplication )                                  -> NIL
      :alignedRect( nDirection, nAlignment, oQSize, oQRect )  -> oQRect
      :sliderPositionFromValue( nMin, nMax, nLogicalValue, nSpan, lUpsideDown )  -> nInt
      :sliderValueFromPosition( nMin, nMax, nPosition, nSpan, lUpsideDown )  -> nInt
      :visualAlignment( nDirection, nAlignment )          -> nQt_Alignment
      :visualPos( nDirection, oQRect, oQPoint )           -> oQPoint
      :visualRect( nDirection, oQRect, oQRect )           -> oQRect

   $DESCRIPTION$

   $EXAMPLES$

   $TESTS$

   $STATUS$
      R
   $COMPLIANCE$
      Not Clipper compatible
   $PLATFORMS$
      Windows, Linux, Mac OS X, OS/2
   $VERSION$
      4.5 or upper
   $FILES$
      Library: hbqtgui
   $END$
 */
