/*
 * $Id: QHttpHeader.qth 163 2013-02-05 02:38:40Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Inherit     = 
Type        = Core
New         =
Destructor  = no
Constructor = no
VersionUpto = 0x040900
</CLASS>

<CODE>
#include <QtNetwork/QHttpHeader>


/*
 * QHttpHeader ()
 * QHttpHeader ( const QHttpHeader & header )
 * QHttpHeader ( const QString & str )
 * virtual ~QHttpHeader ()
 */
HB_FUNC( QT_QHTTPHEADER )
{
/*  //QHttpHeader.cpp:128:67: error: cannot allocate an object of abstract type 'QHttpHeader'  // This can be subclassed only
   if( hb_pcount() == 1 && HB_ISCHAR( 1 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QHttpHeader( hb_parstr_utf8( 1, &pText01, NULL ) ) );
      hb_strfree( pText01 );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QHTTPHEADER" ) )
   {
      __HB_RETPTRGC__( new QHttpHeader( *hbqt_par_QHttpHeader( 1 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QHttpHeader() );
   }   
*/   
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
void addValue ( const QString & key, const QString & value )
QStringList allValues ( const QString & key ) const
uint contentLength () const
QString contentType () const
bool hasContentLength () const
bool hasContentType () const
bool hasKey ( const QString & key ) const
bool isValid () const
QStringList keys () const
virtual int majorVersion () const = 0
virtual int minorVersion () const = 0
void removeAllValues ( const QString & key )
void removeValue ( const QString & key )
void setContentLength ( int len )
void setContentType ( const QString & type )
void setValue ( const QString & key, const QString & value )
void setValues ( const QList<QPair<QString, QString> > & values )
virtual QString toString () const
QString value ( const QString & key ) const
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
