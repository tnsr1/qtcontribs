/*
 * $Id: QHttp.qth 163 2013-02-05 02:38:40Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

; Header File to Generate Sources
;

<CLASS>
Inherit     = QObject
New         = pParent
VersionUpto = 0x040900
</CLASS>

<CODE>
#include <QtNetwork/QHttp>


/*
 * QHttp ( QObject * parent = 0 )
 * QHttp ( const QString & hostName, quint16 port = 80, QObject * parent = 0 )
 * QHttp ( const QString & hostName, ConnectionMode mode, quint16 port = 0, QObject * parent = 0 )
 * virtual ~QHttp ()
 */
HB_FUNC( QT_QHTTP )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QOBJECT" ) )
   {
      __HB_RETPTRGC__( new QHttp( hbqt_par_QObject( 1 ) ) );
   }
   else if( hb_pcount() == 1 && HB_ISCHAR( 1 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QHttp( hb_parstr_utf8( 1, &pText01, NULL ) ) );
      hb_strfree( pText01 );
   }
   else
   {
      __HB_RETPTRGC__( new QHttp() );
   }      
}

/*
 * qint64 read ( char * data, qint64 maxlen )
 */
HB_FUNC( QT_QHTTP_READ )
{
   char * iData = ( char * ) hb_xgrab( hb_parnint( 3 ) + 1 );
   qint64 iRead;

   iRead = hbqt_par_QHttp( 1 )->read( iData, hb_parnint( 3 ) );

   hb_retnint( iRead );
   if( ! hb_storclen_buffer( iData, iRead, 2 ) )
      hb_xfree( iData );
}
</CODE>

<ENUMS>
enum ConnectionMode { ConnectionModeHttp, ConnectionModeHttps }
enum Error { NoError, HostNotFound, ConnectionRefused, UnexpectedClose, ..., UnknownError }
enum State { Unconnected, HostLookup, Connecting, Sending, ..., Closing }
</ENUMS>

<PROTOS>
qint64 bytesAvailable () const
void clearPendingRequests ()
int close ()
QIODevice * currentDestinationDevice () const
int currentId () const
QHttpRequestHeader currentRequest () const
QIODevice * currentSourceDevice () const
Error error () const
QString errorString () const
int get ( const QString & path, QIODevice * to = 0 )
bool hasPendingRequests () const
int head ( const QString & path )
QHttpResponseHeader lastResponse () const
int post ( const QString & path, QIODevice * data, QIODevice * to = 0 )
int post ( const QString & path, const QByteArray & data, QIODevice * to = 0 )
#
#           NEVER UNCOMMENT IT
// qint64 read ( char * data, qint64 maxlen )
#
#
QByteArray readAll ()
int request ( const QHttpRequestHeader & header, QIODevice * data = 0, QIODevice * to = 0 )
int request ( const QHttpRequestHeader & header, const QByteArray & data, QIODevice * to = 0 )
//int setHost ( const QString & hostName, quint16 port = 80 )
int setHost ( const QString & hostName, ConnectionMode mode, quint16 port = 0 )
int setProxy ( const QString & host, int port, const QString & username = QString(), const QString & password = QString() )
int setProxy ( const QNetworkProxy & proxy )
// int setSocket ( QTcpSocket * socket )
int setUser ( const QString & userName, const QString & password = QString() )
State state () const
</PROTOS>

<SLOTS>
void abort ()
//void ignoreSslErrors ()
</SLOTS>

<SIGNALS>
void authenticationRequired ( const QString & hostname, quint16 port, QAuthenticator * authenticator )
void dataReadProgress ( int done, int total )
void dataSendProgress ( int done, int total )
void done ( bool error )
// void proxyAuthenticationRequired ( const QNetworkProxy & proxy, QAuthenticator * authenticator )
void readyRead ( const QHttpResponseHeader & resp )
void requestFinished ( int id, bool error )
void requestStarted ( int id )
void responseHeaderReceived ( const QHttpResponseHeader & resp )
void sslErrors ( const QList<QSslError> & errors )
void stateChanged ( int state )
</SIGNALS>
