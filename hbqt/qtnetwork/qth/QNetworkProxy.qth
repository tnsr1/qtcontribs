/*
 * $Id: QNetworkProxy.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

; Header File to Generate Sources
;

<CLASS>
QObject     = no
Inherit     =
New         =
</CLASS>

<CODE>
#include <QtNetwork/QNetworkProxy>


/*
 * QNetworkProxy ()
 * QNetworkProxy ( ProxyType type, const QString & hostName = QString(), quint16 port = 0, const QString & user = QString(), const QString & password = QString() )
 * QNetworkProxy ( const QNetworkProxy & other )
 * ~QNetworkProxy ()
 */
HB_FUNC( QT_QNETWORKPROXY )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QNETWORKPROXY" ) )
   {
      __HB_RETPTRGC__( new QNetworkProxy( *hbqt_par_QNetworkProxy( 1 ) ) );
   }
   else if( hb_pcount() == 1 && HB_ISNUM( 1 ) )
   {
      __HB_RETPTRGC__( new QNetworkProxy( ( QNetworkProxy::ProxyType ) hb_parni( 1 ) ) );
   }
   else if( hb_pcount() == 2 && HB_ISNUM( 1 ) && HB_ISCHAR( 2 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QNetworkProxy( ( QNetworkProxy::ProxyType ) hb_parni( 1 ), hb_parstr_utf8( 2, &pText01, NULL ) ) );
      hb_strfree( pText01 );
   }
   else if( hb_pcount() == 3 && HB_ISNUM( 1 ) && HB_ISCHAR( 2 ) && HB_ISNUM( 3 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QNetworkProxy( ( QNetworkProxy::ProxyType ) hb_parni( 1 ), hb_parstr_utf8( 2, &pText01, NULL ), hb_parni( 3 ) ) );
      hb_strfree( pText01 );
   }
   else if( hb_pcount() == 4 && HB_ISNUM( 1 ) && HB_ISCHAR( 2 ) && HB_ISNUM( 3 ) && HB_ISCHAR( 4 ) )
   {
      void * pText01 = NULL;
      void * pText02 = NULL;
      __HB_RETPTRGC__( new QNetworkProxy( ( QNetworkProxy::ProxyType ) hb_parni( 1 ), hb_parstr_utf8( 2, &pText01, NULL ), hb_parni( 3 ), hb_parstr_utf8( 4, &pText02, NULL ) ) );
      hb_strfree( pText01 );
      hb_strfree( pText02 );
   }
   else if( hb_pcount() == 5 && HB_ISNUM( 1 ) && HB_ISCHAR( 2 ) && HB_ISNUM( 3 ) && HB_ISCHAR( 4 ) && HB_ISCHAR( 5 ) )
   {
      void * pText01 = NULL;
      void * pText02 = NULL;
      void * pText03 = NULL;
      __HB_RETPTRGC__( new QNetworkProxy( ( QNetworkProxy::ProxyType ) hb_parni( 1 ), hb_parstr_utf8( 2, &pText01, NULL ), hb_parni( 3 ), hb_parstr_utf8( 4, &pText02, NULL ), hb_parstr_utf8( 5, &pText03, NULL ) ) );
      hb_strfree( pText01 );
      hb_strfree( pText02 );
      hb_strfree( pText03 );
   }
   else
   {
      __HB_RETPTRGC__( new QNetworkProxy() );
   }
}
</CODE>

<ENUMS>
flags Capabilities
enum Capability { TunnelingCapability, ListeningCapability, UdpTunnelingCapability, CachingCapability, HostNameLookupCapability }
enum ProxyType { NoProxy, DefaultProxy, Socks5Proxy, HttpProxy, HttpCachingProxy, FtpCachingProxy }
</ENUMS>

<PROTOS>
Capabilities capabilities () const
QString hostName () const
bool isCachingProxy () const
bool isTransparentProxy () const
QString password () const
quint16 port () const
void setCapabilities ( Capabilities capabilities )
void setHostName ( const QString & hostName )
void setPassword ( const QString & password )
void setPort ( quint16 port )
void setType ( QNetworkProxy::ProxyType type )
void setUser ( const QString & user )
QNetworkProxy::ProxyType type () const
QString user () const
QNetworkProxy applicationProxy ()
void setApplicationProxy ( const QNetworkProxy & networkProxy )
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
