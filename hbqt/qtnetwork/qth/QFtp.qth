/*
 * $Id: QFtp.qth 163 2013-02-05 02:38:40Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

; Header File to Generate Sources
;

<CLASS>
Inherit     = QObject
New         = pParent
VersionUpto = 0x040900
</CLASS>

<CODE>
#include <QtNetwork/QFtp>


/*
 * QFtp ( QObject * parent = 0 )
 * virtual ~QFtp ()
 */
HB_FUNC( QT_QFTP )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QOBJECT" ) )
   {
      __HB_RETPTRGC__( new QFtp( hbqt_par_QObject( 1 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QFtp() );
   }      
}

/*
 * qint64 read ( char * data, qint64 maxlen )
 */
HB_FUNC( QT_QFTP_READ )
{
   char * iData = ( char * ) hb_xgrab( hb_parnint( 3 ) + 1 );
   qint64 iRead;

   iRead = hbqt_par_QFtp( 1 )->read( iData, hb_parnint( 3 ) );

   hb_retnint( iRead );
   if( ! hb_storclen_buffer( iData, iRead, 2 ) )
      hb_xfree( iData );
}
</CODE>

<ENUMS>
enum Command { None, SetTransferMode, SetProxy, ConnectToHost, ..., RawCommand }
enum Error { NoError, HostNotFound, ConnectionRefused, NotConnected, UnknownError }
enum State { Unconnected, HostLookup, Connecting, Connected, LoggedIn, Closing }
enum TransferMode { Passive, Active }
enum TransferType { Binary, Ascii }
</ENUMS>

<PROTOS>
qint64 bytesAvailable () const
int cd ( const QString & dir )
void clearPendingCommands ()
int close ()
int connectToHost ( const QString & host, quint16 port = 21 )
Command currentCommand () const
QIODevice * currentDevice () const
int currentId () const
Error error () const
QString errorString () const
int get ( const QString & file, QIODevice * dev = 0, TransferType Type        = Binary )
bool hasPendingCommands () const
int list ( const QString & dir = QString() )
int login ( const QString & user = QString(), const QString & password = QString() )
int mkdir ( const QString & dir )
int put ( QIODevice * dev, const QString & file, TransferType Type        = Binary )
int put ( const QByteArray & data, const QString & file, TransferType Type        = Binary )
int rawCommand ( const QString & command )
#           Never uncomment it : See above
// qint64 read ( char * data, qint64 maxlen )
#
QByteArray readAll ()
int remove ( const QString & file )
int rename ( const QString & oldname, const QString & newname )
int rmdir ( const QString & dir )
int setProxy ( const QString & host, quint16 port )
int setTransferMode ( TransferMode mode )
State state () const
</PROTOS>

<SLOTS>
void abort ()
</SLOTS>

<SIGNALS>
void commandFinished ( int id, bool error )
void commandStarted ( int id )
void dataTransferProgress ( qint64 done, qint64 total )
void done ( bool error )
void listInfo ( const QUrlInfo & i )
void rawCommandReply ( int replyCode, const QString & detail )
void readyRead ()
void stateChanged ( int state )
</SIGNALS>
