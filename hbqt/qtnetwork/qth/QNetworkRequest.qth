/*
 * $Id: QNetworkRequest.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Inherit     = 
Type        = Core
New         =
Destructor  = 
</CLASS>

<CODE>
#include <QtNetwork/QNetworkRequest>


/* QNetworkRequest ( const QUrl & url = QUrl() )
 * QNetworkRequest ( const QNetworkRequest & other )
 * ~QNetworkRequest ()
 */
HB_FUNC( QT_QNETWORKREQUEST )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QURL" ) )
   {
      __HB_RETPTRGC__( new QNetworkRequest( *hbqt_par_QUrl( 1 ) ) );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QNETWORKREQUEST" ) )
   {
      __HB_RETPTRGC__( new QNetworkRequest( *hbqt_par_QNetworkRequest( 1 ) ) );
   }
   else
   {   
      __HB_RETPTRGC__( new QNetworkRequest() );
   }   
}
</CODE>

<ENUMS>
enum Attribute { HttpStatusCodeAttribute, HttpReasonPhraseAttribute, RedirectionTargetAttribute, ConnectionEncryptedAttribute, ..., UserMax }
enum CacheLoadControl { AlwaysNetwork, PreferNetwork, PreferCache, AlwaysCache }
enum KnownHeaders { ContentTypeHeader, ContentLengthHeader, LocationHeader, LastModifiedHeader, CookieHeader, SetCookieHeader }
</ENUMS>

<PROTOS>
QVariant attribute ( Attribute code, const QVariant & defaultValue = QVariant() ) const
bool hasRawHeader ( const QByteArray & headerName ) const
QVariant header ( KnownHeaders header ) const
QByteArray rawHeader ( const QByteArray & headerName ) const
QList<QByteArray> rawHeaderList () const
void setAttribute ( Attribute code, const QVariant & value )
void setHeader ( KnownHeaders header, const QVariant & value )
void setRawHeader ( const QByteArray & headerName, const QByteArray & headerValue )
// void setSslConfiguration ( const QSslConfiguration & config )
void setUrl ( const QUrl & url )
// QSslConfiguration sslConfiguration () const
QUrl url () const
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
