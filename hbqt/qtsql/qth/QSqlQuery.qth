/*
 * $Id: QSqlQuery.qth 319 2014-07-25 01:29:55Z bedipritpal $
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009-2011 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/
;
;              Header File to Generate QT Wrapper Sources
;

<CLASS>
QObject  = no
Inherit  =
Type     =
New      =
</CLASS>

<CODE>
#include <QtSql/QSqlQuery>
#include <QtSql/QSqlDriver>
#include <QtSql/QSqlError>
#include <QtSql/QSqlRecord>
#include <QtSql/QSqlResult>
#include <QtCore/QVariant>


/*
 * QSqlQuery ( QSqlResult * result )
 * QSqlQuery ( const QString & query = QString(), QSqlDatabase db = QSqlDatabase() )
 * QSqlQuery ( QSqlDatabase db )
 * QSqlQuery ( const QSqlQuery & other )
 * ~QSqlQuery ()
 */
HB_FUNC( QT_QSQLQUERY )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QSqlQuery" ) )
   {
      __HB_RETPTRGC__( new QSqlQuery( * hbqt_par_QSqlQuery( 1 ) ) );
   }
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QSqlResult" ) )
   {
      __HB_RETPTRGC__( new QSqlQuery( hbqt_par_QSqlResult( 1 ) ) );
   }
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QSqlDatabase" ) )
   {
      __HB_RETPTRGC__( new QSqlQuery( * hbqt_par_QSqlDatabase( 1 ) ) );
   }
   else if( hb_pcount() == 1 && HB_ISCHAR( 1 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QSqlQuery( hb_parstr_utf8( 1, &pText01, NULL ) ) );
      hb_strfree( pText01 );
   }
   else
   {
      __HB_RETPTRGC__( new QSqlQuery() );
   }
}
</CODE>

<ENUMS>
enum BatchExecutionMode { ValuesAsRows, ValuesAsColumns }
</ENUMS>

<PROTOS>
void addBindValue ( const QVariant & val, QSql::ParamType paramType = QSql::In )
int at () const
void bindValue ( const QString & placeholder, const QVariant & val, QSql::ParamType paramType = QSql::In )
void bindValue ( int pos, const QVariant & val, QSql::ParamType paramType = QSql::In )
QVariant boundValue ( const QString & placeholder ) const
QVariant boundValue ( int pos ) const
QMap<QString, QVariant> boundValues () const
void clear ()
const QSqlDriver * driver () const{
   QSqlQuery * p = ( QSqlQuery * ) hbqt_par_ptr( 0 );
   if( p )
   {
      hb_itemReturnRelease( hbqt_bindGetHbObject( NULL, ( void* ) p->driver(), "HB_QSQLDRIVER", NULL, HBQT_BIT_NONE ) );
   }
}
bool exec ( const QString & query )
bool exec ()
bool execBatch ( BatchExecutionMode mode = ValuesAsRows )
QString executedQuery () const
void finish ()
bool first ()
bool isActive () const
bool isForwardOnly () const
bool isNull ( int field ) const
bool isSelect () const
bool isValid () const
bool last ()
QSqlError lastError () const
QVariant lastInsertId () const
QString lastQuery () const
bool next ()
bool nextResult ()
int numRowsAffected () const
QSql::NumericalPrecisionPolicy numericalPrecisionPolicy () const
bool prepare ( const QString & query )
bool previous ()
QSqlRecord record () const
const QSqlResult * result () const{
   QSqlQuery * p = ( QSqlQuery * ) hbqt_par_ptr( 0 );
   if( p )
   {
      hb_itemReturnRelease( hbqt_bindGetHbObject( NULL, ( void* ) p->result(), "HB_QSQLRESULT", NULL, HBQT_BIT_NONE ) );
   }
}
bool seek ( int index, bool relative = false )
void setForwardOnly ( bool forward )
void setNumericalPrecisionPolicy ( QSql::NumericalPrecisionPolicy precisionPolicy )
int size () const
QVariant value ( int index ) const
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>

<VARIABLES>
</VARIABLES>
