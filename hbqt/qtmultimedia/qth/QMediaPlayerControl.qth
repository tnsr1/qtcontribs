/*
 * $Id: QMediaPlayerControl.qth 310 2014-06-02 01:38:30Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2014 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>

Inherit     = QMediaControl
QObject     = Yes
Version     = 0x050300

</CLASS>


<CODE>
#include <QtMultimedia/QMediaPlayerControl>


/*
 * ~QMediaPlayerControl()
 */
HB_FUNC( QT_QMEDIAPLAYERCONTROL )
{
   HB_FUNC_EXEC( HB_QMEDIAPLAYERCONTROL );
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
virtual QMediaTimeRange   availablePlaybackRanges() const = 0
virtual int   bufferStatus() const = 0
virtual qint64   duration() const = 0
virtual bool   isAudioAvailable() const = 0
virtual bool   isMuted() const = 0
virtual bool   isSeekable() const = 0
virtual bool   isVideoAvailable() const = 0
virtual QMediaContent   media() const = 0
virtual QMediaPlayer::MediaStatus   mediaStatus() const = 0
virtual const QIODevice *   mediaStream() const = 0
virtual void   pause() = 0
virtual void   play() = 0
virtual qreal   playbackRate() const = 0
virtual qint64   position() const = 0
virtual void   setMedia(const QMediaContent & media, QIODevice * stream) = 0
virtual void   setMuted(bool mute) = 0
virtual void   setPlaybackRate(qreal rate) = 0
virtual void   setPosition(qint64 position) = 0
virtual void   setVolume(int volume) = 0
virtual QMediaPlayer::State   state() const = 0
virtual void   stop() = 0
virtual int   volume() const = 0
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
void   audioAvailableChanged(bool audio)
void   availablePlaybackRangesChanged(const QMediaTimeRange & ranges)
void   bufferStatusChanged(int progress)
void   durationChanged(qint64 duration)
void   error(int error, const QString & errorString)
void   mediaChanged(const QMediaContent & content)
void   mediaStatusChanged(QMediaPlayer::MediaStatus status)
void   mutedChanged(bool mute)
void   playbackRateChanged(qreal rate)
void   positionChanged(qint64 position)
void   seekableChanged(bool seekable)
void   stateChanged(QMediaPlayer::State state)
void   videoAvailableChanged(bool video)
void   volumeChanged(int volume)
</SIGNALS>
