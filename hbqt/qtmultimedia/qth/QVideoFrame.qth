/*
 * $Id: QVideoFrame.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>

Inherit     =
QObject     =
Version     = 0x040600

</CLASS>


<CODE>
#include <QtCore/QVariant>
#include <QtMultimedia/QVideoFrame>


/*
 *	QVideoFrame ()
 * QVideoFrame ( QAbstractVideoBuffer * buffer, const QSize & size, PixelFormat format )
 * QVideoFrame ( int bytes, const QSize & size, int bytesPerLine, PixelFormat format )
 * QVideoFrame ( const QImage & image )
 * QVideoFrame ( const QVideoFrame & other )
 * ~QVideoFrame ()
 */
HB_FUNC( QT_QVIDEOFRAME )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QVIDEOFRAME" ) )
   {
      __HB_RETPTRGC__( new QVideoFrame( *hbqt_par_QVideoFrame( 1 ) ) );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QIMAGE" ) )
   {
      __HB_RETPTRGC__( new QVideoFrame( *hbqt_par_QImage( 1 ) ) );
   }
   else if( hb_pcount() == 3 && hbqt_par_isDerivedFrom( 1, "QABSTRACTVIDEOBUFFER" ) && hbqt_par_isDerivedFrom( 2, "QSIZE" ) && HB_ISNUM( 3 ) )
   {
      __HB_RETPTRGC__( new QVideoFrame( hbqt_par_QAbstractVideoBuffer( 1 ), *hbqt_par_QSize( 2 ), ( QVideoFrame::PixelFormat ) hb_parni( 3 ) ) );
   }
   else if( hb_pcount() == 4 && HB_ISNUM( 1 ) && hbqt_par_isDerivedFrom( 2, "QSIZE" ) && HB_ISNUM( 3 ) && HB_ISNUM( 4 ) )
   {
      __HB_RETPTRGC__( new QVideoFrame( hb_parni( 1 ), *hbqt_par_QSize( 2 ), hb_parni( 3 ), ( QVideoFrame::PixelFormat ) hb_parni( 4 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QVideoFrame() );
   }
}
</CODE>

<ENUMS>
enum FieldType { ProgressiveFrame, TopField, BottomField, InterlacedFrame }
enum PixelFormat { Format_Invalid, Format_ARGB32, Format_ARGB32_Premultiplied, Format_RGB32, ..., Format_User }
</ENUMS>

<PROTOS>
uchar * bits ()
const uchar * bits () const
int bytesPerLine () const
qint64 endTime () const
FieldType fieldType () const
QVariant handle () const
QAbstractVideoBuffer::HandleType handleType () const
int height () const
bool isMapped () const
bool isReadable () const
bool isValid () const
bool isWritable () const
bool map ( QAbstractVideoBuffer::MapMode mode )
QAbstractVideoBuffer::MapMode mapMode () const
int mappedBytes () const
PixelFormat pixelFormat () const
void setEndTime ( qint64 time )
void setFieldType ( FieldType field )
void setStartTime ( qint64 time )
QSize size () const
qint64 startTime () const
void unmap ()
int width () const

QImage::Format imageFormatFromPixelFormat ( PixelFormat format )
PixelFormat pixelFormatFromImageFormat ( QImage::Format format )
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
