/*
 * $Id: QAudioOutput.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>

Inherit     = QObject
QObject     = yes
Version     = 0x040600

</CLASS>


<CODE>
#include <QtMultimedia/QAudioOutput>


/*
 * QAudioOutput ( const QAudioFormat & format = QAudioFormat(), QObject * parent = 0 )
 * QAudioOutput ( const QAudioDeviceInfo & audioDevice, const QAudioFormat & format = QAudioFormat(), QObject * parent = 0 )
 * ~QAudioOutput ()
 */
HB_FUNC( QT_QAUDIOOUTPUT )
{
   if( hb_pcount() == 3 && hbqt_par_isDerivedFrom( 1, "QAUDIODEVICEINFO" ) && hbqt_par_isDerivedFrom( 2, "QAUDIOFORMAT" ) && hbqt_par_isDerivedFrom( 3, "QOBJECT" ) )
   {
      __HB_RETPTRGC__( new QAudioOutput( *hbqt_par_QAudioDeviceInfo( 1 ), *hbqt_par_QAudioFormat( 2 ), hbqt_par_QObject( 3 ) ) );
   }
   else if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QAUDIODEVICEINFO" ) && hbqt_par_isDerivedFrom( 2, "QAUDIOFORMAT" ) )
   {
      __HB_RETPTRGC__( new QAudioOutput( *hbqt_par_QAudioDeviceInfo( 1 ), *hbqt_par_QAudioFormat( 2 ) ) );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QAUDIODEVICEINFO" ) )
   {
      __HB_RETPTRGC__( new QAudioOutput( *hbqt_par_QAudioDeviceInfo( 1 ) ) );
   }
   else if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QAUDIOFORMAT" ) && hbqt_par_isDerivedFrom( 2, "QOBJECT" ) )
   {
      __HB_RETPTRGC__( new QAudioOutput( *hbqt_par_QAudioFormat( 1 ), hbqt_par_QObject( 2 ) ) );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QAUDIOFORMAT" ) )
   {
      __HB_RETPTRGC__( new QAudioOutput( *hbqt_par_QAudioFormat( 1 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QAudioOutput() );
   }
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
int bufferSize () const
int bytesFree () const
qint64 elapsedUSecs () const
QAudio::Error error () const
QAudioFormat format () const
int notifyInterval () const
int periodSize () const
qint64 processedUSecs () const
void reset ()
void resume ()
void setBufferSize ( int value )
void setNotifyInterval ( int ms )
void start ( QIODevice * device )
QIODevice * start ()
QAudio::State state () const
void stop ()
void suspend ()
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
void notify ()
void stateChanged ( QAudio::State state )
</SIGNALS>
