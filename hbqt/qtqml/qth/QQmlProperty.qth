/*
 * $Id: QQmlProperty.qth 312 2014-06-09 05:56:42Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2014 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
Inherit     =
QObject     = No
Version     = 0x050300
</CLASS>


<CODE>
#include <QtQml/QQmlProperty>


/*
 * QQmlProperty()
 * QQmlProperty(QObject * obj)
 * QQmlProperty(QObject * obj, QQmlContext * ctxt)
 * QQmlProperty(QObject * obj, QQmlEngine * engine)
 * QQmlProperty(QObject * obj, const QString & name)
 * QQmlProperty(QObject * obj, const QString & name, QQmlContext * ctxt)
 * QQmlProperty(QObject * obj, const QString & name, QQmlEngine * engine)
 * QQmlProperty(const QQmlProperty & other)
 */
HB_FUNC( QT_QQMLPROPERTY )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QObject" ) )
   {
      __HB_RETPTRGC__( new QQmlProperty( hbqt_par_QObject( 1 ) ) );
   }
   else if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QObject" ) && hbqt_par_isDerivedFrom( 2, "QQmlContext" ) )
   {
      __HB_RETPTRGC__( new QQmlProperty( hbqt_par_QObject( 1 ), hbqt_par_QQmlContext( 2 ) ) );
   }
   else if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QObject" ) && hbqt_par_isDerivedFrom( 2, "QQmlEngine" ) )
   {
      __HB_RETPTRGC__( new QQmlProperty( hbqt_par_QObject( 1 ), hbqt_par_QQmlEngine( 2 ) ) );
   }
   else if( hb_pcount() == 3 && hbqt_par_isDerivedFrom( 1, "QObject" ) && HB_ISCHAR( 2 ) && hbqt_par_isDerivedFrom( 3, "QQmlContext" ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QQmlProperty( hbqt_par_QObject( 1 ), hb_parstr_utf8( 2, &pText01, NULL ), hbqt_par_QQmlContext( 3 ) ) );
      hb_strfree( pText01 );
   }
   else if( hb_pcount() == 3 && hbqt_par_isDerivedFrom( 1, "QObject" ) && HB_ISCHAR( 2 ) && hbqt_par_isDerivedFrom( 3, "QQmlEngine" ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QQmlProperty( hbqt_par_QObject( 1 ), hb_parstr_utf8( 2, &pText01, NULL ), hbqt_par_QQmlEngine( 3 ) ) );
      hb_strfree( pText01 );
   }
   else
   {
      __HB_RETPTRGC__( new QQmlProperty() );
   }
}
</CODE>

<ENUMS>
enum   PropertyTypeCategory { InvalidCategory, List, Object, Normal }
enum   Type { Invalid, Property, SignalProperty }
</ENUMS>

<PROTOS>
bool   connectNotifySignal(QObject * dest, const char * slot) const
bool   connectNotifySignal(QObject * dest, int method) const
bool   hasNotifySignal() const
int   index() const
bool   isDesignable() const
bool   isProperty() const
bool   isResettable() const
bool   isSignalProperty() const
bool   isValid() const
bool   isWritable() const
QMetaMethod   method() const
QString   name() const
bool   needsNotifySignal() const
QObject *   object() const
QMetaProperty   property() const
int   propertyType() const
PropertyTypeCategory   propertyTypeCategory() const
const char *   propertyTypeName() const
QVariant   read() const
bool   reset() const
Type   type() const
bool   write(const QVariant & value) const

QVariant   read(const QObject * object, const QString & name)
QVariant   read(const QObject * object, const QString & name, QQmlContext * ctxt)
QVariant   read(const QObject * object, const QString & name, QQmlEngine * engine)
bool   write(QObject * object, const QString & name, const QVariant & value)
bool   write(QObject * object, const QString & name, const QVariant & value, QQmlContext * ctxt)
bool   write(QObject * object, const QString & name, const QVariant & value, QQmlEngine * engine)
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
