/*
 * $Id: QQmlComponent.qth 312 2014-06-09 05:56:42Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2014 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
Inherit     = QObject
QObject     = Yes
Version     = 0x050300
</CLASS>


<CODE>
#include <QtQml/QQmlComponent>


/*
 * QQmlComponent(QQmlEngine * engine, QObject * parent = 0)
 * QQmlComponent(QQmlEngine * engine, const QString & fileName, QObject * parent = 0)
 * QQmlComponent(QQmlEngine * engine, const QString & fileName, CompilationMode mode, QObject * parent = 0)
 * QQmlComponent(QQmlEngine * engine, const QUrl & url, QObject * parent = 0)
 * QQmlComponent(QQmlEngine * engine, const QUrl & url, CompilationMode mode, QObject * parent = 0)
 * virtual   ~QQmlComponent()
 */
HB_FUNC( QT_QQMLCOMPONENT )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QQmlEngine" ) )
   {
      __HB_RETPTRGC__( new QQmlComponent( hbqt_par_QQmlEngine( 1 ) ) );
   }
   else if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QQmlEngine" ) && hbqt_par_isDerivedFrom( 2, "QObject" ) )
   {
      __HB_RETPTRGC__( new QQmlComponent( hbqt_par_QQmlEngine( 1 ), hbqt_par_QObject( 2 ) ) );
   }
   else if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QQmlEngine" ) && HB_ISCHAR( 2 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QQmlComponent( hbqt_par_QQmlEngine( 1 ), hb_parstr_utf8( 2, &pText01, NULL ) ) );
      hb_strfree( pText01 );
   }
   else if( hb_pcount() == 3 && hbqt_par_isDerivedFrom( 1, "QQmlEngine" ) && HB_ISCHAR( 2 ) && hbqt_par_isDerivedFrom( 3, "QObject" ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QQmlComponent( hbqt_par_QQmlEngine( 1 ), hb_parstr_utf8( 2, &pText01, NULL ), hbqt_par_QObject( 3 ) ) );
      hb_strfree( pText01 );
   }
   else if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QQmlEngine" ) && hbqt_par_isDerivedFrom( 2, "QUrl" ) )
   {
      __HB_RETPTRGC__( new QQmlComponent( hbqt_par_QQmlEngine( 1 ), *hbqt_par_QUrl( 2 ) ) );
   }
   else if( hb_pcount() == 3 && hbqt_par_isDerivedFrom( 1, "QQmlEngine" ) && hbqt_par_isDerivedFrom( 2, "QUrl" ) && hbqt_par_isDerivedFrom( 3, "QObject" ) )
   {
      __HB_RETPTRGC__( new QQmlComponent( hbqt_par_QQmlEngine( 1 ), *hbqt_par_QUrl( 2 ), hbqt_par_QObject( 3 ) ) );
   }
   else
   {
      hb_errRT_BASE( EG_ARG, 9999, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
   }
}
</CODE>

<ENUMS>
enum   CompilationMode { PreferSynchronous, Asynchronous }
enum   Status { Null, Ready, Loading, Error }
</ENUMS>

<PROTOS>
virtual QObject *   beginCreate(QQmlContext * publicContext)
virtual void   completeCreate()
virtual QObject *   create(QQmlContext * context = 0)
void   create(QQmlIncubator & incubator, QQmlContext * context = 0, QQmlContext * forContext = 0)
QQmlContext *   creationContext() const
QList<QQmlError>   errors() const
bool   isError() const
bool   isLoading() const
bool   isNull() const
bool   isReady() const
qreal   progress() const
Status   status() const
QUrl   url() const
</PROTOS>

<SLOTS>
void   loadUrl(const QUrl & url)
void   loadUrl(const QUrl & url, CompilationMode mode)
void   setData(const QByteArray & data, const QUrl & url)
</SLOTS>

<SIGNALS>
void   progressChanged(qreal progress)
void   statusChanged(QQmlComponent::Status status)
</SIGNALS>
