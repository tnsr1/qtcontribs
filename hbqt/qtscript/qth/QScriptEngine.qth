/*
 * $Id: QScriptEngine.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>

Inherit     = QObject
QObject     = Yes
Version     =

</CLASS>


<CODE>
#include <QtScript/QScriptEngine>


/*
 * QScriptEngine ()
 * QScriptEngine ( QObject * parent )
 * virtual	~QScriptEngine ()
 */
HB_FUNC( QT_QSCRIPTENGINE )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QOBJECT" ) )
   {
      __HB_RETPTRGC__( new QScriptEngine( hbqt_par_QObject( 1 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QScriptEngine() );
   }
}
</CODE>

<ENUMS>
typedef FunctionSignature
typedef FunctionWithArgSignature
enum QObjectWrapOption { ExcludeChildObjects, ExcludeSuperClassMethods, ExcludeSuperClassProperties, ExcludeSuperClassContents, ..., SkipMethodsInEnumeration }
flags QObjectWrapOptions
enum ValueOwnership { QtOwnership, ScriptOwnership, AutoOwnership }
</ENUMS>


<PROTOS>
void abortEvaluation ( const QScriptValue & result = QScriptValue() )
QScriptEngineAgent * agent () const
QStringList availableExtensions () const
void clearExceptions ()
void collectGarbage ()
QScriptContext * currentContext () const
QScriptValue defaultPrototype ( int metaTypeId ) const
QScriptValue evaluate ( const QString & program, const QString & fileName = QString(), int lineNumber = 1 )
QScriptValue evaluate ( const QScriptProgram & program )
// T fromScriptValue ( const QScriptValue & value )
QScriptValue globalObject () const
bool hasUncaughtException () const
QScriptValue importExtension ( const QString & extension )
QStringList importedExtensions () const
void installTranslatorFunctions ( const QScriptValue & object = QScriptValue() )
bool isEvaluating () const
QScriptValue newArray ( uint length = 0 )
QScriptValue newDate ( qsreal value )
QScriptValue newDate ( const QDateTime & value )
// QScriptValue newFunction ( FunctionSignature fun, int length = 0 )
// QScriptValue newFunction ( FunctionSignature fun, const QScriptValue & prototype, int length = 0 )
QScriptValue newObject ()
QScriptValue newObject ( QScriptClass * scriptClass, const QScriptValue & data = QScriptValue() )
QScriptValue newQMetaObject ( const QMetaObject * metaObject, const QScriptValue & ctor = QScriptValue() )
QScriptValue newQObject ( QObject * object, ValueOwnership ownership = QtOwnership, const QObjectWrapOptions & options = 0 )
QScriptValue newQObject ( const QScriptValue & scriptObject, QObject * qtObject, ValueOwnership ownership = QtOwnership, const QObjectWrapOptions & options = 0 )
QScriptValue newRegExp ( const QRegExp & regexp )
QScriptValue newRegExp ( const QString & pattern, const QString & flags )
QScriptValue newVariant ( const QVariant & value )
QScriptValue newVariant ( const QScriptValue & object, const QVariant & value )
QScriptValue nullValue ()
void popContext ()
int processEventsInterval () const
QScriptContext * pushContext ()
void reportAdditionalMemoryCost ( int size )
// QScriptValue scriptValueFromQMetaObject ()
void setAgent ( QScriptEngineAgent * agent )
void setDefaultPrototype ( int metaTypeId, const QScriptValue & prototype )
void setGlobalObject ( const QScriptValue & object )
void setProcessEventsInterval ( int interval )
QScriptValue toObject ( const QScriptValue & value )
QScriptValue toScriptValue ( const T & value )
QScriptString toStringHandle ( const QString & str )
QScriptValue uncaughtException () const
QStringList uncaughtExceptionBacktrace () const
int uncaughtExceptionLineNumber () const
QScriptValue undefinedValue ()

QScriptSyntaxCheckResult checkSyntax ( const QString & program )
</PROTOS>


<SLOTS>

</SLOTS>

<SIGNALS>
void signalHandlerException ( const QScriptValue & exception )
</SIGNALS>
