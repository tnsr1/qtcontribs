/*
 * $Id: QScriptEngineAgent.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>

Inherit     =
QObject     =
Version     =

</CLASS>


<CODE>
#include <QtScript/QScriptEngineAgent>


/*
 * QScriptEngineAgent ( QScriptEngine * engine )
 * virtual	~QScriptEngineAgent ()
 */
HB_FUNC( QT_QSCRIPTENGINEAGENT )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QSCRIPTENGINE" ) )
   {
      __HB_RETPTRGC__( new QScriptEngineAgent( hbqt_par_QScriptEngine( 1 ) ) );
   }
   else
   {
      hb_errRT_BASE( EG_ARG, 9999, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
   }
}
</CODE>

<ENUMS>
enum Extension { DebuggerInvocationRequest }
</ENUMS>


<PROTOS>
virtual void contextPop ()
virtual void contextPush ()
QScriptEngine * engine () const
virtual void exceptionCatch ( qint64 scriptId, const QScriptValue & exception )
virtual void exceptionThrow ( qint64 scriptId, const QScriptValue & exception, bool hasHandler )
virtual QVariant extension ( Extension extension, const QVariant & argument = QVariant() )
virtual void functionEntry ( qint64 scriptId )
virtual void functionExit ( qint64 scriptId, const QScriptValue & returnValue )
virtual void positionChange ( qint64 scriptId, int lineNumber, int columnNumber )
virtual void scriptLoad ( qint64 id, const QString & program, const QString & fileName, int baseLineNumber )
virtual void scriptUnload ( qint64 id )
virtual bool supportsExtension ( Extension extension ) const
</PROTOS>


<SLOTS>

</SLOTS>

<SIGNALS>
</SIGNALS>
