/*
 * $Id: QsciScintilla.qth 471 2019-04-04 23:42:20Z bedipritpal $
 */

/*
 * Harbour Project source code:
 * QT Source Generator for Harbour
 *
 * Copyright 2009-2010 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */
/*----------------------------------------------------------------------*/

              Header File to Generate QT Wrapper Sources


<CLASS>
QObject  = Yes
inherits = QAbstractScrollArea
</CLASS>

<CODE>

#include "qsci/qsciscintilla.h"
#include <QtCore/QStringList>


/*
 * QsciScintilla (QWidget *parent=0)
 * virtual ~QsciScintilla ()
 */
HB_FUNC( QT_QSCISCINTILLA )
{
   if( HB_ISOBJECT( 1 ) )
   {
      __HB_RETPTRGC__( new QsciScintilla( hbqt_par_QWidget( 1 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QsciScintilla() );
   }
}
</CODE>

<ENUMS>
enum { AiMaintain = 0x01, AiOpening = 0x02, AiClosing = 0x04 }
enum AnnotationDisplay { AnnotationHidden = ANNOTATION_HIDDEN, AnnotationStandard = ANNOTATION_STANDARD, AnnotationBoxed = ANNOTATION_BOXED }
enum AutoCompletionSource {
  AcsNone, AcsAll, AcsDocument, AcsAPIs
}
enum BraceMatch { NoBraceMatch, StrictBraceMatch, SloppyBraceMatch }
enum CallTipsStyle {
  CallTipsNone, CallTipsNoContext, CallTipsNoAutoCompletionContext, CallTipsContext
}
enum EdgeMode { EdgeNone = EDGE_NONE, EdgeLine = EDGE_LINE, EdgeBackground = EDGE_BACKGROUND }
enum EolMode { EolWindows = SC_EOL_CRLF, EolUnix = SC_EOL_LF, EolMac = SC_EOL_CR }
enum FoldStyle {
  NoFoldStyle, PlainFoldStyle, CircledFoldStyle,
  BoxedFoldStyle, CircledTreeFoldStyle, BoxedTreeFoldStyle
}
enum MarginType {
  SymbolMargin = SC_MARGIN_SYMBOL, SymbolMarginDefaultForegroundColor = SC_MARGIN_FORE, SymbolMarginDefaultBackgroundColor = SC_MARGIN_BACK,
  NumberMargin = SC_MARGIN_NUMBER, TextMargin = SC_MARGIN_TEXT, TextMarginRightJustified = SC_MARGIN_RTEXT
}
enum MarkerSymbol {
  Circle = SC_MARK_CIRCLE, Rectangle = SC_MARK_ROUNDRECT, RightTriangle = SC_MARK_ARROW,
  SmallRectangle = SC_MARK_SMALLRECT, RightArrow = SC_MARK_SHORTARROW, Invisible = SC_MARK_EMPTY,
  DownTriangle = SC_MARK_ARROWDOWN, Minus = SC_MARK_MINUS, Plus = SC_MARK_PLUS,
  VerticalLine = SC_MARK_VLINE, BottomLeftCorner = SC_MARK_LCORNER, LeftSideSplitter = SC_MARK_TCORNER,
  BoxedPlus = SC_MARK_BOXPLUS, BoxedPlusConnected = SC_MARK_BOXPLUSCONNECTED, BoxedMinus = SC_MARK_BOXMINUS,
  BoxedMinusConnected = SC_MARK_BOXMINUSCONNECTED, RoundedBottomLeftCorner = SC_MARK_LCORNERCURVE, LeftSideRoundedSplitter = SC_MARK_TCORNERCURVE,
  CircledPlus = SC_MARK_CIRCLEPLUS, CircledPlusConnected = SC_MARK_CIRCLEPLUSCONNECTED, CircledMinus = SC_MARK_CIRCLEMINUS,
  CircledMinusConnected = SC_MARK_CIRCLEMINUSCONNECTED, Background = SC_MARK_BACKGROUND, ThreeDots = SC_MARK_DOTDOTDOT,
  ThreeRightArrows = SC_MARK_ARROWS
}
enum WhitespaceVisibility { WsInvisible = SCWS_INVISIBLE, WsVisible = SCWS_VISIBLEALWAYS, WsVisibleAfterIndent = SCWS_VISIBLEAFTERINDENT }
enum WrapMode { WrapNone = SC_WRAP_NONE, WrapWord = SC_WRAP_WORD, WrapCharacter = SC_WRAP_CHAR }
enum WrapVisualFlag { WrapFlagNone, WrapFlagByText, WrapFlagByBorder }

</ENUMS>

<PROTOS>
void SendScintilla (unsigned int msg, unsigned long wParam, const char * lParam ) const
void SendScintilla (unsigned int msg, unsigned long wParam, unsigned long lParam ) const
void SendScintilla ( unsigned int msg, long wParam ) const
# virtual QStringList apiContext (int pos, int &context_start, int &last_word_start)
void annotate (int line, const QString &text, int style)
void annotate (int line, const QString &text, const QsciStyle &style)
void annotate (int line, const QsciStyledText &text)
void annotate (int line, const QList< QsciStyledText > &text)
QString annotation (int line) const
AnnotationDisplay annotationDisplay () const
void clearAnnotations (int line=-1)
bool autoCompletionCaseSensitivity () const
bool autoCompletionFillupsEnabled () const
bool autoCompletionReplaceWord () const
bool autoCompletionShowSingle () const
AutoCompletionSource autoCompletionSource () const
int autoCompletionThreshold () const
bool autoIndent () const
bool backspaceUnindents () const
void beginUndoAction ()
BraceMatch braceMatching () const
CallTipsStyle callTipsStyle () const
int callTipsVisible () const
void cancelList ()
bool caseSensitive () const
void clearFolds ()
void clearRegisteredImages ()
QColor color () const
void convertEols (EolMode mode)
QsciDocument document () const
void endUndoAction ()
QColor edgeColor () const
int edgeColumn () const
EdgeMode edgeMode () const
void setFont (const QFont &f)
EolMode eolMode () const
bool eolVisibility () const
virtual bool findFirst (const QString &expr, bool re, bool cs, bool wo, bool wrap, bool forward=true, int line=-1, int index=-1, bool show=true)
virtual bool findNext ()
int firstVisibleLine () const
FoldStyle folding () const
void getCursorPosition (int *line, int *index) const
void getSelection (int *lineFrom, int *indexFrom, int *lineTo, int *indexTo) const
bool hasSelectedText () const
int indentation (int line) const
bool indentationGuides () const
bool indentationsUseTabs () const
int indentationWidth () const
bool isCallTipActive () const
bool isListActive () const
bool isModified () const
bool isReadOnly () const
bool isRedoAvailable () const
bool isUndoAvailable () const
bool isUtf8 () const
bool isWordCharacter (char ch) const
int lineAt (const QPoint &pos) const
void lineIndexFromPosition (int position, int *line, int *index) const
int lineLength (int line) const
int lines () const
int length () const
QsciLexer * lexer () const
bool marginLineNumbers (int margin) const
int marginMarkerMask (int margin) const
bool marginSensitivity (int margin) const
MarginType marginType (int margin) const
int marginWidth (int margin) const
## int markerDefine (MarkerSymbol sym, int mnr=-1)
int markerDefine (char ch, int mnr=-1)
int markerDefine (const QPixmap &pm, int mnr=-1)
int markerAdd (int linenr, int mnr)
unsigned markersAtLine (int linenr) const
void markerDelete (int linenr, int mnr=-1)
void markerDeleteAll (int mnr=-1)
void markerDeleteHandle (int mhandle)
int markerLine (int mhandle) const
int markerFindNext (int linenr, unsigned mask) const
int markerFindPrevious (int linenr, unsigned mask) const
QColor paper () const
int positionFromLineIndex (int line, int index) const
bool read (QIODevice *io)
virtual void recolor (int start=0, int end=-1)
void registerImage (int id, const QPixmap &pm)
virtual void replace (const QString &replaceStr)
void resetFoldMarginColors ()
void setFoldMarginColors (const QColor &fore, const QColor &back)
void setAnnotationDisplay (AnnotationDisplay display)
void setAutoCompletionFillupsEnabled (bool enabled)
void setAutoCompletionFillups (const char *fillups)
void setAutoCompletionWordSeparators (const QStringList &separators)
void setCallTipsBackgroundColor (const QColor &col)
void setCallTipsForegroundColor (const QColor &col)
void setCallTipsHighlightColor (const QColor &col)
void setCallTipsStyle (CallTipsStyle style)
void setCallTipsVisible (int nr)
void setDocument (const QsciDocument &document)
void setEdgeColor (const QColor &col)
void setEdgeColumn (int colnr)
void setEdgeMode (EdgeMode mode)
void setMarginText (int line, const QString &text, int style)
void setMarginText (int line, const QString &text, const QsciStyle &style)
void setMarginText (int line, const QsciStyledText &text)
void setMarginText (int line, const QList< QsciStyledText > &text)
void setMarginType (int margin, MarginType type)
void clearMarginText (int line=-1)
void setMarkerBackgroundColor (const QColor &col, int mnr=-1)
void setMarkerForegroundColor (const QColor &col, int mnr=-1)
void setMatchedBraceBackgroundColor (const QColor &col)
void setMatchedBraceForegroundColor (const QColor &col)
void setUnmatchedBraceBackgroundColor (const QColor &col)
void setUnmatchedBraceForegroundColor (const QColor &col)
void setWrapVisualFlags (WrapVisualFlag eflag, WrapVisualFlag sflag=WrapFlagNone, int sindent=0)
QString selectedText () const
bool selectionToEol () const
void setSelectionToEol (bool filled)
void showUserList (int id, const QStringList &list)
QsciCommandSet * standardCommands () const
bool tabIndents () const
int tabWidth () const
QString text () const
QString text (int line) const
int textHeight (int linenr) const
WhitespaceVisibility whitespaceVisibility () const
QString wordAtPoint (const QPoint &point) const
const char * wordCharacters () const
WrapMode wrapMode () const
bool write (QIODevice *io) const
</PROTOS>

<SLOTS>
virtual void append (const QString &text)
virtual void autoCompleteFromAll ()
virtual void autoCompleteFromAPIs ()
virtual void autoCompleteFromDocument ()
virtual void callTip ()
virtual void clear ()
virtual void copy ()
virtual void cut ()
virtual void ensureCursorVisible ()
virtual void ensureLineVisible (int line)
virtual void foldAll (bool children=false)
virtual void foldLine (int line)
virtual void indent (int line)
virtual void insert (const QString &text)
virtual void insertAt (const QString &text, int line, int index)
virtual void moveToMatchingBrace ()
virtual void paste ()
virtual void redo ()
virtual void removeSelectedText ()
virtual void resetSelectionBackgroundColor ()
virtual void resetSelectionForegroundColor ()
virtual void selectAll (bool select=true)
virtual void selectToMatchingBrace ()
virtual void setAutoCompletionCaseSensitivity (bool cs)
virtual void setAutoCompletionReplaceWord (bool replace)
virtual void setAutoCompletionShowSingle (bool single)
virtual void setAutoCompletionSource (AutoCompletionSource source)
virtual void setAutoCompletionThreshold (int thresh)
virtual void setAutoIndent (bool autoindent)
virtual void setBraceMatching (BraceMatch bm)
virtual void setBackspaceUnindents (bool unindent)
virtual void setCaretForegroundColor (const QColor &col)
virtual void setCaretLineBackgroundColor (const QColor &col)
virtual void setCaretLineVisible (bool enable)
virtual void setCaretWidth (int width)
virtual void setColor (const QColor &c)
virtual void setCursorPosition (int line, int index)
virtual void setEolMode (EolMode mode)
virtual void setEolVisibility (bool visible)
virtual void setFolding (FoldStyle fold, int margin=2)
virtual void setIndentation (int line, int indentation)
virtual void setIndentationGuides (bool enable)
virtual void setIndentationGuidesBackgroundColor (const QColor &col)
virtual void setIndentationGuidesForegroundColor (const QColor &col)
virtual void setIndentationsUseTabs (bool tabs)
virtual void setIndentationWidth (int width)
virtual void setLexer (QsciLexer *lexer=0)
virtual void setMarginsBackgroundColor (const QColor &col)
virtual void setMarginsFont (const QFont &f)
virtual void setMarginsForegroundColor (const QColor &col)
virtual void setMarginLineNumbers (int margin, bool lnrs)
virtual void setMarginMarkerMask (int margin, int mask)
virtual void setMarginSensitivity (int margin, bool sens)
virtual void setMarginWidth (int margin, int width)
virtual void setMarginWidth (int margin, const QString &s)
virtual void setModified (bool m)
virtual void setPaper (const QColor &c)
virtual void setReadOnly (bool ro)
virtual void setSelection (int lineFrom, int indexFrom, int lineTo, int indexTo)
virtual void setSelectionBackgroundColor (const QColor &col)
virtual void setSelectionForegroundColor (const QColor &col)
virtual void setTabIndents (bool indent)
virtual void setTabWidth (int width)
virtual void setText (const QString &text)
virtual void setUtf8 (bool cp)
virtual void setWhitespaceVisibility (WhitespaceVisibility mode)
virtual void setWrapMode (WrapMode mode)
virtual void undo ()
virtual void unindent (int line)
virtual void zoomIn (int range)
virtual void zoomIn ()
virtual void zoomOut (int range)
virtual void zoomOut ()
virtual void zoomTo (int size)
</SLOTS>

<SIGNALS>
void cursorPositionChanged (int line, int pos)
void copyAvailable (bool yes)
void linesChanged ()
void marginClicked (int margin, int line, Qt::KeyboardModifiers state)
void modificationAttempted ()
void modificationChanged (bool m)
void selectionChanged ()
void textChanged ()
void userListActivated (int id, const QString &string)
</SIGNALS>

<VARIABLES>
</VARIABLES>
