/*
 * $Id: QsciLexerFlagship.qth 400 2015-02-02 08:27:21Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2010 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
Inherits = QsciLexer
Folder   = hbqscintilla
</CLASS>

<CODE>
#include <qsci/qscilexerflagship.h>
#include <QtCore/QStringList>


/*
 * QsciLexerFlagship (QObject *parent=0, bool caseInsensitiveKeywords=false)
 * virtual ~QsciLexerFlagship ()
 *
 */
HB_FUNC( QT_QSCILEXERFLAGSHIP )
{
   if( hb_pcount() == 1 && HB_ISOBJECT( 1 ) )
   {
      __HB_RETPTRGC__( new QsciLexerFlagship( hbqt_par_QObject( 1 ) ) );
   }
   else if( hb_pcount() == 1 && HB_ISLOG( 1 ) )
   {
      __HB_RETPTRGC__( new QsciLexerFlagship( 0, hb_parl( 1 ) ) );
   }
   else if( hb_pcount() == 2 && HB_ISOBJECT( 1 ) && HB_ISLOG( 2 ) )
   {
      __HB_RETPTRGC__( new QsciLexerFlagship( hbqt_par_QObject( 1 ), hb_parl( 2 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QsciLexerFlagship() );
   }
}
</CODE>

<ENUMS>
enum {
  Default = 0, Comment = 1, CommentLine = 2,
  CommentDoc = 3, Number = 4, Keyword = 5,
  DoubleQuotedString = 6, SingleQuotedString = 7, UUID = 8,
  PreProcessor = 9, Operator = 10, Identifier = 11,
  UnclosedString = 12, VerbatimString = 13, Regex = 14,
  CommentLineDoc = 15, KeywordSet2 = 16, CommentDocKeyword = 17,
  CommentDocKeywordError = 18, GlobalClass = 19
}
</ENUMS>

<PROTOS>
const char * language () const
const char * lexer () const
QStringList autoCompletionWordSeparators () const
const char * blockEnd (int *style=0) const
const char * blockStart (int *style=0) const
const char * blockStartKeyword (int *style=0) const
int braceStyle () const
const char * wordCharacters () const
QColor defaultColor (int style) const
bool defaultEolFill (int style) const
QFont defaultFont (int style) const
QColor defaultPaper (int style) const
const char * keywords (int set) const
QString description (int style) const
void refreshProperties ()
bool foldAtElse () const
bool foldComments () const
bool foldCompact () const
bool foldPreprocessor () const
bool stylePreprocessor () const
void setDollarsAllowed (bool allowed)
bool dollarsAllowed () const
</PROTOS>

<SLOTS>
virtual void setFoldAtElse (bool fold)
virtual void setFoldComments (bool fold)
virtual void setFoldCompact (bool fold)
virtual void setFoldPreprocessor (bool fold)
virtual void setStylePreprocessor (bool style)
</SLOTS>

<SIGNALS>
</SIGNALS>
