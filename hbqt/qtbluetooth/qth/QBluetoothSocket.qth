/*
 * $Id: QBluetoothSocket.qth 288 2014-04-11 02:00:30Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2014 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = yes
Inherit     = QIODevice
Type        =
New         =
Version     = 0x050200
</CLASS>

<CODE>
#include <QtBluetooth/QBluetoothSocket>

/*
 * QBluetoothSocket(QBluetoothServiceInfo::Protocol socketType, QObject * parent = 0)
 * QBluetoothSocket(QObject * parent = 0)
 * virtual   ~QBluetoothSocket()
 */
HB_FUNC( QT_QBLUETOOTHSOCKET )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QOBJECT" ) )
   {
      __HB_RETPTRGC__( new QBluetoothSocket( hbqt_par_QObject( 1 ) ) );
   }
   else if( hb_pcount() == 1 && HB_ISNUM( 1 ) )
   {
      __HB_RETPTRGC__( new QBluetoothSocket( ( QBluetoothServiceInfo::Protocol ) hb_parni( 1 ) ) );
   }
   else if( hb_pcount() == 2 && HB_ISNUM( 1 ) && hbqt_par_isDerivedFrom( 2, "QOBJECT" ) )
   {
      __HB_RETPTRGC__( new QBluetoothSocket( ( QBluetoothServiceInfo::Protocol ) hb_parni( 1 ), hbqt_par_QObject( 2 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QBluetoothSocket() );
   }
}
</CODE>

<ENUMS>
enum   SocketError { UnknownSocketError, NoSocketError, HostNotFoundError, ServiceNotFoundError, ..., OperationError }
enum   SocketState { UnconnectedState, ServiceLookupState, ConnectingState, ConnectedState, ..., ListeningState }
</ENUMS>

<PROTOS>
void   abort()
void   connectToService(const QBluetoothServiceInfo & service, QIODevice::OpenMode openMode = QIODevice::ReadWrite)
void   connectToService(const QBluetoothAddress & address, const QBluetoothUuid & uuid, QIODevice::OpenMode openMode = QIODevice::ReadWrite)
void   connectToService(const QBluetoothAddress & address, quint16 port, QIODevice::OpenMode openMode = QIODevice::ReadWrite)
void   disconnectFromService()
SocketError   error() const
QString   errorString() const
QBluetoothAddress   localAddress() const
QString   localName() const
quint16   localPort() const
QBluetoothAddress   peerAddress() const
QString   peerName() const
quint16   peerPort() const
bool   setSocketDescriptor(int socketDescriptor, QBluetoothServiceInfo::Protocol socketType, QBluetoothSocket::SocketState socketState = ConnectedState, QIODevice::OpenMode openMode = ReadWrite)
int   socketDescriptor() const
QBluetoothServiceInfo::Protocol   socketType() const
SocketState   state() const

virtual qint64   bytesAvailable() const
virtual qint64   bytesToWrite() const
virtual bool   canReadLine() const
virtual void   close()
virtual bool   isSequential() const
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
void   connected()
void   disconnected()
void   error(QBluetoothSocket::SocketError error)
void   stateChanged(QBluetoothSocket::SocketState state)
</SIGNALS>

<VARIABLES>
</VARIABLES>

