/*
 * $Id: QBluetoothDeviceInfo.qth 288 2014-04-11 02:00:30Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2014 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     =
Inherit     =
Type        =
New         =
Version     = 0x050200
</CLASS>

<CODE>
#include <QtBluetooth/QBluetoothDeviceInfo>
#include <QtBluetooth/QBluetoothAddress>
#include <QtBluetooth/QBluetoothUuid>

/*
 * QBluetoothDeviceInfo()
 * QBluetoothDeviceInfo(const QBluetoothAddress & address, const QString & name, quint32 classOfDevice)
 * QBluetoothDeviceInfo(const QBluetoothDeviceInfo & other)
 * ~QBluetoothDeviceInfo()
 */
HB_FUNC( QT_QBLUETOOTHDEVICEINFO )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QBluetoothDeviceInfo" ) )
   {
      __HB_RETPTRGC__( new QBluetoothDeviceInfo( * hbqt_par_QBluetoothDeviceInfo( 1 ) ) );
   }
   else if( hb_pcount() == 3 && hbqt_par_isDerivedFrom( 1, "QBluetoothAddress" ) && HB_ISCHAR( 2 ) && HB_ISNUM( 3 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QBluetoothDeviceInfo( * hbqt_par_QBluetoothAddress( 1 ), hb_parstr_utf8( 2, &pText01, NULL ), hb_parni( 3 ) ) );
      hb_strfree( pText01 );
   }
   else
   {
      __HB_RETPTRGC__( new QBluetoothDeviceInfo() );
   }
}
</CODE>

<ENUMS>
enum   DataCompleteness { DataComplete, DataIncomplete, DataUnavailable }
enum   MajorDeviceClass { MiscellaneousDevice, ComputerDevice, PhoneDevice, LANAccessDevice, ..., UncategorizedDevice }
enum   MinorAudioVideoClass { UncategorizedAudioVideoDevice, WearableHeadsetDevice, HandsFreeDevice, Microphone, ..., GamingDevice }
enum   MinorComputerClass { UncategorizedComputer, DesktopComputer, ServerComputer, LaptopComputer, ..., WearableComputer }
enum   MinorHealthClass { UncategorizedHealthDevice, HealthBloodPressureMonitor, HealthThermometer, HealthWeightScale, ..., HealthStepCounter }
enum   MinorImagingClass { UncategorizedImagingDevice, ImageDisplay, ImageCamera, ImageScanner, ImagePrinter }
enum   MinorMiscellaneousClass { UncategorizedMiscellaneous }
enum   MinorNetworkClass { NetworkFullService, NetworkLoadFactorOne, NetworkLoadFactorTwo, NetworkLoadFactorThree, ..., NetworkNoService }
enum   MinorPeripheralClass { UncategorizedPeripheral, KeyboardPeripheral, PointingDevicePeripheral, KeyboardWithPointingDevicePeripheral, ..., CardReaderPeripheral }
enum   MinorPhoneClass { UncategorizedPhone, CellularPhone, CordlessPhone, SmartPhone, WiredModemOrVoiceGatewayPhone, CommonIsdnAccessPhone }
enum   MinorToyClass { UncategorizedToy, ToyRobot, ToyVehicle, ToyDoll, ToyController, ToyGame }
enum   MinorWearableClass { UncategorizedWearableDevice, WearableWristWatch, WearablePager, WearableJacket, WearableHelmet, WearableGlasses }
enum   ServiceClass { NoService, PositioningService, NetworkingService, RenderingService, ..., AllServices }
flags   ServiceClasses
</ENUMS>

<PROTOS>
QBluetoothAddress   address() const
bool   isCached() const
bool   isValid() const
QBluetoothDeviceInfo::MajorDeviceClass   majorDeviceClass() const
quint8   minorDeviceClass() const
QString   name() const
qint16   rssi() const
ServiceClasses   serviceClasses() const
QList<QBluetoothUuid>   serviceUuids(QBluetoothDeviceInfo::DataCompleteness * completeness = 0) const
QBluetoothDeviceInfo::DataCompleteness   serviceUuidsCompleteness() const
void   setCached(bool cached)
void   setRssi(qint16 signal)
void   setServiceUuids(const QList<QBluetoothUuid> & uuids, QBluetoothDeviceInfo::DataCompleteness completeness)
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>

<VARIABLES>
</VARIABLES>

