/*
 * $Id: QGLContext.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>

Inherit     =
QObject     = no

</CLASS>


<CODE>
#include <QtOpenGL/QGLContext>


/*
 * QGLContext ( const QGLFormat & format )
 * virtual ~QGLContext ()
 */
HB_FUNC( QT_QGLCONTEXT )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QGLFORMAT" ) )
   {
      __HB_RETPTRGC__( new QGLContext( *hbqt_par_QGLFormat( 1 ) ) );
   }
   else
   {
      hb_errRT_BASE( EG_ARG, 9999, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
   }
}
</CODE>

<ENUMS>
enum BindOption { NoBindOption, InvertedYBindOption, MipmapBindOption, PremultipliedAlphaBindOption, LinearFilteringBindOption, DefaultBindOption }
flags BindOptions
</ENUMS>

<PROTOS>
GLuint bindTexture ( const QImage & image, GLenum target, GLint format, BindOptions options )
GLuint bindTexture ( const QString & fileName )
GLuint bindTexture ( const QImage & image, GLenum target = GL_TEXTURE_2D, GLint format = GL_RGBA )
GLuint bindTexture ( const QPixmap & pixmap, GLenum target = GL_TEXTURE_2D, GLint format = GL_RGBA )
GLuint bindTexture ( const QPixmap & pixmap, GLenum target, GLint format, BindOptions options )
virtual bool create ( const QGLContext * shareContext = 0 )
void deleteTexture ( GLuint id )
QPaintDevice * device () const
virtual void doneCurrent ()
void drawTexture ( const QRectF & target, GLuint textureId, GLenum textureTarget = GL_TEXTURE_2D )
void drawTexture ( const QPointF & point, GLuint textureId, GLenum textureTarget = GL_TEXTURE_2D )
QGLFormat format () const
void * getProcAddress ( const QString & proc ) const
bool isSharing () const
bool isValid () const
virtual void makeCurrent ()
QColor overlayTransparentColor () const
QGLFormat requestedFormat () const
void reset ()
void setFormat ( const QGLFormat & format )
virtual void swapBuffers () const
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
