/*
 * $Id: QGLPixelBuffer.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>

Inherit     = QPaintDevice
QObject     = no

</CLASS>


<CODE>
#include <QtOpenGL/QGLPixelBuffer>


/*
 * QGLPixelBuffer ( const QSize & size, const QGLFormat & format = QGLFormat::defaultFormat(), QGLWidget * shareWidget = 0 )
 * QGLPixelBuffer ( int width, int height, const QGLFormat & format = QGLFormat::defaultFormat(), QGLWidget * shareWidget = 0 )
 * virtual ~QGLPixelBuffer ()
 */
HB_FUNC( QT_QGLPIXELBUFFER )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QSIZE" ) )
   {
      __HB_RETPTRGC__( new QGLPixelBuffer( *hbqt_par_QSize( 1 ) ) );
   }
   else
   {
      hb_errRT_BASE( EG_ARG, 9999, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
   }
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
GLuint bindTexture ( const QImage & image, GLenum target = GL_TEXTURE_2D )
GLuint bindTexture ( const QPixmap & pixmap, GLenum target = GL_TEXTURE_2D )
GLuint bindTexture ( const QString & fileName )
bool bindToDynamicTexture ( GLuint texture_id )
void deleteTexture ( GLuint texture_id )
bool doneCurrent ()
void drawTexture ( const QRectF & target, GLuint textureId, GLenum textureTarget = GL_TEXTURE_2D )
void drawTexture ( const QPointF & point, GLuint textureId, GLenum textureTarget = GL_TEXTURE_2D )
QGLFormat format () const
GLuint generateDynamicTexture () const
//Qt::HANDLE handle () const
bool isValid () const
bool makeCurrent ()
void releaseFromDynamicTexture ()
QSize size () const
QImage toImage () const
void updateDynamicTexture ( GLuint texture_id ) const

virtual QPaintEngine * paintEngine () const

bool hasOpenGLPbuffers ()
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
