/*
 * $Id: QGLWidget.qth 163 2013-02-05 02:38:40Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>

Inherit     = QWidget
QObject     = yes

</CLASS>


<CODE>
#include <QtOpenGL/QGLWidget>


/*
 * QGLWidget ( QWidget * parent = 0, const QGLWidget * shareWidget = 0, Qt::WindowFlags f = 0 )
 * QGLWidget ( QGLContext * context, QWidget * parent = 0, const QGLWidget * shareWidget = 0, Qt::WindowFlags f = 0 )
 * QGLWidget ( const QGLFormat & format, QWidget * parent = 0, const QGLWidget * shareWidget = 0, Qt::WindowFlags f = 0 )
 * ~QGLWidget ()
 */
HB_FUNC( QT_QGLWIDGET )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QWIDGET" ) )
   {
      __HB_RETPTRGC__( new QGLWidget( hbqt_par_QWidget( 1 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QGLWidget() );
   }
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
GLuint bindTexture ( const QImage & image, GLenum target = GL_TEXTURE_2D, GLint format = GL_RGBA )
GLuint bindTexture ( const QPixmap & pixmap, GLenum target = GL_TEXTURE_2D, GLint format = GL_RGBA )
GLuint bindTexture ( const QImage & image, GLenum target, GLint format, QGLContext::BindOptions options )
GLuint bindTexture ( const QPixmap & pixmap, GLenum target, GLint format, QGLContext::BindOptions options )
GLuint bindTexture ( const QString & fileName )
const QGLColormap & colormap () const
const QGLContext * context () const                                       [*R=9*]
void deleteTexture ( GLuint id )
void doneCurrent ()
bool doubleBuffer () const
void drawTexture ( const QRectF & target, GLuint textureId, GLenum textureTarget = GL_TEXTURE_2D )
void drawTexture ( const QPointF & point, GLuint textureId, GLenum textureTarget = GL_TEXTURE_2D )
QGLFormat format () const
QImage grabFrameBuffer ( bool withAlpha = false )
bool isSharing () const
bool isValid () const
void makeCurrent ()
void makeOverlayCurrent ()
const QGLContext * overlayContext () const                                [*R=9*]
void qglClearColor ( const QColor & c ) const
void qglColor ( const QColor & c ) const
QPixmap renderPixmap ( int w = 0, int h = 0, bool useContext = false )
void renderText ( int x, int y, const QString & str, const QFont & font = QFont() )
void renderText ( double x, double y, double z, const QString & str, const QFont & font = QFont() )
void setColormap ( const QGLColormap & cmap )
void setMouseTracking ( bool enable )
void swapBuffers ()

QImage convertToGLFormat ( const QImage & img )

</PROTOS>

<SLOTS>
virtual void updateGL ()
virtual void updateOverlayGL ()
</SLOTS>

<SIGNALS>
</SIGNALS>
