/*
 * $Id: QGLFormat.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>

Inherit     =
QObject     = no

</CLASS>


<CODE>
#include <QtOpenGL/QGLFormat>


/*
 * QGLFormat ()
 * QGLFormat ( QGL::FormatOptions options, int plane = 0 )
 * QGLFormat ( const QGLFormat & other )
 * ~QGLFormat ()
 */
HB_FUNC( QT_QGLFORMAT )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QGLFORMAT" ) )
   {
      __HB_RETPTRGC__( new QGLFormat( *hbqt_par_QGLFormat( 1 ) ) );
   }
   else if( hb_pcount() == 1 && HB_ISNUM( 1 ) )
   {
      __HB_RETPTRGC__( new QGLFormat( ( QGL::FormatOptions ) hb_parni( 1 ) ) );
   }
   else if( hb_pcount() == 2 && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) )
   {
      __HB_RETPTRGC__( new QGLFormat( ( QGL::FormatOptions ) hb_parni( 1 ), hb_parni( 2 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QGLFormat() );
   }
}
</CODE>

<ENUMS>
enum OpenGLContextProfile { NoProfile, CoreProfile, CompatibilityProfile }
enum OpenGLVersionFlag { OpenGL_Version_None, OpenGL_Version_1_1, OpenGL_Version_1_2, OpenGL_Version_1_3, ..., OpenGL_ES_Version_2_0 }
flags OpenGLVersionFlags
</ENUMS>

<PROTOS>
bool accum () const
int accumBufferSize () const
bool alpha () const
int alphaBufferSize () const
int blueBufferSize () const
bool depth () const
int depthBufferSize () const
bool directRendering () const
bool doubleBuffer () const
int greenBufferSize () const
bool hasOverlay () const
int majorVersion () const
int minorVersion () const
int plane () const
OpenGLContextProfile profile () const
int redBufferSize () const
bool rgba () const
bool sampleBuffers () const
int samples () const
void setAccum ( bool enable )
void setAccumBufferSize ( int size )
void setAlpha ( bool enable )
void setAlphaBufferSize ( int size )
void setBlueBufferSize ( int size )
void setDepth ( bool enable )
void setDepthBufferSize ( int size )
void setDirectRendering ( bool enable )
void setDoubleBuffer ( bool enable )
void setGreenBufferSize ( int size )
void setOption ( QGL::FormatOptions opt )
void setOverlay ( bool enable )
void setPlane ( int plane )
void setProfile ( OpenGLContextProfile profile )
void setRedBufferSize ( int size )
void setRgba ( bool enable )
void setSampleBuffers ( bool enable )
void setSamples ( int numSamples )
void setStencil ( bool enable )
void setStencilBufferSize ( int size )
void setStereo ( bool enable )
void setSwapInterval ( int interval )
void setVersion ( int major, int minor )
bool stencil () const
int stencilBufferSize () const
bool stereo () const
int swapInterval () const
bool testOption ( QGL::FormatOptions opt ) const

QGLFormat defaultFormat ()
QGLFormat defaultOverlayFormat ()
//QGLFormat fromPlatformWindowFormat ( const QPlatformWindowFormat & format )
bool hasOpenGL ()
bool hasOpenGLOverlays ()
OpenGLVersionFlags openGLVersionFlags ()
void setDefaultFormat ( const QGLFormat & f )
void setDefaultOverlayFormat ( const QGLFormat & f )
//QPlatformWindowFormat toPlatformWindowFormat ( const QGLFormat & format )

</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
