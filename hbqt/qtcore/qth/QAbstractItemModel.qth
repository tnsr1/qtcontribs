/*
 * $Id: QAbstractItemModel.qth 158 2013-02-01 21:39:40Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
Inherit     = QObject
Type        = Core
New         =
Constructor = no
</CLASS>

<SUBCLASS>
</SUBCLASS>

<CODE>
#include <QtCore/QSize>
#include <QtCore/QStringList>
#include <QtCore/QAbstractItemModel>


/*
 * QAbstractItemModel ( QObject * parent = 0 )
 * virtual ~QAbstractItemModel ()
 */

HB_FUNC( QT_QABSTRACTITEMMODEL )
{
}

</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
virtual QModelIndex buddy ( const QModelIndex & index ) const
virtual bool canFetchMore ( const QModelIndex & parent ) const
virtual int columnCount ( const QModelIndex & parent = QModelIndex() ) const = 0
virtual QVariant data ( const QModelIndex & index, int role = Qt::DisplayRole ) const = 0
virtual bool dropMimeData ( const QMimeData * data, Qt::DropAction action, int row, int column, const QModelIndex & parent )
virtual void fetchMore ( const QModelIndex & parent )
virtual Qt::ItemFlags flags ( const QModelIndex & index ) const
virtual bool hasChildren ( const QModelIndex & parent = QModelIndex() ) const
bool hasIndex ( int row, int column, const QModelIndex & parent = QModelIndex() ) const
virtual QVariant headerData ( int section, Qt::Orientation orientation, int role = Qt::DisplayRole ) const
virtual QModelIndex index ( int row, int column, const QModelIndex & parent = QModelIndex() ) const = 0
bool insertColumn ( int column, const QModelIndex & parent = QModelIndex() )
virtual bool insertColumns ( int column, int count, const QModelIndex & parent = QModelIndex() )
bool insertRow ( int row, const QModelIndex & parent = QModelIndex() )
virtual bool insertRows ( int row, int count, const QModelIndex & parent = QModelIndex() )
virtual QMap<int, QVariant> itemData ( const QModelIndex & index ) const
// virtual QModelIndexList match ( const QModelIndex & start, int role, const QVariant & value, int hits = 1, Qt::MatchFlags flags = Qt::MatchFlags( Qt::MatchStartsWith | Qt::MatchWrap ) ) const
// virtual QMimeData * mimeData ( const QModelIndexList & indexes ) const [*A=1*]
virtual QStringList mimeTypes () const
virtual QModelIndex parent ( const QModelIndex & index ) const = 0
bool removeColumn ( int column, const QModelIndex & parent = QModelIndex() )
virtual bool removeColumns ( int column, int count, const QModelIndex & parent = QModelIndex() )
bool removeRow ( int row, const QModelIndex & parent = QModelIndex() )
virtual bool removeRows ( int row, int count, const QModelIndex & parent = QModelIndex() )
virtual int rowCount ( const QModelIndex & parent = QModelIndex() ) const = 0
virtual bool setData ( const QModelIndex & index, const QVariant & value, int role = Qt::EditRole )
virtual bool setHeaderData ( int section, Qt::Orientation orientation, const QVariant & value, int role = Qt::EditRole )
virtual bool setItemData ( const QModelIndex & index, const QMap<int, QVariant> & roles )
void setSupportedDragActions ( Qt::DropActions actions )                       [*V=-0x040900*]
QModelIndex sibling ( int row, int column, const QModelIndex & index ) const
virtual void sort ( int column, Qt::SortOrder order = Qt::AscendingOrder )
virtual QSize span ( const QModelIndex & index ) const
Qt::DropActions supportedDragActions () const                                  [*V=-0x040900*]
virtual Qt::DropActions supportedDropActions () const
</PROTOS>

<SLOTS>
virtual void revert ()
virtual bool submit ()
</SLOTS>

<SIGNALS>
void columnsAboutToBeInserted ( const QModelIndex & parent, int start, int end )
void columnsAboutToBeRemoved ( const QModelIndex & parent, int start, int end )
void columnsInserted ( const QModelIndex & parent, int start, int end )
void columnsRemoved ( const QModelIndex & parent, int start, int end )
void dataChanged ( const QModelIndex & topLeft, const QModelIndex & bottomRight )
void headerDataChanged ( Qt::Orientation orientation, int first, int last )
void layoutAboutToBeChanged ()
void layoutChanged ()
void modelAboutToBeReset ()
void modelReset ()
void rowsAboutToBeInserted ( const QModelIndex & parent, int start, int end )
void rowsAboutToBeRemoved ( const QModelIndex & parent, int start, int end )
void rowsInserted ( const QModelIndex & parent, int start, int end )
void rowsRemoved ( const QModelIndex & parent, int start, int end )
</SIGNALS>

<VARIABLES>
</VARIABLES>
