/*
 * $Id: QDirIterator.qth 261 2013-11-12 21:34:53Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2013 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

; Header File to Generate Sources
;

<CLASS>
QObject     = no
</CLASS>

<CODE>
#include <QtCore/QDirIterator>


/*
 * QDirIterator(const QDir & dir, IteratorFlags flags = NoIteratorFlags)
 * QDirIterator(const QString & path, IteratorFlags flags = NoIteratorFlags)
 * QDirIterator(const QString & path, QDir::Filters filters, IteratorFlags flags = NoIteratorFlags)
 * QDirIterator(const QString & path, const QStringList & nameFilters, QDir::Filters filters = QDir::NoFilter, IteratorFlags flags = NoIteratorFlags)
 * ~QDirIterator()
 */
HB_FUNC( QT_QDIRITERATOR )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QDIR" ) )
   {
      __HB_RETPTRGC__( new QDirIterator( *hbqt_par_QDir( 1 ) ) );
   }
   else if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QDIR" ) && HB_ISNUM( 2 ) )
   {
      __HB_RETPTRGC__( new QDirIterator( *hbqt_par_QDir( 1 ), ( QDirIterator::IteratorFlag ) hb_parni( 2 ) ) );
   }
   else if( hb_pcount() == 1 && HB_ISCHAR( 1 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QDirIterator( hb_parstr_utf8( 1, &pText01, NULL ) ) );
      hb_strfree( pText01 );
   }
   else if( hb_pcount() == 2 && HB_ISCHAR( 1 ) && HB_ISNUM( 2 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QDirIterator( hb_parstr_utf8( 1, &pText01, NULL ), ( QDirIterator::IteratorFlag ) hb_parni( 2 ) ) );
      hb_strfree( pText01 );
   }
   else if( hb_pcount() >= 2 && HB_ISCHAR( 1 ) && hbqt_par_isDerivedFrom( 2, "QStringList" ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QDirIterator( hb_parstr_utf8( 1, &pText01, NULL ), *hbqt_par_QStringList( 2 ), HB_ISNUM( 3 ) ?  ( QDir::Filters ) hb_parni( 3 ) : QDir::NoFilter, ( QDirIterator::IteratorFlag ) hb_parni( 4 ) ) );
      hb_strfree( pText01 );
   }
}
</CODE>


<ENUMS>
enum    IteratorFlag { NoIteratorFlags, Subdirectories, FollowSymlinks }
flags   IteratorFlags
</ENUMS>

<PROTOS>
QFileInfo   fileInfo() const
QString     fileName() const
QString     filePath() const
bool        hasNext() const
QString     next()
QString     path() const
</PROTOS>

