/*
 * $Id: QTime.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Inherit     =
Type        = Core
New         =
Destructor  =
</CLASS>

<CODE>
#include <QtCore/QTime>


/* QTime ()
 * QTime ( int h, int m, int s = 0, int ms = 0 )
 */
HB_FUNC( QT_QTIME )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QTIME" ) )
   {
      __HB_RETPTRGC__( new QTime( *hbqt_par_QTime( 1 ) ) );
   }
   else if( hb_pcount() >= 2 && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) )
   {
      __HB_RETPTRGC__( new QTime( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QTime() );
   }
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
QTime addMSecs ( int ms ) const
QTime addSecs ( int s ) const
int elapsed () const
int hour () const
bool isNull () const
bool isValid () const
int minute () const
int msec () const
int msecsTo ( const QTime & t ) const
int restart ()
int second () const
int secsTo ( const QTime & t ) const
bool setHMS ( int h, int m, int s, int ms = 0 )
void start ()
QString toString ( const QString & format ) const
QString toString ( Qt::DateFormat format = Qt::TextDate ) const

QTime currentTime ()
QTime fromString ( const QString & string, Qt::DateFormat format = Qt::TextDate )
QTime fromString ( const QString & string, const QString & format )
bool isValid ( int h, int m, int s, int ms = 0 )
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
