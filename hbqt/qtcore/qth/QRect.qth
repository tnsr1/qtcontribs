/*
 * $Id: QRect.qth 410 2015-05-28 01:05:31Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Type        = PlainObject
New         =
</CLASS>


<CODE>
#include <QtCore/QRect>


/*
 * QRect ()
 * QRect ( const QPoint & topLeft, const QPoint & bottomRight )
 * QRect ( const QPoint & topLeft, const QSize & size )
 * QRect ( int x, int y, int width, int height )
 * ~QRect ()
 */
HB_FUNC( QT_QRECT )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QRECT" ) )
   {
      __HB_RETPTRGC__( new QRect( *hbqt_par_QRect( 1 ) ) );
   }
   else if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QPOINT" ) && hbqt_par_isDerivedFrom( 2, "QPOINT" ) )
   {
      __HB_RETPTRGC__( new QRect( *hbqt_par_QPoint( 1 ), *hbqt_par_QPoint( 2 ) ) );
   }
   else if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QPOINT" ) &&  hbqt_par_isDerivedFrom( 2, "QSIZE" ) )
   {
      __HB_RETPTRGC__( new QRect( *hbqt_par_QPoint( 1 ), *hbqt_par_QSize( 2 ) ) );
   }
   else if( hb_pcount() == 4 && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) && HB_ISNUM( 3 ) && HB_ISNUM( 4 ) )
   {
      __HB_RETPTRGC__( new QRect( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QRect() );
   }
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
void adjust ( int dx1, int dy1, int dx2, int dy2 )
QRect adjusted ( int dx1, int dy1, int dx2, int dy2 ) const
int bottom () const
QPoint bottomLeft () const
QPoint bottomRight () const
QPoint center () const
bool contains ( const QPoint & point, bool proper = false ) const
bool contains ( int x, int y, bool proper ) const
bool contains ( int x, int y ) const
bool contains ( const QRect & rectangle, bool proper = false ) const
void getCoords ( int * x1, int * y1, int * x2, int * y2 ) const
void getRect ( int * x, int * y, int * width, int * height ) const
int height () const
QRect intersected ( const QRect & rectangle ) const
bool intersects ( const QRect & rectangle ) const
bool isEmpty () const
bool isNull () const
bool isValid () const
int left () const
QRect marginsAdded(const QMargins & margins) const       [*V=0x050100*]
QRect marginsRemoved(const QMargins & margins) const     [*V=0x050100*]
void moveBottom ( int y )
void moveBottomLeft ( const QPoint & position )
void moveBottomRight ( const QPoint & position )
void moveCenter ( const QPoint & position )
void moveLeft ( int x )
void moveRight ( int x )
void moveTo ( int x, int y )
void moveTo ( const QPoint & position )
void moveTop ( int y )
void moveTopLeft ( const QPoint & position )
void moveTopRight ( const QPoint & position )
QRect normalized () const
int right () const
void setBottom ( int y )
void setBottomLeft ( const QPoint & position )
void setBottomRight ( const QPoint & position )
void setCoords ( int x1, int y1, int x2, int y2 )
void setHeight ( int height )
void setLeft ( int x )
void setRect ( int x, int y, int width, int height )
void setRight ( int x )
void setSize ( const QSize & size )
void setTop ( int y )
void setTopLeft ( const QPoint & position )
void setTopRight ( const QPoint & position )
void setWidth ( int width )
void setX ( int x )
void setY ( int y )
QSize size () const
int top () const
QPoint topLeft () const
QPoint topRight () const
void translate ( int dx, int dy )
void translate ( const QPoint & offset )
QRect translated ( int dx, int dy ) const
QRect translated ( const QPoint & offset ) const
QRect united ( const QRect & rectangle ) const
int width () const
int x () const
int y () const
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
