/*
 * $Id: QMimeData.qth 405 2015-02-17 05:41:40Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     =
Inherit     = QObject
Type        = Core
New         =
Destructor  =
</CLASS>

<CODE>
#include <QtCore/QMimeData>
#include <QtCore/QStringList>
#include <QtCore/QUrl>
#include <QtGui/QImage>

/* QMimeData ()
 * ~QMimeData ()
 */
HB_FUNC( QT_QMIMEDATA )
{
   __HB_RETPTRGC__( new QMimeData() );
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
void clear ()
QVariant colorData () const
QByteArray data ( const QString & mimeType ) const
virtual QStringList formats () const
bool hasColor () const
virtual bool hasFormat ( const QString & mimeType ) const
bool hasHtml () const
bool hasImage () const
bool hasText () const
bool hasUrls () const
QString html () const

//QVariant imageData () const
// Instead of QVariant HbQt returns QImage which for any practical case make sense.
// This is a Harbour extension.
QImage imageData () const {
   QMimeData * p = ( QMimeData * ) hbqt_par_ptr( 0 );
   if( p )
   {
      if( p->hasImage() )
      {
         hb_itemReturnRelease( hbqt_bindGetHbObject( NULL, new QImage( qvariant_cast< QImage >( p->imageData() ) ), "HB_QIMAGE", hbqt_del_QImage, HBQT_BIT_NONE | HBQT_BIT_OWNER ) );
      }
   }
}

void removeFormat ( const QString & mimeType )
void setColorData ( const QVariant & color )
void setData ( const QString & mimeType, const QByteArray & data )
void setHtml ( const QString & html )
void setImageData ( const QVariant & image )
void setText ( const QString & text )
void setUrls ( const QList<QUrl> & urls )
QString text () const
QList<QUrl> urls () const
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
