/*
 * $Id: QDataStream.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Inherit     = 
Type        = Core
New         =
Destructor  = 
</CLASS>

<CODE>
#include <QtCore/QDataStream>


/* QDataStream ()
 * QDataStream ( QIODevice * d )
 * QDataStream ( QByteArray * a, QIODevice::OpenMode mode )
 * QDataStream ( const QByteArray & a )
 * virtual ~QDataStream ()
 */
HB_FUNC( QT_QDATASTREAM )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QIODEVICE" ) )
   {
      __HB_RETPTRGC__( new QDataStream( hbqt_par_QIODevice( 1 ) ) );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QBYTEARRAY" ) )
   {
      __HB_RETPTRGC__( new QDataStream( *hbqt_par_QByteArray( 1 ) ) );
   }
   else if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QBYTEARRAY" ) && HB_ISNUM( 2 ) )
   {
      __HB_RETPTRGC__( new QDataStream( hbqt_par_QByteArray( 1 ), ( QIODevice::OpenMode ) hb_parni( 2 ) ) );
   }
   else 
   {
      __HB_RETPTRGC__( new QDataStream() );
   }
}
</CODE>

<ENUMS>
enum ByteOrder { BigEndian, LittleEndian }
enum Status { Ok, ReadPastEnd, ReadCorruptData }
enum Version { Qt_1_0, Qt_2_0, Qt_2_1, Qt_3_0, ..., Qt_4_5 }
</ENUMS>

<PROTOS>
bool atEnd () const
ByteOrder byteOrder () const
QIODevice * device () const
//QDataStream & readBytes ( char *& s, uint & l )
int readRawData ( char * s, int len )
void resetStatus ()
void setByteOrder ( ByteOrder bo )
void setDevice ( QIODevice * d )
void setStatus ( Status status )
void setVersion ( int v )
int skipRawData ( int len )
Status status () const
int version () const
//QDataStream & writeBytes ( const char * s, uint len )
int writeRawData ( const char * s, int len )
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
