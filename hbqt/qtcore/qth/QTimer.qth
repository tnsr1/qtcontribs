/*
 * $Id: QTimer.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
Inherit     = QObject
New         = pParent
</CLASS>

<CODE>
#include <QtCore/QTimer>


/*
 * QTimer ( QObject * parent = 0 )
 * ~QTimer ()
 */
HB_FUNC( QT_QTIMER )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QOBJECT" ) )
   {
      __HB_RETPTRGC__( new QTimer( hbqt_par_QObject( 1 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QTimer() );
   }         
}
</CODE>

<PROTOS>
int interval () const
bool isActive () const
bool isSingleShot () const
void setInterval ( int msec )
void setSingleShot ( bool singleShot )
int timerId () const

//   This will never work as per Harbour's implementation of Signal/slots, so commenting out - 27Jun2012
//void singleShot ( int msec, QObject * receiver, const char * member )
</PROTOS>

<SLOTS>
void start ()
void stop ()
void start ( int msec )
</SLOTS>

<SIGNALS>
void timeout ()
</SIGNALS>
