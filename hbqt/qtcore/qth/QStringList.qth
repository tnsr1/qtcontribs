/*
 * $Id: QStringList.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Inherit     = QList
Type        = Core
New         =
</CLASS>

<CODE>
#include <QtCore/QStringList>


/*
 * QStringList ()
 * QStringList ( const QString & str )
 * QStringList ( const QStringList & other )
 * QStringList ( const QList<QString> & other )
 */
HB_FUNC( QT_QSTRINGLIST )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QSTRINGLIST" ) )
   {
      __HB_RETPTRGC__( new QStringList( *hbqt_par_QStringList( 1 ) ) );
   }
   else if( hb_pcount() == 1 && HB_ISCHAR( 1 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QStringList( hb_parstr_utf8( 1, &pText01, NULL ) ) );
      hb_strfree( pText01 );
   }
   else
   {
      __HB_RETPTRGC__( new QStringList() );
   }
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
void append ( const QString & value )
//bool contains ( const QString & str, Qt::CaseSensitivity cs = Qt::CaseSensitive ) const
QStringList filter ( const QString & str, Qt::CaseSensitivity cs = Qt::CaseSensitive ) const
QStringList filter ( const QRegExp & rx ) const
int indexOf ( const QString & value, int from = 0 ) const
int indexOf ( const QRegExp & rx, int from = 0 ) const
int indexOf ( QRegExp & rx, int from = 0 ) const
QString join ( const QString & separator ) const
int lastIndexOf ( const QRegExp & rx, int from = -1 ) const
int lastIndexOf ( const QString & value, int from = -1 ) const
int lastIndexOf ( QRegExp & rx, int from = -1 ) const
int removeDuplicates ()
QStringList & replaceInStrings ( const QString & before, const QString & after, Qt::CaseSensitivity cs = Qt::CaseSensitive )
QStringList & replaceInStrings ( const QRegExp & rx, const QString & after )
void sort ()
QString & at ( int i ) const
QString & back ()
int count ( const QString & value ) const
bool endsWith ( const QString & value ) const
//QString & first ()
const QString & first () const
//QString & front ()
const QString & front () const
void insert ( int i, const QString & value )
//QString & last ()
const QString & last () const

//QList<QString> mid ( int pos, int length = -1 ) const

void prepend ( const QString & value )
void push_back ( const QString & value )
void push_front ( const QString & value )
int removeAll ( const QString & value )
bool removeOne ( const QString & value )
void replace ( int i, const QString & value )

bool startsWith ( const QString & value ) const
QString takeAt ( int i )
QString takeFirst ()
QString takeLast ()

QSet<QString> toSet () const
std::list<QString> toStdList () const
QVector<QString> toVector () const
QString value ( int i ) const
QString value ( int i, const QString & defaultValue ) const

</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>

<VARIABLES>
</VARIABLES>
