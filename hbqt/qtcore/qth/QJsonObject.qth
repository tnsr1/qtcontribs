/*
 * $Id: QJsonObject.qth 420 2015-11-13 23:48:34Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2015 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
Inherit     =
QObject     = No
Version     = 0x050000
</CLASS>


<CODE>
#include <QtCore/QJsonObject>


/*
 *	QJsonObject()
 * QJsonObject(std::initializer_list<QPair<QString, QJsonValue> > args)
 * QJsonObject(const QJsonObject & other)
 * ~QJsonObject()
 */
HB_FUNC( QT_QJSONOBJECT )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QJsonObject" ) )
   {
      __HB_RETPTRGC__( new QJsonObject( * hbqt_par_QJsonObject( 1 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QJsonObject() );
   }
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
//iterator	begin()
//const_iterator	begin() const
//const_iterator	constBegin() const
//const_iterator	constEnd() const
//const_iterator	constFind(const QString & key) const
bool	contains(const QString & key) const
int	count() const
bool	empty() const
//iterator	end()
//const_iterator	end() const
//iterator	erase(iterator it)
//iterator	find(const QString & key)
//const_iterator	find(const QString & key) const
//iterator	insert(const QString & key, const QJsonValue & value)
bool	isEmpty() const
QStringList	keys() const
int	length() const
void	remove(const QString & key)
int	size() const
QJsonValue	take(const QString & key)
//QVariantHash	toVariantHash() const
//QVariantMap	toVariantMap() const
QJsonValue	value(const QString & key) const
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
