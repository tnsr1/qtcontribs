/*
 * $Id: QLineF.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Inherit     =
Type        = Core
New         =
Destructor  =
</CLASS>

<CODE>
#include <QtCore/QLineF>


/* QLineF ()
 * QLineF ( const QPointF & p1, const QPointF & p2 )
 * QLineF ( qreal x1, qreal y1, qreal x2, qreal y2 )
 * QLineF ( const QLine & line )
 */
HB_FUNC( QT_QLINEF )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QLINEF" ) )
   {
      __HB_RETPTRGC__( new QLineF( *hbqt_par_QLineF( 1 ) ) );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QLINE" ) )
   {
      __HB_RETPTRGC__( new QLineF( *hbqt_par_QLine( 1 ) ) );
   }
   else if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QPOINT" ) && hbqt_par_isDerivedFrom( 2, "QPOINT" ) )
   {
      __HB_RETPTRGC__( new QLineF( *hbqt_par_QPoint( 1 ), *hbqt_par_QPoint( 2 ) ) );
   }
   else if( hb_pcount() == 4 && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) && HB_ISNUM( 3 ) && HB_ISNUM( 4 ) )
   {
      __HB_RETPTRGC__( new QLineF( hb_parni( 1 ), hb_parni( 2 ), hb_parni( 3 ), hb_parni( 4 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QLineF() );
   }
}
</CODE>

<ENUMS>
enum IntersectType { NoIntersection, UnboundedIntersection, BoundedIntersection }
</ENUMS>

<PROTOS>
QPointF p1 () const
QPointF p2 () const
qreal x1 () const
qreal x2 () const
qreal y1 () const
qreal y2 () const
qreal angle () const
qreal angleTo ( const QLineF & line ) const
qreal dx () const
qreal dy () const
IntersectType intersect ( const QLineF & line, QPointF * intersectionPoint ) const
bool isNull () const
qreal length () const
QLineF normalVector () const
QPointF pointAt ( qreal t ) const
void setP1 ( const QPointF & p1 )
void setP2 ( const QPointF & p2 )
void setAngle ( qreal angle )
void setLength ( qreal length )
void setLine ( qreal x1, qreal y1, qreal x2, qreal y2 )
void setPoints ( const QPointF & p1, const QPointF & p2 )
QLine toLine () const
void translate ( const QPointF & offset )
void translate ( qreal dx, qreal dy )
QLineF translated ( const QPointF & offset ) const
QLineF translated ( qreal dx, qreal dy ) const
QLineF unitVector () const
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
