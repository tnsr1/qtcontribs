/*
 * $Id: QList.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Inherit     =
Type        = Core
New         =
List     = yes
</CLASS>

<CODE>
#include <QtCore/QList>


/*
 * QList ()
 * QList ( const QList<T> & other )
 * ~QList ()
 */
HB_FUNC( QT_QLIST )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QLIST" ) )
   {
      __HB_RETPTRGC__( new QList< void * >( *hbqt_par_QList( 1 ) ) );
   }
   else
   {
      QList< void * >* list = NULL;
      __HB_RETPTRGC__( ( QList< void * >* ) list );
   }
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
void append ( const T & value )
void append ( const QList<T> & value )
const T & at ( int i ) const
//T & back ()
const T & back () const
//iterator begin ()
//const_iterator begin () const
void clear ()
//const_iterator constBegin () const
//const_iterator constEnd () const
//bool contains ( const T & value ) const
int count ( const T & value ) const
int count () const
bool empty () const
//iterator end ()
//const_iterator end () const
bool endsWith ( const T & value ) const
//iterator erase ( iterator pos )
//iterator erase ( iterator begin, iterator end )
//T & first ()
const T & first () const
//T & front ()
const T & front () const
int indexOf ( const T & value, int from = 0 ) const
void insert ( int i, const T & value )
//iterator insert ( iterator before, const T & value )
bool isEmpty () const
//T & last ()
const T & last () const
int lastIndexOf ( const T & value, int from = -1 ) const
int length () const
QList<T> mid ( int pos, int length = -1 ) const
void move ( int from, int to )
void pop_back ()
void pop_front ()
void prepend ( const T & value )
void push_back ( const T & value )
void push_front ( const T & value )
int removeAll ( const T & value )
void removeAt ( int i )
void removeFirst ()
void removeLast ()
bool removeOne ( const T & value )
void replace ( int i, const T & value )
int size () const
bool startsWith ( const T & value ) const
void swap ( int i, int j )
T takeAt ( int i )
T takeFirst ()
T takeLast ()
QSet<T> toSet () const
//std::list<T> toStdList () const
QVector<T> toVector () const
T value ( int i ) const
T value ( int i, const T & defaultValue ) const
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>

<VARIABLES>
</VARIABLES>
