/*
 * $Id: QFile.qth 461 2017-10-12 15:34:23Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     =
Inherit     = QIODevice
Type        = Core
New         =
Destructor  =
</CLASS>

<CODE>
#include <QtCore/QFile>


/* QFile ( const QString & name )
 * QFile ( QObject * parent )
 * QFile ( const QString & name, QObject * parent )
 * ~QFile ()
 */
HB_FUNC( QT_QFILE )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QOBJECT" ) )
   {
      __HB_RETPTRGC__( new QFile( hbqt_par_QObject( 1 ) ) );
   }
   else if( hb_pcount() == 1 && HB_ISCHAR( 1 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QFile( hb_parstr_utf8( 1, &pText01, NULL ) ) );
      hb_strfree( pText01 );
   }
   else if( hb_pcount() == 2 && HB_ISCHAR( 1 ) && hbqt_par_isDerivedFrom( 2, "QOBJECT" ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QFile( hb_parstr_utf8( 1, &pText01, NULL ), hbqt_par_QObject( 2 ) ) );
      hb_strfree( pText01 );
   }
   else
   {
      __HB_RETPTRGC__( new QFile() );
   }
}
</CODE>

<ENUMS>
enum FileError { NoError, ReadError, WriteError, FatalError, ..., CopyError }
enum MemoryMapFlags { NoOptions }
enum Permission { ReadOwner, WriteOwner, ExeOwner, ReadUser, ..., ExeOther }
flags Permissions

flags OpenMode
enum OpenModeFlag { NotOpen, ReadOnly, WriteOnly, ReadWrite, ..., Unbuffered }
</ENUMS>

<PROTOS>
virtual bool atEnd () const
virtual void close ()
bool copy ( const QString & newName )
FileError error () const
bool exists () const
QString fileName () const
bool flush ()
int handle () const
virtual bool isSequential () const
bool link ( const QString & linkName )
uchar * map ( qint64 offset, qint64 size, MemoryMapFlags flags = NoOptions )
virtual bool open ( OpenMode mode )
// bool open ( FILE * fh, OpenMode mode )
bool open ( int fd, OpenMode mode )
Permissions permissions () const
bool remove ()
bool rename ( const QString & newName )
bool resize ( qint64 sz )
void setFileName ( const QString & name )
bool setPermissions ( Permissions permissions )
virtual qint64 size () const
QString symLinkTarget () const
// bool unmap ( uchar * address )
void unsetError ()

bool copy ( const QString & fileName, const QString & newName )
//QString decodeName ( const QByteArray & localFileName )
QString decodeName ( const char * localFileName )
QByteArray encodeName ( const QString & fileName )
bool exists ( const QString & fileName )
bool link ( const QString & fileName, const QString & linkName )
Permissions permissions ( const QString & fileName )
bool remove ( const QString & fileName )
bool rename ( const QString & oldName, const QString & newName )
bool resize ( const QString & fileName, qint64 sz )
// void setDecodingFunction ( DecoderFn function )
// void setEncodingFunction ( EncoderFn function )
bool setPermissions ( const QString & fileName, Permissions permissions )
QString symLinkTarget ( const QString & fileName )
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
