/*
 * $Id: QStringRef.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Inherit     =
Type        =
New         =
</CLASS>

<CODE>
#include <QtCore/QStringRef>


/*
 * QStringRef ()
 * QStringRef ( const QString * string )
 * QStringRef ( const QStringRef & other )
 * QStringRef ( const QString * string, int position, int length )
 * ~QStringRef ()
 */
HB_FUNC( QT_QSTRINGREF )
{
   if( hb_pcount() == 1 && HB_ISCHAR( 1 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QStringRef( ( const QString * ) hb_parstr_utf8( 1, &pText01, NULL ) ) );
      hb_strfree( pText01 );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QSTRINGREF" ) )
   {
      __HB_RETPTRGC__( new QStringRef( * hbqt_par_QStringRef( 1 ) ) );
   }
   else if( hb_pcount() == 3  && HB_ISCHAR( 1 ) && HB_ISNUM( 2 ) && HB_ISNUM( 3 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QStringRef( ( const QString * ) hb_parstr_utf8( 1, &pText01, NULL ), hb_parni( 2 ), hb_parni( 3 ) ) );
      hb_strfree( pText01 );
   }
   else
   {
      __HB_RETPTRGC__( new QStringRef() );
   }
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
//QStringRef appendTo ( QString * string ) const
const QChar at ( int position ) const
void clear ()
int compare ( const QString & other, Qt::CaseSensitivity cs = Qt::CaseSensitive ) const
int compare ( const QStringRef & other, Qt::CaseSensitivity cs = Qt::CaseSensitive ) const
//int compare ( QLatin1String other, Qt::CaseSensitivity cs = Qt::CaseSensitive ) const
const QChar * constData () const
int count () const
const QChar * data () const
bool isEmpty () const
bool isNull () const
int length () const
int localeAwareCompare ( const QString & other ) const
int localeAwareCompare ( const QStringRef & other ) const
int position () const
int size () const
//const QString * string () const
//QString toString () const
const QChar * unicode () const

int compare ( const QStringRef & s1, const QString & s2, Qt::CaseSensitivity cs = Qt::CaseSensitive )
int compare ( const QStringRef & s1, const QStringRef & s2, Qt::CaseSensitivity cs = Qt::CaseSensitive )
//int compare ( const QStringRef & s1, QLatin1String s2, Qt::CaseSensitivity cs = Qt::CaseSensitive )
int localeAwareCompare ( const QStringRef & s1, const QString & s2 )
int localeAwareCompare ( const QStringRef & s1, const QStringRef & s2 )
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>

<VARIABLES>
</VARIABLES>
