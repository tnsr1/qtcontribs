/*
 * $Id: QChar.qth 158 2013-02-01 21:39:40Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Inherit     =
Type        =
New         =
Destructor  = no
</CLASS>

<SUBCLASS>
</SUBCLASS>

<DOC>
</DOC>

<CODE>
#include <QtCore/QChar>


/*
 * QChar ()
 * QChar ( char ch )
 * QChar ( uchar ch )
 * QChar ( QLatin1Char ch )
 * QChar ( uchar cell, uchar row )
 * QChar ( ushort code )
 * QChar ( short code )
 * QChar ( uint code )
 * QChar ( int code )
 * QChar ( SpecialCharacter ch )
 */
HB_FUNC( QT_QCHAR )
{
   if( hb_pcount() >= 1 && hbqt_par_isDerivedFrom( 1, "QLATIN1CHAR" ) )
   {
      __HB_RETPTRGC__( new QChar( *hbqt_par_QLatin1Char( 1 ) ) );
   }
   else if( hb_pcount() == 1 && HB_ISNUM( 1 ) )
   {
      __HB_RETPTRGC__( new QChar( hb_parni( 1 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QChar() );
   }
}
</CODE>

<ENUMS>
enum Category { Mark_NonSpacing, Mark_SpacingCombining, Mark_Enclosing, Number_DecimalDigit, ..., NoCategory }
enum Decomposition { NoDecomposition, Canonical, Circle, Compat, ..., Wide }
enum Direction { DirAL, DirAN, DirB, DirBN, ..., DirWS }
enum Joining { Center, Dual, OtherJoining, Right }
enum SpecialCharacter { Null, Nbsp, ReplacementCharacter, ObjectReplacementCharacter, ..., LineSeparator }
enum UnicodeVersion { Unicode_1_1, Unicode_2_0, Unicode_2_1_2, Unicode_3_0, ..., Unicode_Unassigned }
</ENUMS>

<PROTOS>
Category category () const
uchar cell () const
unsigned char combiningClass () const
QString decomposition () const
Decomposition decompositionTag () const
int digitValue () const
Direction direction () const
bool hasMirrored () const
bool isDigit () const
bool isHighSurrogate () const
bool isLetter () const
bool isLetterOrNumber () const
bool isLowSurrogate () const
bool isLower () const
bool isMark () const
bool isNull () const
bool isNumber () const
bool isPrint () const
bool isPunct () const
bool isSpace () const
bool isSymbol () const
bool isTitleCase () const
bool isUpper () const
Joining joining () const
QChar mirroredChar () const
uchar row () const
char toAscii () const                                                          [*V=-0x040900*]
QChar toCaseFolded () const
char toLatin1 () const
QChar toLower () const
QChar toTitleCase () const
QChar toUpper () const
ushort & unicode ()
//ushort unicode () const
UnicodeVersion unicodeVersion () const

</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
