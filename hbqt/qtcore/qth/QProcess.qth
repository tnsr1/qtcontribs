/*
 * $Id: QProcess.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
Inherit     = QIODevice
Type        = Core
New         = 
</CLASS>

<CODE>
#include <QtCore/QProcess>


/*
 * QProcess ( QObject * parent = 0 )
 * ~QProcess ()
 */
HB_FUNC( QT_QPROCESS )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QOBJECT" ) )
   {
      __HB_RETPTRGC__( new QProcess( hbqt_par_QObject( 1 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QProcess() );
   }
}
</CODE>

<ENUMS>
# FROM QIODevice
flags OpenMode
enum OpenModeFlag { NotOpen, ReadOnly, WriteOnly, ReadWrite, ..., Unbuffered }

enum ExitStatus { NormalExit, CrashExit }
enum ProcessChannel { StandardOutput, StandardError }
enum ProcessChannelMode { SeparateChannels, MergedChannels, ForwardedChannels }
enum ProcessError { FailedToStart, Crashed, Timedout, WriteError, ReadError, UnknownError }
enum ProcessState { NotRunning, Starting, Running }
</ENUMS>

<PROTOS>
virtual void close ()
void closeReadChannel ( ProcessChannel channel )
void closeWriteChannel ()
QStringList environment () const
QProcess::ProcessError error () const
int exitCode () const
QProcess::ExitStatus exitStatus () const
// Q_PID pid () const
ProcessChannelMode processChannelMode () const
QByteArray readAllStandardError ()
QByteArray readAllStandardOutput ()
ProcessChannel readChannel () const
void setEnvironment ( const QStringList & environment )
void setProcessChannelMode ( ProcessChannelMode mode )
void setReadChannel ( ProcessChannel channel )
void setStandardErrorFile ( const QString & fileName, OpenMode mode = Truncate )
void setStandardInputFile ( const QString & fileName )
void setStandardOutputFile ( const QString & fileName, OpenMode mode = Truncate )
void setStandardOutputProcess ( QProcess * destination )
void setWorkingDirectory ( const QString & dir )
void start ( const QString & program, const QStringList & arguments, OpenMode mode = ReadWrite )
void start ( const QString & program, OpenMode mode = ReadWrite )
QProcess::ProcessState state () const
bool waitForFinished ( int msecs = 30000 )
bool waitForStarted ( int msecs = 30000 )
QString workingDirectory () const

int execute ( const QString & program, const QStringList & arguments )
int execute ( const QString & program )
bool startDetached ( const QString & program, const QStringList & arguments, const QString & workingDirectory, qint64 * pid = 0 )
bool startDetached ( const QString & program, const QStringList & arguments )
bool startDetached ( const QString & program )
QStringList systemEnvironment ()
</PROTOS>

<SLOTS>
void kill ()
void terminate ()
</SLOTS>

<SIGNALS>
void error ( QProcess::ProcessError error )
void finished ( int exitCode, QProcess::ExitStatus exitStatus )
void readyReadStandardError ()
void readyReadStandardOutput ()
void started ()
void stateChanged ( QProcess::ProcessState newState )
</SIGNALS>

<VARIABLES>
</VARIABLES>
