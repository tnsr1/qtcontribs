/*
 * $Id: QLocale.qth 453 2017-04-18 23:41:16Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Inherit     =
Type        = Core
New         =
Destructor  =
</CLASS>

<CODE>
#include <QtCore/QLocale>
#include <QtCore/QDate>

/* QLocale ()
 * QLocale ( const QString & name )
 * QLocale ( QLocale::Language language, QLocale::Country country = AnyCountry )
 * QLocale ( const QLocale & other )
 */
HB_FUNC( QT_QLOCALE )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QLOCALE" ) )
   {
      __HB_RETPTRGC__( new QLocale( *hbqt_par_QLocale( 1 ) ) );
   }
   else if( hb_pcount() == 1 && HB_ISCHAR( 1 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QLocale( hb_parstr_utf8( 1, &pText01, NULL ) ) );
      hb_strfree( pText01 );
   }
   else if( hb_pcount() >= 1 && HB_ISNUM( 1 ) )
   {
      __HB_RETPTRGC__( new QLocale( ( QLocale::Language ) hb_parni( 1 ), HB_ISNUM( 2 ) ? ( QLocale::Country ) hb_parni( 2 ) : QLocale::AnyCountry ) );
   }
   else
   {
      __HB_RETPTRGC__( new QLocale() );
   }
}
</CODE>

<ENUMS>
enum Country { AnyCountry, Afghanistan, Albania, Algeria, ..., LatinAmericaAndTheCaribbean }
enum CurrencySymbolFormat { CurrencyIsoCode, CurrencySymbol, CurrencyDisplayName }
enum FormatType { LongFormat, ShortFormat, NarrowFormat }
enum Language { AnyLanguage, C, Abkhazian, Afan, ..., Shambala }
enum MeasurementSystem { MetricSystem, ImperialSystem }
enum NumberOption { OmitGroupSeparator, RejectGroupSeparator }
flags NumberOptions
enum QuotationStyle { StandardQuotation, AlternateQuotation }
enum Script { AnyScript, ArabicScript, CyrillicScript, DeseretScript, ..., TifinaghScript }
</ENUMS>

<PROTOS>
QString amText () const
QString bcp47Name () const                                                      [*V=0x040800*]
Country country () const
QString createSeparatedList ( const QStringList & list ) const                  [*V=0x040800*]
QString currencySymbol ( CurrencySymbolFormat format = CurrencySymbol ) const   [*V=0x040800*]
QString dateFormat ( FormatType format = LongFormat ) const
QString dateTimeFormat ( FormatType format = LongFormat ) const
QString dayName ( int day, FormatType type = LongFormat ) const
QChar decimalPoint () const
QChar exponential () const
Qt::DayOfWeek firstDayOfWeek () const                                           [*V=0x040800*]
QChar groupSeparator () const
Language language () const
MeasurementSystem measurementSystem () const
QString monthName ( int month, FormatType type = LongFormat ) const
QString name () const
QString nativeCountryName () const                                              [*V=0x040800*]
QString nativeLanguageName () const                                             [*V=0x040800*]
QChar negativeSign () const
NumberOptions numberOptions () const
QChar percent () const
QString pmText () const
QChar positiveSign () const
QString quoteString ( const QString & str, QuotationStyle style = StandardQuotation ) const     [*V=0x040800*]
QString quoteString ( const QStringRef & str, QuotationStyle style = StandardQuotation ) const  [*V=0x040800*]
Script script () const                                                                          [*V=0x040800*]
void setNumberOptions ( NumberOptions options )
QString standaloneDayName ( int day, FormatType type = LongFormat ) const
QString standaloneMonthName ( int month, FormatType type = LongFormat ) const
Qt::LayoutDirection textDirection () const                                                      [*V=0x040700*]

//QString toCurrencyString ( qlonglong value, const QString & symbol = QString() ) const
//QString toCurrencyString ( qulonglong value, const QString & symbol = QString() ) const
QString toCurrencyString ( double value, const QString & symbol = QString() ) const             [*V=0x040800*]
//QString toCurrencyString ( short value, const QString & symbol = QString() ) const
//QString toCurrencyString ( ushort value, const QString & symbol = QString() ) const
//QString toCurrencyString ( int value, const QString & symbol = QString() ) const              [*V=-0x040800*]
//QString toCurrencyString ( uint value, const QString & symbol = QString() ) const
//QString toCurrencyString ( float value, const QString & symbol = QString() ) const

QString timeFormat ( FormatType format = LongFormat ) const
QDate toDate ( const QString & string, FormatType format = LongFormat ) const
QDate toDate ( const QString & string, const QString & format ) const
QDateTime toDateTime ( const QString & string, FormatType format = LongFormat ) const
QDateTime toDateTime ( const QString & string, const QString & format ) const
double toDouble ( const QString & s, bool * ok = 0 ) const
float toFloat ( const QString & s, bool * ok = 0 ) const
int toInt ( const QString & s, bool * ok = 0 ) const
qlonglong toLongLong ( const QString & s, bool * ok = 0 ) const

QString toLower ( const QString & str ) const                                                   [*V=0x040800*]

short toShort ( const QString & s, bool * ok = 0 ) const

//QString toString ( qlonglong i ) const
QString toString ( const QDate & date, const QString & format ) const
QString toString ( const QDate & date, FormatType format = LongFormat ) const
QString toString ( const QTime & time, const QString & format ) const
QString toString ( const QTime & time, FormatType format = LongFormat ) const
QString toString ( const QDateTime & dateTime, FormatType format = LongFormat ) const
QString toString ( const QDateTime & dateTime, const QString & format ) const
//QString toString ( qulonglong i ) const
//QString toString ( double i, char f = 'g', int prec = 6 ) const
//QString toString ( short i ) const
//QString toString ( ushort i ) const
QString toString ( int i ) const
//QString toString ( uint i ) const
//QString toString ( float i, char f = 'g', int prec = 6 ) const

QTime toTime ( const QString & string, FormatType format = LongFormat ) const
QTime toTime ( const QString & string, const QString & format ) const
uint toUInt ( const QString & s, bool * ok = 0 ) const
qlonglong toULongLong ( const QString & s, bool * ok = 0 ) const
ushort toUShort ( const QString & s, bool * ok = 0 ) const

QString toUpper ( const QString & str ) const                                                   [*V=0x040800*]

QStringList uiLanguages () const                                                                [*V=0x040800*]
QList<Qt::DayOfWeek> weekdays () const                                                          [*V=0x040800*]

QChar zeroDigit () const

QLocale c ()
QString countryToString ( Country country )
QString languageToString ( Language language )
//QList<QLocale> matchingLocales ( QLocale::Language language, QLocale::Script script, QLocale::Country country )
QString scriptToString ( Script script )                                        [*V=-0x040800*]
void setDefault ( const QLocale & locale )
QLocale system ()
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
