/*
 * $Id: QTimeLine.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     =
Inherit     = QObject
Type        =
New         =
</CLASS>

<CODE>
#include <QtCore/QTimeLine>


/*
 * QTimeLine ( int duration = 1000, QObject * parent = 0 )
 * virtual ~QTimeLine ()
 */
HB_FUNC( QT_QTIMELINE )
{
   if( hb_pcount() == 2 && HB_ISNUM( 1 ) && hbqt_par_isDerivedFrom( 2, "QOBJECT" ) )
   {
      __HB_RETPTRGC__( new QTimeLine( hb_parni( 1 ), hbqt_par_QObject( 2 ) ) );
   }
   else if( hb_pcount() == 1 && HB_ISNUM( 1 ) ) 
   {   
      __HB_RETPTRGC__( new QTimeLine( hb_parni( 1 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QTimeLine() );
   }
}
</CODE>

<ENUMS>
enum CurveShape { EaseInCurve, EaseOutCurve, EaseInOutCurve, LinearCurve, SineCurve, CosineCurve }
enum Direction { Forward, Backward }
enum State { NotRunning, Paused, Running }
</ENUMS>

<PROTOS>
int currentFrame () const
int currentTime () const
qreal currentValue () const
CurveShape curveShape () const
Direction direction () const
int duration () const
int endFrame () const
int frameForTime ( int msec ) const
int loopCount () const
void setCurveShape ( CurveShape shape )
void setDirection ( Direction direction )
void setDuration ( int duration )
void setEndFrame ( int frame )
void setFrameRange ( int startFrame, int endFrame )
void setLoopCount ( int count )
void setStartFrame ( int frame )
void setUpdateInterval ( int interval )
int startFrame () const
State state () const
int updateInterval () const
virtual qreal valueForTime ( int msec ) const
</PROTOS>

<SLOTS>
void resume ()
void setCurrentTime ( int msec )
void setPaused ( bool paused )
void start ()
void stop ()
void toggleDirection ()
</SLOTS>

<SIGNALS>
void finished ()
void frameChanged ( int frame )
void stateChanged ( QTimeLine::State newState )
void valueChanged ( qreal value )
</SIGNALS>

<VARIABLES>
</VARIABLES>
