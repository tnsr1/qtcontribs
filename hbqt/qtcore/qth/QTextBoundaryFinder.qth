/*
 * $Id: QTextBoundaryFinder.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Inherit     =
Type        = Core
New         =
</CLASS>

<CODE>
#include <QtCore/QTextBoundaryFinder>


/*
 * QTextBoundaryFinder ()
 * QTextBoundaryFinder ( const QTextBoundaryFinder & other )
 * QTextBoundaryFinder ( BoundaryType type, const QString & string )
 * QTextBoundaryFinder ( BoundaryType type, const QChar * chars, int length, unsigned char * buffer = 0, int bufferSize = 0 )
 * ~QTextBoundaryFinder ()
 */
HB_FUNC( QT_QTEXTBOUNDARYFINDER )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QTEXTBOUNDARYFINDER" ) )
   {
      __HB_RETPTRGC__( new QTextBoundaryFinder( *hbqt_par_QTextBoundaryFinder( 1 ) ) );
   }
   else if( hb_pcount() == 2 && HB_ISNUM( 1 ) && HB_ISCHAR( 2 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QTextBoundaryFinder( ( QTextBoundaryFinder::BoundaryType ) hb_parni( 1 ), hb_parstr_utf8( 2, &pText01, NULL ) ) );
      hb_strfree( pText01 );
   }
   else if( hb_pcount() >= 3 && HB_ISNUM( 1 ) && hbqt_par_isDerivedFrom( 2, "QCHAR" ) && HB_ISNUM( 3 ) )
   {
      __HB_RETPTRGC__( new QTextBoundaryFinder( ( QTextBoundaryFinder::BoundaryType ) hb_parni( 1 ), hbqt_par_QChar( 2 ), hb_parni( 3 ), HB_ISCHAR( 4 ) ? ( unsigned char * ) hb_parc( 4 ) : 0, hb_parni( 5 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QTextBoundaryFinder() );
   }
}
</CODE>

<ENUMS>
flags BoundaryReasons
enum BoundaryReason { NotAtBoundary, StartWord, EndWord }
enum BoundaryType { Grapheme, Word, Line, Sentence }
</ENUMS>

<PROTOS>
BoundaryReasons boundaryReasons () const
bool isAtBoundary () const
bool isValid () const
int position () const
void setPosition ( int position )
QString string () const
void toEnd ()
int toNextBoundary ()
int toPreviousBoundary ()
void toStart ()
BoundaryType type () const
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
