/*
 * $Id: QJsonValue.qth 420 2015-11-13 23:48:34Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2015 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
Inherit     =
QObject     = No
Version     = 0x050000
</CLASS>


<CODE>
#include <QtCore/QJsonValue>
#include <QtCore/QJsonArray>
#include <QtCore/QJsonObject>
#include <QtCore/QVariant>


/*
 *   QJsonValue(Type type = Null)
 *   QJsonValue(bool b)
 *   QJsonValue(double n)
 *   QJsonValue(const QString & s)
 *   QJsonValue(QLatin1String s)
 *   QJsonValue(const char * s)
 *   QJsonValue(const QJsonArray & a)
 *   QJsonValue(const QJsonObject & o)
 *   QJsonValue(const QJsonValue & other)
 *   QJsonValue(int n)
 *   QJsonValue(qint64 n)
 *   ~QJsonValue()
 */
HB_FUNC( QT_QJSONVALUE )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QJsonArray" ) )
   {
      __HB_RETPTRGC__( new QJsonValue( * hbqt_par_QJsonArray( 1 ) ) );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QJsonObject" ) )
   {
      __HB_RETPTRGC__( new QJsonValue( * hbqt_par_QJsonObject( 1 ) ) );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QJsonValue" ) )
   {
      __HB_RETPTRGC__( new QJsonValue( * hbqt_par_QJsonValue( 1 ) ) );
   }
   else if( hb_pcount() == 1 && HB_ISNUM( 1 ) )
   {
      __HB_RETPTRGC__( new QJsonValue( ( int ) hb_parnl( 1 ) ) );
   }
   else if( hb_pcount() == 1 && HB_ISLOG( 1 ) )
   {
      __HB_RETPTRGC__( new QJsonValue( hb_parl( 1 ) ) );
   }
   else if( hb_pcount() == 1 && HB_ISCHAR( 1 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QJsonValue( hb_parstr_utf8( 1, &pText01, NULL ) ) );
      hb_strfree( pText01 );
   }
   else
   {
      __HB_RETPTRGC__( new QJsonValue() );
   }
}
</CODE>

<ENUMS>
enum   Type { Null, Bool, Double, String, ..., Undefined }
</ENUMS>

<PROTOS>
bool   isArray() const
bool   isBool() const
bool   isDouble() const
bool   isNull() const
bool   isObject() const
bool   isString() const
bool   isUndefined() const
QJsonArray   toArray(const QJsonArray & defaultValue) const
QJsonArray   toArray() const
bool   toBool(bool defaultValue = false) const
double   toDouble(double defaultValue = 0) const
int   toInt(int defaultValue = 0) const
QJsonObject   toObject(const QJsonObject & defaultValue) const
QJsonObject   toObject() const
QString   toString(const QString & defaultValue = QString()) const
QVariant   toVariant() const
Type   type() const
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
