/*
 * $Id: QDir.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

; Header File to Generate Sources
;

<CLASS>
QObject     = no
New         = pParent
</CLASS>

<CODE>
#include <QtCore/QDir>


/*
 * QDir ( const QDir & dir )
 * QDir ( const QString & path = QString() )
 * QDir ( const QString & path, const QString & nameFilter, SortFlags sort = SortFlags( Name | IgnoreCase ), Filters filters = AllEntries )
 * ~QDir ()
 */
HB_FUNC( QT_QDIR )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QDIR" ) )
   {
      __HB_RETPTRGC__( new QDir( *hbqt_par_QDir( 1 ) ) );
   }
   else if( hb_pcount() == 1 && HB_ISCHAR( 1 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QDir( hb_parstr_utf8( 1, &pText01, NULL ) ) );
      hb_strfree( pText01 );
   }
   else if( hb_pcount() >= 2 && HB_ISCHAR( 1 ) && HB_ISCHAR( 2 ) )
   {
      void * pText01 = NULL;
      void * pText02 = NULL;
      __HB_RETPTRGC__( new QDir( hb_parstr_utf8( 1, &pText01, NULL ), hb_parstr_utf8( 2, &pText02, NULL ), HB_ISNUM( 3 ) ? ( QDir::SortFlag ) hb_parni( 3 ) : ( QDir::Name | QDir::IgnoreCase ), HB_ISNUM( 4 ) ? ( QDir::Filter ) hb_parni( 4 ) : QDir::AllEntries ) );
      hb_strfree( pText01 );
      hb_strfree( pText02 );
   }
   else
   {
      __HB_RETPTRGC__( new QDir() );
   }
}
</CODE>


<ENUMS>
enum Filter { Dirs, AllDirs, Files, Drives, ..., CaseSensitive }
enum SortFlag { Name, Time, Size, Type, ..., LocaleAware }
flags Filters
flags SortFlags
</ENUMS>

<PROTOS>
QString absoluteFilePath ( const QString & fileName ) const
QString absolutePath () const
QString canonicalPath () const
bool cd ( const QString & dirName )
bool cdUp ()
uint count () const
QString dirName () const
QList< QFileInfo > entryInfoList ( const QStringList & nameFilters, Filters filters = NoFilter, SortFlags sort = NoSort ) const
QList< QFileInfo > entryInfoList ( Filters filters = NoFilter, SortFlags sort = NoSort ) const
QStringList entryList ( const QStringList & nameFilters, Filters filters = NoFilter, SortFlags sort = NoSort ) const
QStringList entryList ( Filters filters = NoFilter, SortFlags sort = NoSort ) const
bool exists ( const QString & name ) const
bool exists () const
QString filePath ( const QString & fileName ) const
Filters filter () const
bool isAbsolute () const
bool isReadable () const
bool isRelative () const
bool isRoot () const
bool makeAbsolute ()
bool mkdir ( const QString & dirName ) const
bool mkpath ( const QString & dirPath ) const
QStringList nameFilters () const
QString path () const
void refresh () const
QString relativeFilePath ( const QString & fileName ) const
bool remove ( const QString & fileName )
bool rename ( const QString & oldName, const QString & newName )
bool rmdir ( const QString & dirName ) const
bool rmpath ( const QString & dirPath ) const
void setFilter ( Filters filters )
void setNameFilters ( const QStringList & nameFilters )
void setPath ( const QString & path )
void setSorting ( SortFlags sort )
SortFlags sorting () const


void addSearchPath ( const QString & prefix, const QString & path )
QString cleanPath ( const QString & path )
QDir current ()
QString currentPath ()
QList< QFileInfo > drives ()
QString fromNativeSeparators ( const QString & pathName )
QDir home ()
QString homePath ()
bool isAbsolutePath ( const QString & path )
bool isRelativePath ( const QString & path )
bool match ( const QString & filter, const QString & fileName )
bool match ( const QStringList & filters, const QString & fileName )
QDir root ()
QString rootPath ()
QStringList searchPaths ( const QString & prefix )
QChar separator ()
bool setCurrent ( const QString & path )
void setSearchPaths ( const QString & prefix, const QStringList & searchPaths )
QDir temp ()
QString tempPath ()
QString toNativeSeparators ( const QString & pathName )
</PROTOS>
