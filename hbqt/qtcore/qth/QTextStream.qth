/*
 * $Id: QTextStream.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Type        = Core
New         = cText, nIOMode
</CLASS>

<CODE>
#include <QtCore/QTextStream>


/*
 * QTextStream ()
 * QTextStream ( QIODevice * device )
 * QTextStream ( FILE * fileHandle, QIODevice::OpenMode openMode = QIODevice::ReadWrite )
 * QTextStream ( QString * string, QIODevice::OpenMode openMode = QIODevice::ReadWrite )
 * QTextStream ( QByteArray * array, QIODevice::OpenMode openMode = QIODevice::ReadWrite )
 * QTextStream ( const QByteArray & array, QIODevice::OpenMode openMode = QIODevice::ReadOnly )
 * virtual ~QTextStream ()
 */
HB_FUNC( QT_QTEXTSTREAM )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QIODEVICE" ) )
   {
      __HB_RETPTRGC__( new QTextStream( hbqt_par_QIODevice( 1 ) ) );
   }
   else if( hb_pcount() >= 1 && hbqt_par_isDerivedFrom( 1, "QBYTEARRAY" ) )
   {
      __HB_RETPTRGC__( new QTextStream( hbqt_par_QByteArray( 1 ), ( QIODevice::OpenMode ) ( HB_ISNUM( 2 ) ?  hb_parni( 2 ) : QIODevice::ReadWrite ) ) );
   }
   else if( hb_pcount() >= 1 && HB_ISCHAR( 1 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QTextStream( hb_parstr_utf8( 1, &pText01, NULL ), ( QIODevice::OpenMode ) ( HB_ISNUM( 2 ) ?  hb_parni( 2 ) : QIODevice::ReadWrite ) ) );
      hb_strfree( pText01 );
   }
   else
   {
      __HB_RETPTRGC__( new QTextStream() );
   }
}
</CODE>

<ENUMS>
flags NumberFlags
enum FieldAlignment { AlignLeft, AlignRight, AlignCenter, AlignAccountingStyle }
enum NumberFlag { ShowBase, ForcePoint, ForceSign, UppercaseBase, UppercaseDigits }
enum RealNumberNotation { ScientificNotation, FixedNotation, SmartNotation }
enum Status { Ok, ReadPastEnd, ReadCorruptData }
</ENUMS>

<PROTOS>
QChar padChar () const
bool atEnd () const
bool autoDetectUnicode () const
QTextCodec * codec () const
QIODevice * device () const
FieldAlignment fieldAlignment () const
int fieldWidth () const
void flush ()
bool generateByteOrderMark () const
int integerBase () const
QLocale locale () const
NumberFlags numberFlags () const
qint64 pos () const
QString read ( qint64 maxlen )
QString readAll ()
QString readLine ( qint64 maxlen = 0 )
RealNumberNotation realNumberNotation () const
int realNumberPrecision () const
void reset ()
void resetStatus ()
bool seek ( qint64 pos )
void setAutoDetectUnicode ( bool enabled )
void setCodec ( QTextCodec * codec )
void setCodec ( const char * codecName )
void setDevice ( QIODevice * device )
void setFieldAlignment ( FieldAlignment mode )
void setFieldWidth ( int width )
void setGenerateByteOrderMark ( bool generate )
void setIntegerBase ( int base )
void setLocale ( const QLocale & locale )
void setNumberFlags ( NumberFlags flags )
void setPadChar ( QChar ch )
void setRealNumberNotation ( RealNumberNotation notation )
void setRealNumberPrecision ( int precision )
void setStatus ( Status status )
#
//void setString ( QString * string, QIODevice::OpenMode openMode = QIODevice::ReadWrite )
#
void skipWhiteSpace ()
Status status () const
#
//QString * string () const
#
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
