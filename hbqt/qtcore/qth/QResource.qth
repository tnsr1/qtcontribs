/*
 * $Id: QResource.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = no
Inherit     =
Type        = Core
New         =
ClubMethods = no
</CLASS>

<CODE>
#include <QtCore/QResource>


/*
 * QResource ()
 * QResource ( const QString & file = QString(), const QLocale & locale = QLocale() )
 * ~QResource ()
 */
HB_FUNC( QT_QRESOURCE )
{
   if( hb_pcount() == 2 && HB_ISCHAR( 1 ) && hbqt_par_isDerivedFrom( 2, "QLOCALE" ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QResource( hb_parstr_utf8( 1, &pText01, NULL ), *hbqt_par_QLocale( 2 ) ) );
      hb_strfree( pText01 );
   }
   else if( hb_pcount() == 1 && HB_ISCHAR( 1 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QResource( hb_parstr_utf8( 1, &pText01, NULL ), QLocale() ) );
      hb_strfree( pText01 );
   }
   else
   {
      __HB_RETPTRGC__( new QResource() );
   }
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
QString absoluteFilePath () const
const uchar * data () const
QString fileName () const
bool isCompressed () const
bool isValid () const
QLocale locale () const
void setFileName ( const QString & file )
void setLocale ( const QLocale & locale )
qint64 size () const

bool registerResource ( const QString & rccFileName, const QString & mapRoot = QString() ) {
   QResource * _resource = ( QResource * ) hbqt_par_ptr( 0 );
   if( _resource )
   {
      int pcount = hb_pcount();
      if( pcount <= 2 && HB_ISCHAR( 1 ) && ( pcount < 2 || HB_ISCHAR( 2 ) ) )
      {
         void * pText1 = NULL;
         void * pText2 = NULL;
         hb_retl( _resource->registerResource( hb_parstr_utf8( 1, &pText1, NULL ), hb_parstr_utf8( 2, &pText2, NULL ) ) );
         hb_strfree( pText1 );
         hb_strfree( pText2 );
      }
      else
         hb_errRT_BASE( EG_ARG, 9999, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
   }
}

bool registerResource_1 ( const uchar * rccData, const QString & mapRoot = QString() ) {
   QResource * _resource = ( QResource * ) hbqt_par_ptr( 0 );
   if( _resource )
   {
      int pcount = hb_pcount();
      if( pcount <= 2 && HB_ISCHAR( 1 ) && ( pcount < 2 || HB_ISCHAR( 2 ) ) )
      {
         void * pText = NULL;
         hb_retl( _resource->registerResource( ( const uchar * ) hb_parc( 1 ), hb_parstr_utf8( 2, &pText, NULL ) ) );
         hb_strfree( pText );
      }
      else
         hb_errRT_BASE( EG_ARG, 9999, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
   }
}

QStringList searchPaths ()

bool unregisterResource ( const QString & rccFileName, const QString & mapRoot = QString() ) {
   QResource * _resource = ( QResource * ) hbqt_par_ptr( 0 );
   if( _resource )
   {
      int pcount = hb_pcount();
      if( pcount <= 2 && HB_ISCHAR( 1 ) && ( pcount < 2 || HB_ISCHAR( 2 ) ) )
      {
         void * pText1 = NULL;
         void * pText2 = NULL;
         hb_retl( _resource->unregisterResource( hb_parstr_utf8( 1, &pText1, NULL ), hb_parstr_utf8( 2, &pText2, NULL ) ) );
         hb_strfree( pText1 );
         hb_strfree( pText2 );
      }
      else
         hb_errRT_BASE( EG_ARG, 9999, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
   }
}

bool unregisterResource_1 ( const uchar * rccData, const QString & mapRoot = QString() ) {
   QResource * _resource = ( QResource * ) hbqt_par_ptr( 0 );
   if( _resource )
   {
      int pcount = hb_pcount();
      if( pcount <= 2 && HB_ISCHAR( 1 ) && ( pcount < 2 || HB_ISCHAR( 2 ) ) )
      {
         void * pText = NULL;
         hb_retl( _resource->unregisterResource( ( const uchar * ) hb_parc( 1 ), hb_parstr_utf8( 2, &pText, NULL ) ) );
         hb_strfree( pText );
      }
      else
         hb_errRT_BASE( EG_ARG, 9999, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
   }
}
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
