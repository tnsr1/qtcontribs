/*
 * $Id: QGeoCoordinate.qth 286 2014-04-10 00:31:40Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2014 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     =
Inherit     =
Type        =
New         =
Version     = 0x050200
</CLASS>

<CODE>
#include <QtPositioning/QGeoCoordinate>

/*
 * QGeoCoordinate()
 * QGeoCoordinate(double latitude, double longitude)
 * QGeoCoordinate(double latitude, double longitude, double altitude)
 * QGeoCoordinate(const QGeoCoordinate & other)
 * ~QGeoCoordinate()
 */
HB_FUNC( QT_QGEOCOORDINATE )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QGeoCoordinate" ) )
   {
      __HB_RETPTRGC__( new QGeoCoordinate( * hbqt_par_QGeoCoordinate( 1 ) ) );
   }
   else if( hb_pcount() == 2 && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) )
   {
      __HB_RETPTRGC__( new QGeoCoordinate( hb_parnd( 1 ), hb_parnd( 2 ) ) );
   }
   else if( hb_pcount() == 3 && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) && HB_ISNUM( 3 ) )
   {
      __HB_RETPTRGC__( new QGeoCoordinate( hb_parnd( 1 ), hb_parnd( 2 ), hb_parnd( 3 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QGeoCoordinate() );
   }
}
</CODE>

<ENUMS>
enum   CoordinateFormat { Degrees, DegreesWithHemisphere, DegreesMinutes, DegreesMinutesWithHemisphere, DegreesMinutesSeconds, DegreesMinutesSecondsWithHemisphere }
enum   CoordinateType { InvalidCoordinate, Coordinate2D, Coordinate3D }
</ENUMS>

<PROTOS>
double   altitude() const
QGeoCoordinate   atDistanceAndAzimuth(qreal distance, qreal azimuth, qreal distanceUp = 0.0) const
qreal   azimuthTo(const QGeoCoordinate & other) const
qreal   distanceTo(const QGeoCoordinate & other) const
bool   isValid() const
double   latitude() const
double   longitude() const
void   setAltitude(double altitude)
void   setLatitude(double latitude)
void   setLongitude(double longitude)
QString   toString(QGeoCoordinate::CoordinateFormat format = QGeoCoordinate::DegreesMinutesSecondsWithHemisphere) const
CoordinateType   type() const
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>

<VARIABLES>
</VARIABLES>

