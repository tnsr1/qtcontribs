/*
 * $Id: QGeoSatelliteInfoSource.qth 389 2015-01-13 03:24:16Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2014 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = yes
Inherit     = QObject
Type        =
New         =
Version     = 0x050200
</CLASS>

<CODE>
#include <QtPositioning/QGeoSatelliteInfoSource>

/*
 * QGeoSatelliteInfoSource(QObject * parent)
 * virtual ~QGeoSatelliteInfoSource()
 */
HB_FUNC( QT_QGEOSATELLITEINFOSOURCE )
{
   HB_FUNC_EXEC( HB_QGEOSATELLITEINFOSOURCE );
}
</CODE>

<ENUMS>
enum   Error { AccessError, ClosedError, NoError, UnknownSourceError }
</ENUMS>

<PROTOS>
virtual QGeoSatelliteInfoSource::Error   error() const = 0
virtual int   minimumUpdateInterval() const = 0
virtual void   setUpdateInterval(int msec)
QString   sourceName() const
int   updateInterval() const

QStringList availableSources(){
   hb_itemReturnRelease( hbqt_bindGetHbObject( NULL, new QStringList( QGeoSatelliteInfoSource::availableSources() ), "HB_QSTRINGLIST", hbqt_del_QStringList, HBQT_BIT_OWNER ) );
}

QGeoSatelliteInfoSource * createDefaultSource(QObject * parent){
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QObject" ) )
   {
      hb_itemReturnRelease( hbqt_bindGetHbObject( NULL, ( void * ) QGeoSatelliteInfoSource::createDefaultSource( hbqt_par_QObject( 1 ) ), "HB_QGEOPOSITIONINFOSOURCE", NULL, HBQT_BIT_QOBJECT ) );
   }
   else
   {
      hb_itemReturnRelease( hbqt_bindGetHbObject( NULL, ( void * ) QGeoSatelliteInfoSource::createDefaultSource( 0 ), "HB_QGEOSATELLITEINFOSOURCE", hbqt_del_QGeoSatelliteInfoSource, HBQT_BIT_OWNER | HBQT_BIT_QOBJECT ) );
   }
}

QGeoSatelliteInfoSource * createSource(const QString & sourceName, QObject * parent){

   if( hb_pcount() == 1 && HB_ISCHAR( 1 ) )
   {
      void * pText01 = NULL;
      hb_itemReturnRelease( hbqt_bindGetHbObject( NULL, ( void * ) QGeoSatelliteInfoSource::createSource( ( QString ) hb_parstr_utf8( 1, &pText01, NULL ), 0 ), "HB_QGEOSATELLITEINFOSOURCE", hbqt_del_QGeoSatelliteInfoSource, HBQT_BIT_OWNER | HBQT_BIT_QOBJECT ) );
      hb_strfree( pText01 );
   }
   else if( hb_pcount() == 2 && HB_ISCHAR( 1 ) && hbqt_par_isDerivedFrom( 2, "QObject" ) )
   {
      void * pText01 = NULL;
      hb_itemReturnRelease( hbqt_bindGetHbObject( NULL, ( void * ) QGeoSatelliteInfoSource::createSource( ( QString ) hb_parstr_utf8( 1, &pText01, NULL ), hbqt_par_QObject( 2 ) ), "HB_QGEOSATELLITEINFOSOURCE", NULL, HBQT_BIT_QOBJECT ) );
      hb_strfree( pText01 );
   }
   else
   {
      hb_errRT_BASE( EG_ARG, 9999, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
   }
}

</PROTOS>

<SLOTS>
virtual void   requestUpdate(int timeout = 0) = 0
virtual void   startUpdates() = 0
virtual void   stopUpdates() = 0
</SLOTS>

<SIGNALS>
void   error(QGeoSatelliteInfoSource::Error satelliteError)
void   requestTimeout()
void   satellitesInUseUpdated(const QList<QGeoSatelliteInfo> & satellites)
void   satellitesInViewUpdated(const QList<QGeoSatelliteInfo> & satellites)
</SIGNALS>

<VARIABLES>
</VARIABLES>

