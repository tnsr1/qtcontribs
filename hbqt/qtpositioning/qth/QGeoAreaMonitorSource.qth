/*
 * $Id: QGeoAreaMonitorSource.qth 389 2015-01-13 03:24:16Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2014 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = yes
Inherit     = QObject
Type        =
New         =
Version     = 0x050200
</CLASS>

<CODE>
#include <QtPositioning/QGeoAreaMonitorSource>

/*
 * QGeoAreaMonitorSource(QObject * parent)
 * virtual ~QGeoAreaMonitorSource()
 */
HB_FUNC( QT_QGEOAREAMONITORSOURCE )
{
   HB_FUNC_EXEC( HB_QGEOAREAMONITORSOURCE );
}
</CODE>

<ENUMS>
enum   AreaMonitorFeature { PersistentAreaMonitorFeature, AnyAreaMonitorFeature }
flags   AreaMonitorFeatures
enum   Error { AccessError, InsufficientPositionInfo, NoError, UnknownSourceError }
</ENUMS>

<PROTOS>
virtual QList<QGeoAreaMonitorInfo>   activeMonitors() const = 0
virtual QList<QGeoAreaMonitorInfo>   activeMonitors(const QGeoShape & lookupArea) const = 0
virtual Error   error() const = 0
virtual QGeoPositionInfoSource *   positionInfoSource() const
virtual bool   requestUpdate(const QGeoAreaMonitorInfo & monitor, const char * signal) = 0
virtual void   setPositionInfoSource(QGeoPositionInfoSource * newSource)
QString   sourceName() const
virtual bool   startMonitoring(const QGeoAreaMonitorInfo & monitor) = 0
virtual bool   stopMonitoring(const QGeoAreaMonitorInfo & monitor) = 0
virtual AreaMonitorFeatures   supportedAreaMonitorFeatures() const = 0

QStringList availableSources(){
   hb_itemReturnRelease( hbqt_bindGetHbObject( NULL, new QStringList( QGeoAreaMonitorSource::availableSources() ), "HB_QSTRINGLIST", hbqt_del_QStringList, HBQT_BIT_OWNER ) );
}

QGeoAreaMonitorSource * createDefaultSource(QObject * parent){
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QObject" ) )
   {
      hb_itemReturnRelease( hbqt_bindGetHbObject( NULL, ( void * ) QGeoAreaMonitorSource::createDefaultSource( hbqt_par_QObject( 1 ) ), "HB_QGEOAREAMONITORSOURCE", NULL, HBQT_BIT_QOBJECT ) );
   }
   else
   {
      hb_itemReturnRelease( hbqt_bindGetHbObject( NULL, ( void * ) QGeoAreaMonitorSource::createDefaultSource( 0 ), "HB_QGEOAREAMONITORSOURCE", hbqt_del_QGeoAreaMonitorSource, HBQT_BIT_OWNER | HBQT_BIT_QOBJECT ) );
   }
}

QGeoAreaMonitorSource * createSource(const QString & sourceName, QObject * parent){

   if( hb_pcount() == 1 && HB_ISCHAR( 1 ) )
   {
      void * pText01 = NULL;
      hb_itemReturnRelease( hbqt_bindGetHbObject( NULL, ( void * ) QGeoAreaMonitorSource::createSource( ( QString ) hb_parstr_utf8( 1, &pText01, NULL ), 0 ), "HB_QGEOAREAMONITORSOURCE", hbqt_del_QGeoAreaMonitorSource, HBQT_BIT_OWNER | HBQT_BIT_QOBJECT ) );
      hb_strfree( pText01 );
   }
   else if( hb_pcount() == 2 && HB_ISCHAR( 1 ) && hbqt_par_isDerivedFrom( 2, "QObject" ) )
   {
      void * pText01 = NULL;
      hb_itemReturnRelease( hbqt_bindGetHbObject( NULL, ( void * ) QGeoAreaMonitorSource::createSource( ( QString ) hb_parstr_utf8( 1, &pText01, NULL ), hbqt_par_QObject( 2 ) ), "HB_QGEOAREAMONITORSOURCE", NULL, HBQT_BIT_QOBJECT ) );
      hb_strfree( pText01 );
   }
   else
   {
      hb_errRT_BASE( EG_ARG, 9999, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
   }
}

</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
void   areaEntered(const QGeoAreaMonitorInfo & monitor, const QGeoPositionInfo & update)
void   areaExited(const QGeoAreaMonitorInfo & monitor, const QGeoPositionInfo & update)
void   error(QGeoAreaMonitorSource::Error areaMonitoringError)
void   monitorExpired(const QGeoAreaMonitorInfo & monitor)
</SIGNALS>

<VARIABLES>
</VARIABLES>

