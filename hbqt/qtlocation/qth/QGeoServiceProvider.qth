/*
 * $Id: QGeoServiceProvider.qth 412 2015-06-30 20:59:14Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2015 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = Yes
Inherit     = QObject
Type        =
New         =
Version     = 0x050500
</CLASS>

<CODE>
#include <QtLocation/QGeoServiceProvider>

/*
 * QGeoServiceProvider(const QString & providerName, const QVariantMap & parameters = QVariantMap(), bool allowExperimental = false)
 * ~QGeoServiceProvider()
 */
HB_FUNC( QT_QGEOSERVICEPROVIDER )
{
   if( hb_pcount() == 3 && HB_ISCHAR( 1 ) && hbqt_par_isDerivedFrom( 2, "QVariantMap" ) && HB_ISLOG( 3 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QGeoServiceProvider( hb_parstr_utf8( 1, &pText01, NULL ), * hbqt_par_QVariantMap( 2 ), hb_parl( 3 ) ) );
      hb_strfree( pText01 );
   }
   else if( hb_pcount() == 2 && HB_ISCHAR( 1 ) && hbqt_par_isDerivedFrom( 2, "QVariantMap" ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QGeoServiceProvider( hb_parstr_utf8( 1, &pText01, NULL ), * hbqt_par_QVariantMap( 2 ) ) );
      hb_strfree( pText01 );
   }
   else if( hb_pcount() == 1 && HB_ISCHAR( 1 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QGeoServiceProvider( hb_parstr_utf8( 1, &pText01, NULL ) ) );
      hb_strfree( pText01 );
   }
   else
   {
      hb_errRT_BASE( EG_ARG, 9999, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
   }
}
</CODE>

<ENUMS>
enum   Error { NoError, NotSupportedError, UnknownParameterError, MissingRequiredParameterError, ConnectionError }
enum   GeocodingFeature { NoGeocodingFeatures, OnlineGeocodingFeature, OfflineGeocodingFeature, ReverseGeocodingFeature, LocalizedGeocodingFeature, AnyGeocodingFeatures }
flags   GeocodingFeatures
enum   MappingFeature { NoMappingFeatures, OnlineMappingFeature, OfflineMappingFeature, LocalizedMappingFeature, AnyMappingFeatures }
flags   MappingFeatures
enum   PlacesFeature { NoPlacesFeatures, OnlinePlacesFeature, OfflinePlacesFeature, SavePlaceFeature, ..., AnyPlacesFeatures }
flags   PlacesFeatures
enum   RoutingFeature { NoRoutingFeatures, OnlineRoutingFeature, OfflineRoutingFeature, LocalizedRoutingFeature, ..., AnyRoutingFeatures }
flags   RoutingFeatures
</ENUMS>

<PROTOS>
Error   error() const
QString   errorString() const
GeocodingFeatures   geocodingFeatures() const
QGeoCodingManager *   geocodingManager() const
MappingFeatures   mappingFeatures() const
QPlaceManager *   placeManager() const
PlacesFeatures   placesFeatures() const
RoutingFeatures   routingFeatures() const
QGeoRoutingManager *   routingManager() const
void   setAllowExperimental(bool allow)
void   setLocale(const QLocale & locale)
void   setParameters(const QVariantMap & parameters)

QStringList   availableServiceProviders()
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>

<VARIABLES>
</VARIABLES>

