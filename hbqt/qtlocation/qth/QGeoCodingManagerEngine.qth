/*
 * $Id: QGeoCodingManagerEngine.qth 412 2015-06-30 20:59:14Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2015 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = Yes
Inherit     = QObject
Type        =
New         =
Version     = 0x050500
</CLASS>

<CODE>
#include <QtLocation/QGeoCodingManagerEngine>
#include <QtCore/QLocale>

/*
 * QGeoCodingManagerEngine(const QVariantMap & parameters, QObject * parent = 0)
 * virtual   ~QGeoCodingManagerEngine()
 */
HB_FUNC( QT_QGEOCODINGMANAGERENGINE )
{
   if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QVariantMap" ) && hbqt_par_isDerivedFrom( 2, "QObject" ) )
   {
      __HB_RETPTRGC__( new QGeoCodingManagerEngine( *hbqt_par_QVariantMap( 1 ), hbqt_par_QObject( 2 ) ) );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QVariantMap" ) )
   {
      __HB_RETPTRGC__( new QGeoCodingManagerEngine( *hbqt_par_QVariantMap( 1 ) ) );
   }
   else
   {
      hb_errRT_BASE( EG_ARG, 9999, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
   }
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
virtual QGeoCodeReply *   geocode(const QGeoAddress & address, const QGeoShape & bounds)
virtual QGeoCodeReply *   geocode(const QString & address, int limit, int offset, const QGeoShape & bounds)
QLocale   locale() const
QString   managerName() const
int   managerVersion() const
virtual QGeoCodeReply *   reverseGeocode(const QGeoCoordinate & coordinate, const QGeoShape & bounds)
void   setLocale(const QLocale & locale)
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
void error(QGeoCodeReply * reply, QGeoCodeReply::Error error, QString errorString = QString())
void finished(QGeoCodeReply * reply)
</SIGNALS>

<VARIABLES>
</VARIABLES>

