/*
 * $Id: QPlaceManagerEngine.qth 412 2015-06-30 20:59:14Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2015 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = Yes
Inherit     = QObject
Type        =
New         =
Version     = 0x050500
</CLASS>

<CODE>
#include <QtLocation/QPlaceManagerEngine>
#include <QtCore/QVariantMap>

/*
 * QPlaceManagerEngine(const QVariantMap & parameters, QObject * parent = 0)
 * virtual   ~QPlaceManagerEngine()
 */
HB_FUNC( QT_QPLACEMANAGERENGINE )
{
   if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QVariantMap" ) && hbqt_par_isDerivedFrom( 2, "QObject" ) )
   {
      __HB_RETPTRGC__( new QPlaceManagerEngine( * hbqt_par_QVariantMap( 1 ), hbqt_par_QObject( 2 ) ) );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QVariantMap" ) )
   {
      __HB_RETPTRGC__( new QPlaceManagerEngine( * hbqt_par_QVariantMap( 1 ) ) );
   }
   else
   {
      hb_errRT_BASE( EG_ARG, 9999, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS );
   }
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
virtual QPlaceCategory   category(const QString & categoryId) const
virtual QList<QPlaceCategory>   childCategories(const QString & parentId) const
virtual QStringList   childCategoryIds(const QString & categoryId) const
virtual QPlace   compatiblePlace(const QPlace & original) const
virtual QUrl   constructIconUrl(const QPlaceIcon & icon, const QSize & size) const
virtual QPlaceContentReply *   getPlaceContent(const QPlaceContentRequest & request)
virtual QPlaceDetailsReply *   getPlaceDetails(const QString & placeId)
virtual QPlaceReply *   initializeCategories()
virtual QList<QLocale>   locales() const
QString   managerName() const
int   managerVersion() const
virtual QPlaceMatchReply *   matchingPlaces(const QPlaceMatchRequest & request)
virtual QString   parentCategoryId(const QString & categoryId) const
virtual QPlaceIdReply *   removeCategory(const QString & categoryId)
virtual QPlaceIdReply *   removePlace(const QString & placeId)
virtual QPlaceIdReply *   saveCategory(const QPlaceCategory & category, const QString & parentId)
virtual QPlaceIdReply *   savePlace(const QPlace & place)
virtual QPlaceSearchReply *   search(const QPlaceSearchRequest & request)
virtual QPlaceSearchSuggestionReply *   searchSuggestions(const QPlaceSearchRequest & request)
virtual void   setLocales(const QList<QLocale> & locales)
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
void   categoryAdded(const QPlaceCategory & category, const QString & parentId)
void   categoryRemoved(const QString & categoryId, const QString & parentId)
void   categoryUpdated(const QPlaceCategory & category, const QString & parentId)
void   dataChanged()
void   error(QPlaceReply * reply, QPlaceReply::Error error, const QString & errorString = QString())
void   finished(QPlaceReply * reply)
void   placeAdded(const QString & placeId)
void   placeRemoved(const QString & placeId)
void   placeUpdated(const QString & placeId)
</SIGNALS>

<VARIABLES>
</VARIABLES>

