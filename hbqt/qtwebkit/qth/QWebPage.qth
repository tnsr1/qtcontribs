/*
 * $Id: QWebPage.qth 250 2013-06-29 00:41:35Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2010 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
Inherit  = QObject
New      = pParent
folder   = qtwebkit
</CLASS>

<CODE>
#include "hbqtgui.h"

#if QT_VERSION >= 0x050000
#   include <QtWebKitWidgets/QWebPage>
#else
#   include <QtWebKit/QWebPage>
#endif
#include <QtCore/QVariant>


/*
 * QWebPage ( QObject * parent = 0 )
 * ~QWebPage ()
 */
HB_FUNC( QT_QWEBPAGE )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QOBJECT" ) )
   {
      __HB_RETPTRGC__( new QWebPage( hbqt_par_QObject( 1 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QWebPage() );
   }
}
</CODE>

<ENUMS>
enum Extension { ChooseMultipleFilesExtension }
enum FindFlag { FindBackward, FindCaseSensitively, FindWrapsAroundDocument }
enum LinkDelegationPolicy { DontDelegateLinks, DelegateExternalLinks, DelegateAllLinks }
enum NavigationType { NavigationTypeLinkClicked, NavigationTypeFormSubmitted, NavigationTypeBackOrForward, NavigationTypeReload, NavigationTypeFormResubmitted, NavigationTypeOther }
enum WebAction { NoWebAction, OpenLink, OpenLinkInNewWindow, OpenFrameInNewWindow, ..., SelectAll }
enum WebWindowType { WebBrowserWindow, WebModalDialog }
flags FindFlags
</ENUMS>

<PROTOS>
QAction * action ( WebAction action ) const
quint64 bytesReceived () const
QMenu * createStandardContextMenu ()
QWebFrame * currentFrame () const
// virtual bool extension ( Extension extension, const ExtensionOption * option = 0, ExtensionReturn * output = 0 )
bool findText ( const QString & subString, FindFlags options = 0 )
bool focusNextPrevChild ( bool next )
bool forwardUnsupportedContent () const
QWebHistory * history () const
QVariant inputMethodQuery ( Qt::InputMethodQuery property ) const
bool isContentEditable () const
bool isModified () const
LinkDelegationPolicy linkDelegationPolicy () const
QWebFrame * mainFrame () const
// QNetworkAccessManager * networkAccessManager () const
QPalette palette () const
QWebPluginFactory * pluginFactory () const
QString selectedText () const
void setContentEditable ( bool editable )
void setForwardUnsupportedContent ( bool forward )
void setLinkDelegationPolicy ( LinkDelegationPolicy policy )
// void setNetworkAccessManager ( QNetworkAccessManager * manager )
void setPalette ( const QPalette & palette )
void setPluginFactory ( QWebPluginFactory * factory )
void setView ( QWidget * view )
void setViewportSize ( const QSize & size ) const
QWebSettings * settings () const
virtual bool supportsExtension ( Extension extension ) const
bool swallowContextMenuEvent ( QContextMenuEvent * event )
quint64 totalBytes () const
virtual void triggerAction ( WebAction action, bool checked = false )
//QUndoStack * undoStack () const
void updatePositionDependentActions ( const QPoint & pos )
QWidget * view () const
QSize viewportSize () const
</PROTOS>

<SIGNALS>
void contentsChanged ()
void databaseQuotaExceeded ( QWebFrame * frame, QString databaseName )
void downloadRequested ( const QNetworkRequest & request )
void frameCreated ( QWebFrame * frame )
void geometryChangeRequested ( const QRect & geom )
void linkClicked ( const QUrl & url )
void linkHovered ( const QString & link, const QString & title, const QString & textContent )
void loadFinished ( bool ok )
void loadProgress ( int progress )
void loadStarted ()
void menuBarVisibilityChangeRequested ( bool visible )
void microFocusChanged ()
void printRequested ( QWebFrame * frame )
void repaintRequested ( const QRect & dirtyRect )
void restoreFrameStateRequested ( QWebFrame * frame )
void saveFrameStateRequested ( QWebFrame * frame, QWebHistoryItem * item )
void scrollRequested ( int dx, int dy, const QRect & rectToScroll )
void selectionChanged ()
void statusBarMessage ( const QString & text )
void statusBarVisibilityChangeRequested ( bool visible )
void toolBarVisibilityChangeRequested ( bool visible )
void unsupportedContent ( QNetworkReply * reply )
void windowCloseRequested ()

void viewportChangeRequested ()                            [*V=0x040800*]
</SIGNALS>
