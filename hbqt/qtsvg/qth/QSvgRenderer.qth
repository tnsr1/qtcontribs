/*
 * $Id: QSvgRenderer.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>

Inherit     = QObject
QObject     = yes

</CLASS>


<CODE>
#include <QtSvg/QSvgRenderer>


/*
 *	QSvgRenderer ( QObject * parent = 0 )
 * QSvgRenderer ( const QString & filename, QObject * parent = 0 )
 * QSvgRenderer ( const QByteArray & contents, QObject * parent = 0 )
 * QSvgRenderer ( QXmlStreamReader * contents, QObject * parent = 0 )
 * ~QSvgRenderer ()
 */
HB_FUNC( QT_QSVGRENDERER )
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QOBJECT" ) )
   {
      __HB_RETPTRGC__( new QSvgRenderer( hbqt_par_QObject( 1 ) ) );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QBYTEARRAY" ) )
   {
      __HB_RETPTRGC__( new QSvgRenderer( *hbqt_par_QByteArray( 1 ) ) );
   }
   else if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QXMLSTREAMREADER" ) )
   {
      __HB_RETPTRGC__( new QSvgRenderer( hbqt_par_QXmlStreamReader( 1 ) ) );
   }
   else if( hb_pcount() == 1 && HB_ISCHAR( 1 ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QSvgRenderer( ( QString ) hb_parstr_utf8( 1, &pText01, NULL ) ) );
      hb_strfree( pText01 );
   }
   else if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QBYTEARRAY" ) && hbqt_par_isDerivedFrom( 2, "QOBJECT" ) )
   {
      __HB_RETPTRGC__( new QSvgRenderer( *hbqt_par_QByteArray( 1 ), hbqt_par_QObject( 2 ) ) );
   }
   else if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QXMLSTREAMREADER" ) && hbqt_par_isDerivedFrom( 2, "QOBJECT" ) )
   {
      __HB_RETPTRGC__( new QSvgRenderer( hbqt_par_QXmlStreamReader( 1 ), hbqt_par_QObject( 2 ) ) );
   }
   else if( hb_pcount() == 2 && HB_ISCHAR( 1 ) && hbqt_par_isDerivedFrom( 2, "QOBJECT" ) )
   {
      void * pText01 = NULL;
      __HB_RETPTRGC__( new QSvgRenderer( ( QString ) hb_parstr_utf8( 1, &pText01, NULL ), hbqt_par_QObject( 2 ) ) );
      hb_strfree( pText01 );
   }
   else
   {
      __HB_RETPTRGC__( new QSvgRenderer() );
   }
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
bool	animated () const
QRectF	boundsOnElement ( const QString & id ) const
QSize	defaultSize () const
bool	elementExists ( const QString & id ) const
int	framesPerSecond () const
bool	isValid () const
QMatrix	matrixForElement ( const QString & id ) const
void	setFramesPerSecond ( int num )
void	setViewBox ( const QRect & viewbox )
void	setViewBox ( const QRectF & viewbox )
QRect	viewBox () const
QRectF	viewBoxF () const
</PROTOS>

<SLOTS>
bool load ( const QString & filename )
bool load ( const QByteArray & contents )
bool load ( QXmlStreamReader * contents )
void render ( QPainter * painter )
void render ( QPainter * painter, const QRectF & bounds )
void render ( QPainter * painter, const QString & elementId, const QRectF & bounds = QRectF() )
</SLOTS>

<SIGNALS>
void repaintNeeded ()
</SIGNALS>
