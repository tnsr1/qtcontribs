/*
 * $Id: QDeclarativeListReference.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = No
Inherit     = 
Type        = 
New         = 
Version     = 0x040700
</CLASS>

<CODE>
#include <QtDeclarative/QDeclarativeListReference>


/*
 * QDeclarativeListReference ()
 * QDeclarativeListReference ( QObject * object, const char * property, QDeclarativeEngine * engine = 0 )
 */
HB_FUNC( QT_QDECLARATIVELISTREFERENCE )
{
   if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QOBJECT" ) && HB_ISCHAR( 2 ) && hbqt_par_isDerivedFrom( 1, "QDECLARATIVEENGINE" ) )
   {
      __HB_RETPTRGC__( new QDeclarativeListReference( hbqt_par_QObject( 1 ), hb_parc( 2 ), hbqt_par_QDeclarativeEngine( 3 ) ) );
   }
   if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 1, "QOBJECT" ) && HB_ISCHAR( 2 ) )
   {
      __HB_RETPTRGC__( new QDeclarativeListReference( hbqt_par_QObject( 1 ), hb_parc( 2 ), 0 ) );
   }
   else
   {   
      __HB_RETPTRGC__( new QDeclarativeListReference() );
   }   
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
bool append ( QObject * object ) const
QObject * at ( int index ) const
bool canAppend () const
bool canAt () const
bool canClear () const
bool canCount () const
bool clear () const
int count () const
bool isValid () const
const QMetaObject * listElementType () const
QObject * object () const
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>

<VARIABLES>
</VARIABLES>



