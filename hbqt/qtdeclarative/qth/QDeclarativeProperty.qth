/*
 * $Id: QDeclarativeProperty.qth 34 2012-10-13 21:57:41Z bedipritpal $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2012 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject     = No
Inherit     = 
Type        = 
New         = 
Version     = 0x040700
</CLASS>

<CODE>
#include <QtDeclarative/QDeclarativeProperty>


/*
 * QDeclarativeProperty ()
 * QDeclarativeProperty ( QObject * obj )
 * QDeclarativeProperty ( QObject * obj, QDeclarativeContext * ctxt )
 * QDeclarativeProperty ( QObject * obj, QDeclarativeEngine * engine )
 * QDeclarativeProperty ( QObject * obj, const QString & name )
 * QDeclarativeProperty ( QObject * obj, const QString & name, QDeclarativeContext * ctxt )
 * QDeclarativeProperty ( QObject * obj, const QString & name, QDeclarativeEngine * engine )
 * QDeclarativeProperty ( const QDeclarativeProperty & other )
 */
HB_FUNC( QT_QDECLARATIVEPROPERTY ) 
{
   if( hb_pcount() == 1 && hbqt_par_isDerivedFrom( 1, "QDECLARATIVEPROPERTY" ) )
   {
      __HB_RETPTRGC__( new QDeclarativeProperty( *hbqt_par_QDeclarativeProperty( 1 ) ) );
   }   
   else if( hb_pcount() >= 1 && hbqt_par_isDerivedFrom( 1, "QOBJECT" ) )
   {
      if( hb_pcount() == 1 )   
      {
         __HB_RETPTRGC__( new QDeclarativeProperty( hbqt_par_QObject( 1 ) ) );
      }      
      else if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 2, "QDECLARATIVECONTEXT" ) )
      {
         __HB_RETPTRGC__( new QDeclarativeProperty( hbqt_par_QObject( 1 ), hbqt_par_QDeclarativeContext( 2 ) ) );
      }
      else if( hb_pcount() == 2 && hbqt_par_isDerivedFrom( 2, "QDECLARATIVEENGINE" ) )
      {
         __HB_RETPTRGC__( new QDeclarativeProperty( hbqt_par_QObject( 1 ), hbqt_par_QDeclarativeEngine( 2 ) ) );
      } 
      else if( hb_pcount() == 2 && HB_ISCHAR( 2 ) )
      {      
         void * pText01 = NULL;
         __HB_RETPTRGC__( new QDeclarativeProperty( hbqt_par_QObject( 1 ), hb_parstr_utf8( 2, &pText01, NULL ) ) );
         hb_strfree( pText01 );
      }
      else if( hb_pcount() == 3 && HB_ISCHAR( 2 ) && hbqt_par_isDerivedFrom( 3, "QDECLARATIVECONTEXT" ) )
      {      
         void * pText01 = NULL;
         __HB_RETPTRGC__( new QDeclarativeProperty( hbqt_par_QObject( 1 ), hb_parstr_utf8( 2, &pText01, NULL ), hbqt_par_QDeclarativeContext( 3 ) ) );
         hb_strfree( pText01 );
      }   
      else if( hb_pcount() == 3 && HB_ISCHAR( 2 ) && hbqt_par_isDerivedFrom( 3, "QDECLARATIVEENGINE" ) )
      {      
         void * pText01 = NULL;
         __HB_RETPTRGC__( new QDeclarativeProperty( hbqt_par_QObject( 1 ), hb_parstr_utf8( 2, &pText01, NULL ),  hbqt_par_QDeclarativeEngine( 3 ) ) );
         hb_strfree( pText01 );
      }   
   }
   else
   {   
      __HB_RETPTRGC__( new QDeclarativeProperty() );
   }
}
</CODE>

<ENUMS>
enum PropertyTypeCategory { InvalidCategory, List, Object, Normal }
enum Type { Invalid, Property, SignalProperty }
</ENUMS>

<PROTOS>
bool connectNotifySignal ( QObject * dest, const char * slot ) const
bool connectNotifySignal ( QObject * dest, int method ) const
bool hasNotifySignal () const
int index () const
bool isDesignable () const
bool isProperty () const
bool isResettable () const
bool isSignalProperty () const
bool isValid () const
bool isWritable () const
QMetaMethod method () const
QString name () const
bool needsNotifySignal () const
QObject * object () const
QMetaProperty property () const
int propertyType () const
PropertyTypeCategory propertyTypeCategory () const
const char * propertyTypeName () const
QVariant read () const
bool reset () const
Type type () const
bool write ( const QVariant & value ) const

QVariant read ( QObject * object, const QString & name )
QVariant read ( QObject * object, const QString & name, QDeclarativeContext * ctxt )
QVariant read ( QObject * object, const QString & name, QDeclarativeEngine * engine )
bool write ( QObject * object, const QString & name, const QVariant & value )
bool write ( QObject * object, const QString & name, const QVariant & value, QDeclarativeContext * ctxt )
bool write ( QObject * object, const QString & name, const QVariant & value, QDeclarativeEngine * engine )
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>

<VARIABLES>
</VARIABLES>



